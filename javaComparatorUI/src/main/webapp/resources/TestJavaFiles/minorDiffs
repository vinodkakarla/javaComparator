{"pkg":{"diff":0,"lines":[{"lineNum":1,"value":"package com.imaginea.structuralComaparator.test;\n"},{"lineNum":1,"value":"package com.imaginea.structuralComaparator.test;\n"}]},"imports":[{"diff":0,"lines":[{"isStatic":false,"lineNum":4,"value":"java.io.File"},{"isStatic":false,"lineNum":3,"value":"java.io.File"}]},{"diff":0,"lines":[{"isStatic":false,"lineNum":6,"value":"java.io.IOException"},{"isStatic":false,"lineNum":4,"value":"java.io.IOException"}]},{"diff":0,"lines":[{"isStatic":false,"lineNum":7,"value":"java.util.Arrays"},{"isStatic":false,"lineNum":5,"value":"java.util.Arrays"}]},{"diff":0,"lines":[{"isStatic":false,"lineNum":8,"value":"java.util.List"},{"isStatic":false,"lineNum":6,"value":"java.util.List"}]},{"diff":0,"lines":[{"isStatic":false,"lineNum":10,"value":"org.apache.commons.lang3.builder.ToStringBuilder"},{"isStatic":false,"lineNum":8,"value":"org.apache.commons.lang3.builder.ToStringBuilder"}]},{"diff":0,"lines":[{"isStatic":false,"lineNum":11,"value":"org.codehaus.jackson.JsonGenerationException"},{"isStatic":false,"lineNum":9,"value":"org.codehaus.jackson.JsonGenerationException"}]},{"diff":0,"lines":[{"isStatic":false,"lineNum":12,"value":"org.codehaus.jackson.map.JsonMappingException"},{"isStatic":false,"lineNum":10,"value":"org.codehaus.jackson.map.JsonMappingException"}]},{"diff":0,"lines":[{"isStatic":false,"lineNum":13,"value":"org.codehaus.jackson.map.ObjectMapper"},{"isStatic":false,"lineNum":11,"value":"org.codehaus.jackson.map.ObjectMapper"}]},{"diff":0,"lines":[{"isStatic":false,"lineNum":14,"value":"org.junit.Assert"},{"isStatic":false,"lineNum":12,"value":"org.junit.Assert"}]},{"diff":-1,"lines":[null,{"isStatic":false,"lineNum":13,"value":"org.junit.Test1"}]},{"diff":0,"lines":[{"isStatic":false,"lineNum":17,"value":"com.google.gson.Gson"},{"isStatic":false,"lineNum":15,"value":"com.google.gson.Gson"}]},{"diff":0,"lines":[{"isStatic":false,"lineNum":18,"value":"com.google.gson.GsonBuilder"},{"isStatic":false,"lineNum":16,"value":"com.google.gson.GsonBuilder"}]},{"diff":0,"lines":[{"isStatic":false,"lineNum":19,"value":"com.imaginea.structuralComaparator.domain.ComparisonResult"},{"isStatic":false,"lineNum":17,"value":"com.imaginea.structuralComaparator.domain.ComparisonResult"}]},{"diff":0,"lines":[{"isStatic":false,"lineNum":20,"value":"com.imaginea.structuralComaparator.domain.Import"},{"isStatic":false,"lineNum":18,"value":"com.imaginea.structuralComaparator.domain.Import"}]},{"diff":0,"lines":[{"isStatic":false,"lineNum":21,"value":"com.imaginea.structuralComaparator.domain.Package"},{"isStatic":false,"lineNum":19,"value":"com.imaginea.structuralComaparator.domain.Package"}]},{"diff":0,"lines":[{"isStatic":false,"lineNum":22,"value":"com.imaginea.structuralComaparator.domain.Type"},{"isStatic":false,"lineNum":20,"value":"com.imaginea.structuralComaparator.domain.Type"}]},{"diff":0,"lines":[{"isStatic":false,"lineNum":23,"value":"com.imaginea.structuralComaparator.domain.node.DeclarationNode"},{"isStatic":false,"lineNum":21,"value":"com.imaginea.structuralComaparator.domain.node.DeclarationNode"}]},{"diff":0,"lines":[{"isStatic":false,"lineNum":24,"value":"com.imaginea.structuralComaparator.domain.node.EnumTypeDeclarationNode"},{"isStatic":false,"lineNum":22,"value":"com.imaginea.structuralComaparator.domain.node.EnumTypeDeclarationNode"}]},{"diff":0,"lines":[{"isStatic":false,"lineNum":25,"value":"com.imaginea.structuralComaparator.repo.ComparatorImpl"},{"isStatic":false,"lineNum":23,"value":"com.imaginea.structuralComaparator.repo.ComparatorImpl"}]},{"diff":1,"lines":[{"isStatic":false,"lineNum":3,"value":"java.io.BufferedWriter"},null]},{"diff":1,"lines":[{"isStatic":false,"lineNum":15,"value":"org.junit.Test"},null]},{"diff":1,"lines":[{"isStatic":false,"lineNum":5,"value":"java.io.FileWriter"},null]}],"types":[{"diff":0,"declarations":[{"isInterface":true,"superClass":"","superInterfacelist":[],"bodyDeclarations":[],"lineNum":27,"name":"abc","modifiers":[],"childDeclarations":{},"completeNodeValue":"interface abc {\n}\n"},{"isInterface":true,"superClass":"","superInterfacelist":[],"bodyDeclarations":[],"lineNum":25,"name":"abc","modifiers":[],"childDeclarations":{},"completeNodeValue":"interface abc {\n}\n"}],"commonChilds":[]},{"diff":0,"declarations":[{"isInterface":false,"superClass":"","superInterfacelist":[],"bodyDeclarations":[],"lineNum":31,"name":"bac","modifiers":["abstract"],"childDeclarations":{},"completeNodeValue":"abstract class bac {\n}\n"},{"isInterface":false,"superClass":"","superInterfacelist":[],"bodyDeclarations":[],"lineNum":29,"name":"bac","modifiers":["abstract"],"childDeclarations":{},"completeNodeValue":"abstract class bac {\n}\n"}],"commonChilds":[]},{"diff":0,"declarations":[{"enumConstants":["apple","appl"],"superInterfacelist":[],"bodyDeclarations":[],"lineNum":35,"name":"en","modifiers":[],"childDeclarations":{},"completeNodeValue":"enum en {apple, appl}\n"},{"enumConstants":["apple","appl"],"superInterfacelist":[],"bodyDeclarations":[],"lineNum":33,"name":"en","modifiers":[],"childDeclarations":{},"completeNodeValue":"enum en {apple, appl}\n"}],"commonChilds":[]},{"diff":10,"declarations":[{"isInterface":false,"superClass":"bac","superInterfacelist":["abc"],"bodyDeclarations":[],"lineNum":39,"name":"StructuralComapareTest","modifiers":["public"],"childDeclarations":{},"completeNodeValue":"public class StructuralComapareTest extends bac implements abc {\n  int value\u003d0;\n  int[] arr\u003d{1,2};\n  @Test public final void assertPackageEqual(){\n    ComparatorImpl comparator\u003dnew ComparatorImpl();\n    ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\");\n    com.imaginea.structuralComaparator.domain.Package pkg\u003dresult.getPkg();\n    isPackageDifferent(pkg);\n  }\n  @Test public final void assertImportsEqual(){\n    ComparatorImpl comparator\u003dnew ComparatorImpl();\n    ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\");\n    List\u003cImport\u003e imports\u003dresult.getImports();\n    isImportsDifferent(imports);\n  }\n  private void isPackageDifferent(  Package pkg){\n    if (pkg.getDiff() !\u003d 0)     Assert.fail(\"Package is different: \" + pkg);\n  }\n  void isImportsDifferent(  List\u003cImport\u003e imports){\n    for (    Import imp : imports)     if (imp.getDiff() !\u003d 0)     Assert.fail(\"Imports are different: \" + imp);\n  }\n  @Test public final void assertTypesEqual(){\n    ComparatorImpl comparator\u003dnew ComparatorImpl();\n    ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\");\n    List\u003cType\u003e types\u003dresult.getTypes();\n    isTypesDifferent(types);\n  }\n  private void isTypesDifferent(  List\u003cType\u003e types){\n    for (    Type type : types)     if (type.getDiff() !\u003d 0)     Assert.fail(\"Imports are different: \" + type);\n  }\n  @Test public final void assertJavaFileStructuresEqual(){\n    ComparatorImpl comparator\u003dnew ComparatorImpl();\n    ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\");\n    isPackageDifferent(result.getPkg());\n    isImportsDifferent(result.getImports());\n    isTypesDifferent(result.getTypes());\n  }\n  static void testTypes(){\n    ComparatorImpl comparator\u003dnew ComparatorImpl();\n    ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/resources/TestJavaFiles/Testing.java.txt\");\n    List\u003cType\u003e types\u003dresult.getTypes();\n    for (    Type type : types) {\n      System.out.println(type);\n    }\n  }\n  static void testImports(){\n    ComparatorImpl comparator\u003dnew ComparatorImpl();\n    ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\");\n    List\u003cImport\u003e imports\u003dresult.getImports();\n    for (    Import imp : imports) {\n      System.out.println(imp);\n    }\n  }\n  public static void main(  String[] args){\n    ComparatorImpl comparator\u003dnew ComparatorImpl();\n    ComparisonResult result12\u003dcomparator.compare(\"F:/Workspace/structuralComaparator/src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/resources/TestJavaFiles/Testing.java.txt\");\n    Gson gson\u003dnew Gson();\n    String json\u003dgson.toJson(result12);\n    try {\n      writeToFile(json);\n    }\n catch (    IOException e) {\n      e.printStackTrace();\n    }\n    System.out.println(\"\\n\\n\\n\" + json + \"\\n\\n*********************\");\n    ComparisonResult result1\u003dgson.fromJson(json,ComparisonResult.class);\n    System.out.println(\"\" + result1.getImports().size());\n    System.out.println(\"\" + result1.getTypes().get(3).getClass());\n    System.out.println(\"\" + result1.getTypes().get(3).getAbstractDeclarations(0).getClass());\n    System.out.println(\"\" + result1.getImports().size());\n  }\n  private static void writeToFile(  String json) throws IOException {\n    File file\u003dnew File(\"C:/Users/vinod/Desktop/dummy.json\");\n    BufferedWriter writer\u003dnull;\n    try {\n      writer\u003dnew BufferedWriter(new FileWriter(file));\n      writer.write(json);\n    }\n catch (    IOException e) {\n    }\n finally {\n      try {\n        if (writer !\u003d null)         writer.close();\n      }\n catch (      IOException e) {\n      }\n    }\n  }\nclass mnop {\nclass bvd {\n      void temp(){\n      }\n    }\n  }\n  @Override public String toString(){\n    ToStringBuilder builder\u003dnew ToStringBuilder(this);\n    builder.append(\"value\",value);\n    if (arr !\u003d null)     builder.append(\"arr\",Arrays.toString(arr));\n    return builder.toString();\n  }\nclass mp {\nclass bvdes {\n      void temp(){\n      }\n    }\n  }\n}\n"},{"isInterface":false,"superClass":"bac","superInterfacelist":["abc"],"bodyDeclarations":[],"lineNum":37,"name":"StructuralComapareTest","modifiers":["public"],"childDeclarations":{},"completeNodeValue":"public class StructuralComapareTest extends bac implements abc {\n  int value\u003d0;\n  int[] arr\u003d{1,2};\n  @Test public final void assertPackageEqual(){\n    ComparatorImpl comparator\u003dnew ComparatorImpl();\n    ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\");\n    com.imaginea.structuralComaparator.domain.Package pkg\u003dresult.getPkg();\n    isPackageDifferent(pkg);\n  }\n  private void isPackageDifferent(  Package pkg){\n    if (pkg.getDiff() !\u003d 0)     Assert.fail(\"Package is different: \" + pkg);\n  }\n  @Test public final void assertImportsEqual(){\n    ComparatorImpl comparator\u003dnew ComparatorImpl();\n    ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\");\n    List\u003cImport\u003e imports\u003dresult.getImports();\n    isImportsDifferent(imports);\n  }\n  void isImportsDifferent(  List\u003cImport\u003e imports){\n    for (    Import imp : imports)     if (imp.getDiff() !\u003d 0)     Assert.fail(\"Imports are different: \" + imp);\n  }\n  @Test public final void assertTypesEqual(){\n    ComparatorImpl comparator\u003dnew ComparatorImpl();\n    ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\");\n    List\u003cType\u003e types\u003dresult.getTypes();\n    isTypesDifferent(types);\n  }\n  private void isTypesDifferent(  List\u003cType\u003e types){\n    for (    Type type : types)     if (type.getDiff() !\u003d 0)     Assert.fail(\"Imports are different: \" + type);\n  }\n  @Test public final void assertJavaFileStructuresEqual(){\n    ComparatorImpl comparator\u003dnew ComparatorImpl();\n    ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\");\n    isPackageDifferent(result.getPkg());\n    isImportsDifferent(result.getImports());\n    isTypesDifferent(result.getTypes());\n  }\n  static void testTypes(){\n    ComparatorImpl comparator\u003dnew ComparatorImpl();\n    ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/resources/TestJavaFiles/Testing.java.txt\");\n    List\u003cType\u003e types\u003dresult.getTypes();\n    for (    Type type : types) {\n      System.out.println(type);\n    }\n  }\n  static void testImports(){\n    ComparatorImpl comparator\u003dnew ComparatorImpl();\n    ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\");\n    List\u003cImport\u003e imports\u003dresult.getImports();\n    for (    Import imp : imports) {\n      System.out.println(imp);\n    }\n  }\n  public static void main(  String[] args){\n    ComparatorImpl comparator\u003dnew ComparatorImpl();\n    ComparisonResult result\u003dcomparator.compare(\"F:/Workspace/structuralComaparator/src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/resources/TestJavaFiles/Testing.java.txt\");\n    Gson gson\u003dnew Gson();\n    String json\u003dgson.toJson(result);\n    System.out.println(\"\\n\\n\\n\" + json + \"\\n\\n*********************\");\n  }\nclass mnop {\nclass bvd {\n      void temp(){\n      }\n    }\n  }\n  @Override public String toString(){\n    ToStringBuilder builder\u003dnew ToStringBuilder(this);\n    builder.append(\"value\",value);\n    if (arr !\u003d null)     builder.append(\"arr\",Arrays.toString(arr));\n    return builder.toString();\n  }\nclass mp {\nclass bvdes {\n      void temp(){\n      }\n    }\n  }\n}\n"}],"commonChilds":[{"diff":10,"declarations":[{"isConstructor":false,"returnType":"void","parameters":"String[] args","thrownExceptions":[],"blockofStatements":[],"lineNum":119,"name":"main","modifiers":["public","static"],"childDeclarations":{},"completeNodeValue":"public static void main(String[] args){\n  ComparatorImpl comparator\u003dnew ComparatorImpl();\n  ComparisonResult result12\u003dcomparator.compare(\"F:/Workspace/structuralComaparator/src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/resources/TestJavaFiles/Testing.java.txt\");\n  Gson gson\u003dnew Gson();\n  String json\u003dgson.toJson(result12);\n  try {\n    writeToFile(json);\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n  }\n  System.out.println(\"\\n\\n\\n\" + json + \"\\n\\n*********************\");\n  ComparisonResult result1\u003dgson.fromJson(json,ComparisonResult.class);\n  System.out.println(\"\" + result1.getImports().size());\n  System.out.println(\"\" + result1.getTypes().get(3).getClass());\n  System.out.println(\"\" + result1.getTypes().get(3).getAbstractDeclarations(0).getClass());\n  System.out.println(\"\" + result1.getImports().size());\n}\n"},{"isConstructor":false,"returnType":"void","parameters":"String[] args","thrownExceptions":[],"blockofStatements":[],"lineNum":117,"name":"main","modifiers":["public","static"],"childDeclarations":{},"completeNodeValue":"public static void main(String[] args){\n  ComparatorImpl comparator\u003dnew ComparatorImpl();\n  ComparisonResult result\u003dcomparator.compare(\"F:/Workspace/structuralComaparator/src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/resources/TestJavaFiles/Testing.java.txt\");\n  Gson gson\u003dnew Gson();\n  String json\u003dgson.toJson(result);\n  System.out.println(\"\\n\\n\\n\" + json + \"\\n\\n*********************\");\n}\n"}],"commonChilds":[{"diff":0,"declarations":[{"type":"ComparatorImpl","value":"new ComparatorImpl()","lineNum":120,"name":"comparator","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparatorImpl comparator\u003dnew ComparatorImpl();\n"},{"type":"ComparatorImpl","value":"new ComparatorImpl()","lineNum":118,"name":"comparator","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparatorImpl comparator\u003dnew ComparatorImpl();\n"}],"commonChilds":[]},{"diff":1,"declarations":[{"type":"ComparisonResult","value":"comparator.compare(\"F:/Workspace/structuralComaparator/src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/resources/TestJavaFiles/Testing.java.txt\")","lineNum":121,"name":"result12","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparisonResult result12\u003dcomparator.compare(\"F:/Workspace/structuralComaparator/src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/resources/TestJavaFiles/Testing.java.txt\");\n"},null],"commonChilds":[]},{"diff":-1,"declarations":[null,{"type":"ComparisonResult","value":"comparator.compare(\"F:/Workspace/structuralComaparator/src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/resources/TestJavaFiles/Testing.java.txt\")","lineNum":119,"name":"result","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparisonResult result\u003dcomparator.compare(\"F:/Workspace/structuralComaparator/src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/resources/TestJavaFiles/Testing.java.txt\");\n"}],"commonChilds":[]},{"diff":0,"declarations":[{"type":"Gson","value":"new Gson()","lineNum":124,"name":"gson","modifiers":[],"childDeclarations":{},"completeNodeValue":"Gson gson\u003dnew Gson();\n"},{"type":"Gson","value":"new Gson()","lineNum":122,"name":"gson","modifiers":[],"childDeclarations":{},"completeNodeValue":"Gson gson\u003dnew Gson();\n"}],"commonChilds":[]},{"diff":10,"declarations":[{"type":"String","value":"gson.toJson(result12)","lineNum":125,"name":"json","modifiers":[],"childDeclarations":{},"completeNodeValue":"String json\u003dgson.toJson(result12);\n"},{"type":"String","value":"gson.toJson(result)","lineNum":123,"name":"json","modifiers":[],"childDeclarations":{},"completeNodeValue":"String json\u003dgson.toJson(result);\n"}],"commonChilds":[]},{"diff":1,"declarations":[{"value":"try {\n  writeToFile(json);\n}\n catch (IOException e) {\n  e.printStackTrace();\n}\n","lineNum":126,"childDeclarations":{},"completeNodeValue":"try {\n  writeToFile(json);\n}\n catch (IOException e) {\n  e.printStackTrace();\n}\n"},null],"commonChilds":[]},{"diff":0,"declarations":[{"value":"System.out.println(\"\\n\\n\\n\" + json + \"\\n\\n*********************\");\n","lineNum":131,"childDeclarations":{},"completeNodeValue":"System.out.println(\"\\n\\n\\n\" + json + \"\\n\\n*********************\");\n"},{"value":"System.out.println(\"\\n\\n\\n\" + json + \"\\n\\n*********************\");\n","lineNum":124,"childDeclarations":{},"completeNodeValue":"System.out.println(\"\\n\\n\\n\" + json + \"\\n\\n*********************\");\n"}],"commonChilds":[]},{"diff":1,"declarations":[{"type":"ComparisonResult","value":"gson.fromJson(json,ComparisonResult.class)","lineNum":132,"name":"result1","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparisonResult result1\u003dgson.fromJson(json,ComparisonResult.class);\n"},null],"commonChilds":[]},{"diff":1,"declarations":[{"value":"System.out.println(\"\" + result1.getImports().size());\n","lineNum":133,"childDeclarations":{},"completeNodeValue":"System.out.println(\"\" + result1.getImports().size());\n"},null],"commonChilds":[]},{"diff":1,"declarations":[{"value":"System.out.println(\"\" + result1.getTypes().get(3).getClass());\n","lineNum":134,"childDeclarations":{},"completeNodeValue":"System.out.println(\"\" + result1.getTypes().get(3).getClass());\n"},null],"commonChilds":[]},{"diff":1,"declarations":[{"value":"System.out.println(\"\" + result1.getTypes().get(3).getAbstractDeclarations(0).getClass());\n","lineNum":135,"childDeclarations":{},"completeNodeValue":"System.out.println(\"\" + result1.getTypes().get(3).getAbstractDeclarations(0).getClass());\n"},null],"commonChilds":[]},{"diff":1,"declarations":[{"value":"System.out.println(\"\" + result1.getImports().size());\n","lineNum":136,"childDeclarations":{},"completeNodeValue":"System.out.println(\"\" + result1.getImports().size());\n"},null],"commonChilds":[]}]},{"diff":0,"declarations":[{"isInterface":false,"superClass":"","superInterfacelist":[],"bodyDeclarations":[],"lineNum":171,"name":"mp","modifiers":[],"childDeclarations":{},"completeNodeValue":"class mp {\nclass bvdes {\n    void temp(){\n    }\n  }\n}\n"},{"isInterface":false,"superClass":"","superInterfacelist":[],"bodyDeclarations":[],"lineNum":143,"name":"mp","modifiers":[],"childDeclarations":{},"completeNodeValue":"class mp {\nclass bvdes {\n    void temp(){\n    }\n  }\n}\n"}],"commonChilds":[{"diff":0,"declarations":[{"isInterface":false,"superClass":"","superInterfacelist":[],"bodyDeclarations":[],"lineNum":172,"name":"bvdes","modifiers":[],"childDeclarations":{},"completeNodeValue":"class bvdes {\n  void temp(){\n  }\n}\n"},{"isInterface":false,"superClass":"","superInterfacelist":[],"bodyDeclarations":[],"lineNum":144,"name":"bvdes","modifiers":[],"childDeclarations":{},"completeNodeValue":"class bvdes {\n  void temp(){\n  }\n}\n"}],"commonChilds":[{"diff":0,"declarations":[{"isConstructor":false,"returnType":"void","parameters":"","thrownExceptions":[],"blockofStatements":[],"lineNum":173,"name":"temp","modifiers":[],"childDeclarations":{},"completeNodeValue":"void temp(){\n}\n"},{"isConstructor":false,"returnType":"void","parameters":"","thrownExceptions":[],"blockofStatements":[],"lineNum":145,"name":"temp","modifiers":[],"childDeclarations":{},"completeNodeValue":"void temp(){\n}\n"}],"commonChilds":[]}]}]},{"diff":0,"declarations":[{"type":"int[]","value":"{1,2}","lineNum":42,"name":"arr","modifiers":[],"childDeclarations":{},"completeNodeValue":"int[] arr\u003d{1,2};\n"},{"type":"int[]","value":"{1,2}","lineNum":40,"name":"arr","modifiers":[],"childDeclarations":{},"completeNodeValue":"int[] arr\u003d{1,2};\n"}],"commonChilds":[]},{"diff":0,"declarations":[{"isConstructor":false,"returnType":"void","parameters":"","thrownExceptions":[],"blockofStatements":[],"lineNum":89,"name":"assertJavaFileStructuresEqual","modifiers":["@Test","public","final"],"childDeclarations":{},"completeNodeValue":"@Test public final void assertJavaFileStructuresEqual(){\n  ComparatorImpl comparator\u003dnew ComparatorImpl();\n  ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\");\n  isPackageDifferent(result.getPkg());\n  isImportsDifferent(result.getImports());\n  isTypesDifferent(result.getTypes());\n}\n"},{"isConstructor":false,"returnType":"void","parameters":"","thrownExceptions":[],"blockofStatements":[],"lineNum":87,"name":"assertJavaFileStructuresEqual","modifiers":["@Test","public","final"],"childDeclarations":{},"completeNodeValue":"@Test public final void assertJavaFileStructuresEqual(){\n  ComparatorImpl comparator\u003dnew ComparatorImpl();\n  ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\");\n  isPackageDifferent(result.getPkg());\n  isImportsDifferent(result.getImports());\n  isTypesDifferent(result.getTypes());\n}\n"}],"commonChilds":[{"diff":0,"declarations":[{"type":"ComparatorImpl","value":"new ComparatorImpl()","lineNum":91,"name":"comparator","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparatorImpl comparator\u003dnew ComparatorImpl();\n"},{"type":"ComparatorImpl","value":"new ComparatorImpl()","lineNum":89,"name":"comparator","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparatorImpl comparator\u003dnew ComparatorImpl();\n"}],"commonChilds":[]},{"diff":0,"declarations":[{"type":"ComparisonResult","value":"comparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\")","lineNum":92,"name":"result","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\");\n"},{"type":"ComparisonResult","value":"comparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\")","lineNum":90,"name":"result","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\");\n"}],"commonChilds":[]},{"diff":0,"declarations":[{"value":"isPackageDifferent(result.getPkg());\n","lineNum":94,"childDeclarations":{},"completeNodeValue":"isPackageDifferent(result.getPkg());\n"},{"value":"isPackageDifferent(result.getPkg());\n","lineNum":92,"childDeclarations":{},"completeNodeValue":"isPackageDifferent(result.getPkg());\n"}],"commonChilds":[]},{"diff":0,"declarations":[{"value":"isImportsDifferent(result.getImports());\n","lineNum":95,"childDeclarations":{},"completeNodeValue":"isImportsDifferent(result.getImports());\n"},{"value":"isImportsDifferent(result.getImports());\n","lineNum":93,"childDeclarations":{},"completeNodeValue":"isImportsDifferent(result.getImports());\n"}],"commonChilds":[]},{"diff":0,"declarations":[{"value":"isTypesDifferent(result.getTypes());\n","lineNum":96,"childDeclarations":{},"completeNodeValue":"isTypesDifferent(result.getTypes());\n"},{"value":"isTypesDifferent(result.getTypes());\n","lineNum":94,"childDeclarations":{},"completeNodeValue":"isTypesDifferent(result.getTypes());\n"}],"commonChilds":[]}]},{"diff":0,"declarations":[{"isConstructor":false,"returnType":"void","parameters":"Package pkg","thrownExceptions":[],"blockofStatements":[],"lineNum":63,"name":"isPackageDifferent","modifiers":["private"],"childDeclarations":{},"completeNodeValue":"private void isPackageDifferent(Package pkg){\n  if (pkg.getDiff() !\u003d 0)   Assert.fail(\"Package is different: \" + pkg);\n}\n"},{"isConstructor":false,"returnType":"void","parameters":"Package pkg","thrownExceptions":[],"blockofStatements":[],"lineNum":52,"name":"isPackageDifferent","modifiers":["private"],"childDeclarations":{},"completeNodeValue":"private void isPackageDifferent(Package pkg){\n  if (pkg.getDiff() !\u003d 0)   Assert.fail(\"Package is different: \" + pkg);\n}\n"}],"commonChilds":[{"diff":0,"declarations":[{"value":"if (pkg.getDiff() !\u003d 0) Assert.fail(\"Package is different: \" + pkg);\n","lineNum":64,"childDeclarations":{},"completeNodeValue":"if (pkg.getDiff() !\u003d 0) Assert.fail(\"Package is different: \" + pkg);\n"},{"value":"if (pkg.getDiff() !\u003d 0) Assert.fail(\"Package is different: \" + pkg);\n","lineNum":53,"childDeclarations":{},"completeNodeValue":"if (pkg.getDiff() !\u003d 0) Assert.fail(\"Package is different: \" + pkg);\n"}],"commonChilds":[]}]},{"diff":0,"declarations":[{"isConstructor":false,"returnType":"void","parameters":"List\u003cImport\u003e imports","thrownExceptions":[],"blockofStatements":[],"lineNum":68,"name":"isImportsDifferent","modifiers":[],"childDeclarations":{},"completeNodeValue":"void isImportsDifferent(List\u003cImport\u003e imports){\n  for (  Import imp : imports)   if (imp.getDiff() !\u003d 0)   Assert.fail(\"Imports are different: \" + imp);\n}\n"},{"isConstructor":false,"returnType":"void","parameters":"List\u003cImport\u003e imports","thrownExceptions":[],"blockofStatements":[],"lineNum":66,"name":"isImportsDifferent","modifiers":[],"childDeclarations":{},"completeNodeValue":"void isImportsDifferent(List\u003cImport\u003e imports){\n  for (  Import imp : imports)   if (imp.getDiff() !\u003d 0)   Assert.fail(\"Imports are different: \" + imp);\n}\n"}],"commonChilds":[{"diff":0,"declarations":[{"value":"for (Import imp : imports) if (imp.getDiff() !\u003d 0) Assert.fail(\"Imports are different: \" + imp);\n","lineNum":69,"childDeclarations":{},"completeNodeValue":"for (Import imp : imports) if (imp.getDiff() !\u003d 0) Assert.fail(\"Imports are different: \" + imp);\n"},{"value":"for (Import imp : imports) if (imp.getDiff() !\u003d 0) Assert.fail(\"Imports are different: \" + imp);\n","lineNum":67,"childDeclarations":{},"completeNodeValue":"for (Import imp : imports) if (imp.getDiff() !\u003d 0) Assert.fail(\"Imports are different: \" + imp);\n"}],"commonChilds":[]}]},{"diff":0,"declarations":[{"isConstructor":false,"returnType":"String","parameters":"","thrownExceptions":[],"blockofStatements":[],"lineNum":162,"name":"toString","modifiers":["@Override","public"],"childDeclarations":{},"completeNodeValue":"@Override public String toString(){\n  ToStringBuilder builder\u003dnew ToStringBuilder(this);\n  builder.append(\"value\",value);\n  if (arr !\u003d null)   builder.append(\"arr\",Arrays.toString(arr));\n  return builder.toString();\n}\n"},{"isConstructor":false,"returnType":"String","parameters":"","thrownExceptions":[],"blockofStatements":[],"lineNum":134,"name":"toString","modifiers":["@Override","public"],"childDeclarations":{},"completeNodeValue":"@Override public String toString(){\n  ToStringBuilder builder\u003dnew ToStringBuilder(this);\n  builder.append(\"value\",value);\n  if (arr !\u003d null)   builder.append(\"arr\",Arrays.toString(arr));\n  return builder.toString();\n}\n"}],"commonChilds":[{"diff":0,"declarations":[{"type":"ToStringBuilder","value":"new ToStringBuilder(this)","lineNum":164,"name":"builder","modifiers":[],"childDeclarations":{},"completeNodeValue":"ToStringBuilder builder\u003dnew ToStringBuilder(this);\n"},{"type":"ToStringBuilder","value":"new ToStringBuilder(this)","lineNum":136,"name":"builder","modifiers":[],"childDeclarations":{},"completeNodeValue":"ToStringBuilder builder\u003dnew ToStringBuilder(this);\n"}],"commonChilds":[]},{"diff":0,"declarations":[{"value":"builder.append(\"value\",value);\n","lineNum":165,"childDeclarations":{},"completeNodeValue":"builder.append(\"value\",value);\n"},{"value":"builder.append(\"value\",value);\n","lineNum":137,"childDeclarations":{},"completeNodeValue":"builder.append(\"value\",value);\n"}],"commonChilds":[]},{"diff":0,"declarations":[{"value":"if (arr !\u003d null) builder.append(\"arr\",Arrays.toString(arr));\n","lineNum":166,"childDeclarations":{},"completeNodeValue":"if (arr !\u003d null) builder.append(\"arr\",Arrays.toString(arr));\n"},{"value":"if (arr !\u003d null) builder.append(\"arr\",Arrays.toString(arr));\n","lineNum":138,"childDeclarations":{},"completeNodeValue":"if (arr !\u003d null) builder.append(\"arr\",Arrays.toString(arr));\n"}],"commonChilds":[]},{"diff":0,"declarations":[{"value":"return builder.toString();\n","lineNum":168,"childDeclarations":{},"completeNodeValue":"return builder.toString();\n"},{"value":"return builder.toString();\n","lineNum":140,"childDeclarations":{},"completeNodeValue":"return builder.toString();\n"}],"commonChilds":[]}]},{"diff":1,"declarations":[{"isConstructor":false,"returnType":"void","parameters":"String json","thrownExceptions":["IOException"],"blockofStatements":[{"type":"File","value":"new File(\"C:/Users/vinod/Desktop/dummy.json\")","lineNum":140,"name":"file","modifiers":[],"childDeclarations":{},"completeNodeValue":"File file\u003dnew File(\"C:/Users/vinod/Desktop/dummy.json\");\n"},{"type":"BufferedWriter","value":"null","lineNum":141,"name":"writer","modifiers":[],"childDeclarations":{},"completeNodeValue":"BufferedWriter writer\u003dnull;\n"},{"value":"try {\n  writer\u003dnew BufferedWriter(new FileWriter(file));\n  writer.write(json);\n}\n catch (IOException e) {\n}\n finally {\n  try {\n    if (writer !\u003d null)     writer.close();\n  }\n catch (  IOException e) {\n  }\n}\n","lineNum":142,"childDeclarations":{},"completeNodeValue":"try {\n  writer\u003dnew BufferedWriter(new FileWriter(file));\n  writer.write(json);\n}\n catch (IOException e) {\n}\n finally {\n  try {\n    if (writer !\u003d null)     writer.close();\n  }\n catch (  IOException e) {\n  }\n}\n"}],"lineNum":139,"name":"writeToFile","modifiers":["private","static"],"childDeclarations":{},"completeNodeValue":"private static void writeToFile(String json) throws IOException {\n  File file\u003dnew File(\"C:/Users/vinod/Desktop/dummy.json\");\n  BufferedWriter writer\u003dnull;\n  try {\n    writer\u003dnew BufferedWriter(new FileWriter(file));\n    writer.write(json);\n  }\n catch (  IOException e) {\n  }\n finally {\n    try {\n      if (writer !\u003d null)       writer.close();\n    }\n catch (    IOException e) {\n    }\n  }\n}\n"},null],"commonChilds":[{"diff":1,"declarations":[{"type":"File","value":"new File(\"C:/Users/vinod/Desktop/dummy.json\")","lineNum":140,"name":"file","modifiers":[],"childDeclarations":{},"completeNodeValue":"File file\u003dnew File(\"C:/Users/vinod/Desktop/dummy.json\");\n"},null],"commonChilds":[]},{"diff":1,"declarations":[{"type":"BufferedWriter","value":"null","lineNum":141,"name":"writer","modifiers":[],"childDeclarations":{},"completeNodeValue":"BufferedWriter writer\u003dnull;\n"},null],"commonChilds":[]},{"diff":1,"declarations":[{"value":"try {\n  writer\u003dnew BufferedWriter(new FileWriter(file));\n  writer.write(json);\n}\n catch (IOException e) {\n}\n finally {\n  try {\n    if (writer !\u003d null)     writer.close();\n  }\n catch (  IOException e) {\n  }\n}\n","lineNum":142,"childDeclarations":{},"completeNodeValue":"try {\n  writer\u003dnew BufferedWriter(new FileWriter(file));\n  writer.write(json);\n}\n catch (IOException e) {\n}\n finally {\n  try {\n    if (writer !\u003d null)     writer.close();\n  }\n catch (  IOException e) {\n  }\n}\n"},null],"commonChilds":[]}]},{"diff":0,"declarations":[{"isConstructor":false,"returnType":"void","parameters":"List\u003cType\u003e types","thrownExceptions":[],"blockofStatements":[],"lineNum":83,"name":"isTypesDifferent","modifiers":["private"],"childDeclarations":{},"completeNodeValue":"private void isTypesDifferent(List\u003cType\u003e types){\n  for (  Type type : types)   if (type.getDiff() !\u003d 0)   Assert.fail(\"Imports are different: \" + type);\n}\n"},{"isConstructor":false,"returnType":"void","parameters":"List\u003cType\u003e types","thrownExceptions":[],"blockofStatements":[],"lineNum":81,"name":"isTypesDifferent","modifiers":["private"],"childDeclarations":{},"completeNodeValue":"private void isTypesDifferent(List\u003cType\u003e types){\n  for (  Type type : types)   if (type.getDiff() !\u003d 0)   Assert.fail(\"Imports are different: \" + type);\n}\n"}],"commonChilds":[{"diff":0,"declarations":[{"value":"for (Type type : types) if (type.getDiff() !\u003d 0) Assert.fail(\"Imports are different: \" + type);\n","lineNum":84,"childDeclarations":{},"completeNodeValue":"for (Type type : types) if (type.getDiff() !\u003d 0) Assert.fail(\"Imports are different: \" + type);\n"},{"value":"for (Type type : types) if (type.getDiff() !\u003d 0) Assert.fail(\"Imports are different: \" + type);\n","lineNum":82,"childDeclarations":{},"completeNodeValue":"for (Type type : types) if (type.getDiff() !\u003d 0) Assert.fail(\"Imports are different: \" + type);\n"}],"commonChilds":[]}]},{"diff":0,"declarations":[{"isConstructor":false,"returnType":"void","parameters":"","thrownExceptions":[],"blockofStatements":[],"lineNum":54,"name":"assertImportsEqual","modifiers":["@Test","public","final"],"childDeclarations":{},"completeNodeValue":"@Test public final void assertImportsEqual(){\n  ComparatorImpl comparator\u003dnew ComparatorImpl();\n  ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\");\n  List\u003cImport\u003e imports\u003dresult.getImports();\n  isImportsDifferent(imports);\n}\n"},{"isConstructor":false,"returnType":"void","parameters":"","thrownExceptions":[],"blockofStatements":[],"lineNum":57,"name":"assertImportsEqual","modifiers":["@Test","public","final"],"childDeclarations":{},"completeNodeValue":"@Test public final void assertImportsEqual(){\n  ComparatorImpl comparator\u003dnew ComparatorImpl();\n  ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\");\n  List\u003cImport\u003e imports\u003dresult.getImports();\n  isImportsDifferent(imports);\n}\n"}],"commonChilds":[{"diff":0,"declarations":[{"type":"ComparatorImpl","value":"new ComparatorImpl()","lineNum":56,"name":"comparator","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparatorImpl comparator\u003dnew ComparatorImpl();\n"},{"type":"ComparatorImpl","value":"new ComparatorImpl()","lineNum":59,"name":"comparator","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparatorImpl comparator\u003dnew ComparatorImpl();\n"}],"commonChilds":[]},{"diff":0,"declarations":[{"type":"ComparisonResult","value":"comparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\")","lineNum":57,"name":"result","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\");\n"},{"type":"ComparisonResult","value":"comparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\")","lineNum":60,"name":"result","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\");\n"}],"commonChilds":[]},{"diff":0,"declarations":[{"type":"List\u003cImport\u003e","value":"result.getImports()","lineNum":59,"name":"imports","modifiers":[],"childDeclarations":{},"completeNodeValue":"List\u003cImport\u003e imports\u003dresult.getImports();\n"},{"type":"List\u003cImport\u003e","value":"result.getImports()","lineNum":62,"name":"imports","modifiers":[],"childDeclarations":{},"completeNodeValue":"List\u003cImport\u003e imports\u003dresult.getImports();\n"}],"commonChilds":[]},{"diff":0,"declarations":[{"value":"isImportsDifferent(imports);\n","lineNum":60,"childDeclarations":{},"completeNodeValue":"isImportsDifferent(imports);\n"},{"value":"isImportsDifferent(imports);\n","lineNum":63,"childDeclarations":{},"completeNodeValue":"isImportsDifferent(imports);\n"}],"commonChilds":[]}]},{"diff":0,"declarations":[{"isConstructor":false,"returnType":"void","parameters":"","thrownExceptions":[],"blockofStatements":[],"lineNum":109,"name":"testImports","modifiers":["static"],"childDeclarations":{},"completeNodeValue":"static void testImports(){\n  ComparatorImpl comparator\u003dnew ComparatorImpl();\n  ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\");\n  List\u003cImport\u003e imports\u003dresult.getImports();\n  for (  Import imp : imports) {\n    System.out.println(imp);\n  }\n}\n"},{"isConstructor":false,"returnType":"void","parameters":"","thrownExceptions":[],"blockofStatements":[],"lineNum":107,"name":"testImports","modifiers":["static"],"childDeclarations":{},"completeNodeValue":"static void testImports(){\n  ComparatorImpl comparator\u003dnew ComparatorImpl();\n  ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\");\n  List\u003cImport\u003e imports\u003dresult.getImports();\n  for (  Import imp : imports) {\n    System.out.println(imp);\n  }\n}\n"}],"commonChilds":[{"diff":0,"declarations":[{"type":"ComparatorImpl","value":"new ComparatorImpl()","lineNum":110,"name":"comparator","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparatorImpl comparator\u003dnew ComparatorImpl();\n"},{"type":"ComparatorImpl","value":"new ComparatorImpl()","lineNum":108,"name":"comparator","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparatorImpl comparator\u003dnew ComparatorImpl();\n"}],"commonChilds":[]},{"diff":0,"declarations":[{"type":"ComparisonResult","value":"comparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\")","lineNum":111,"name":"result","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\");\n"},{"type":"ComparisonResult","value":"comparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\")","lineNum":109,"name":"result","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\");\n"}],"commonChilds":[]},{"diff":0,"declarations":[{"type":"List\u003cImport\u003e","value":"result.getImports()","lineNum":113,"name":"imports","modifiers":[],"childDeclarations":{},"completeNodeValue":"List\u003cImport\u003e imports\u003dresult.getImports();\n"},{"type":"List\u003cImport\u003e","value":"result.getImports()","lineNum":111,"name":"imports","modifiers":[],"childDeclarations":{},"completeNodeValue":"List\u003cImport\u003e imports\u003dresult.getImports();\n"}],"commonChilds":[]},{"diff":0,"declarations":[{"value":"for (Import imp : imports) {\n  System.out.println(imp);\n}\n","lineNum":114,"childDeclarations":{},"completeNodeValue":"for (Import imp : imports) {\n  System.out.println(imp);\n}\n"},{"value":"for (Import imp : imports) {\n  System.out.println(imp);\n}\n","lineNum":112,"childDeclarations":{},"completeNodeValue":"for (Import imp : imports) {\n  System.out.println(imp);\n}\n"}],"commonChilds":[]}]},{"diff":0,"declarations":[{"isConstructor":false,"returnType":"void","parameters":"","thrownExceptions":[],"blockofStatements":[],"lineNum":74,"name":"assertTypesEqual","modifiers":["@Test","public","final"],"childDeclarations":{},"completeNodeValue":"@Test public final void assertTypesEqual(){\n  ComparatorImpl comparator\u003dnew ComparatorImpl();\n  ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\");\n  List\u003cType\u003e types\u003dresult.getTypes();\n  isTypesDifferent(types);\n}\n"},{"isConstructor":false,"returnType":"void","parameters":"","thrownExceptions":[],"blockofStatements":[],"lineNum":72,"name":"assertTypesEqual","modifiers":["@Test","public","final"],"childDeclarations":{},"completeNodeValue":"@Test public final void assertTypesEqual(){\n  ComparatorImpl comparator\u003dnew ComparatorImpl();\n  ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\");\n  List\u003cType\u003e types\u003dresult.getTypes();\n  isTypesDifferent(types);\n}\n"}],"commonChilds":[{"diff":0,"declarations":[{"type":"ComparatorImpl","value":"new ComparatorImpl()","lineNum":76,"name":"comparator","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparatorImpl comparator\u003dnew ComparatorImpl();\n"},{"type":"ComparatorImpl","value":"new ComparatorImpl()","lineNum":74,"name":"comparator","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparatorImpl comparator\u003dnew ComparatorImpl();\n"}],"commonChilds":[]},{"diff":0,"declarations":[{"type":"ComparisonResult","value":"comparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\")","lineNum":77,"name":"result","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\");\n"},{"type":"ComparisonResult","value":"comparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\")","lineNum":75,"name":"result","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\");\n"}],"commonChilds":[]},{"diff":0,"declarations":[{"type":"List\u003cType\u003e","value":"result.getTypes()","lineNum":79,"name":"types","modifiers":[],"childDeclarations":{},"completeNodeValue":"List\u003cType\u003e types\u003dresult.getTypes();\n"},{"type":"List\u003cType\u003e","value":"result.getTypes()","lineNum":77,"name":"types","modifiers":[],"childDeclarations":{},"completeNodeValue":"List\u003cType\u003e types\u003dresult.getTypes();\n"}],"commonChilds":[]},{"diff":0,"declarations":[{"value":"isTypesDifferent(types);\n","lineNum":80,"childDeclarations":{},"completeNodeValue":"isTypesDifferent(types);\n"},{"value":"isTypesDifferent(types);\n","lineNum":78,"childDeclarations":{},"completeNodeValue":"isTypesDifferent(types);\n"}],"commonChilds":[]}]},{"diff":0,"declarations":[{"isConstructor":false,"returnType":"void","parameters":"","thrownExceptions":[],"blockofStatements":[],"lineNum":99,"name":"testTypes","modifiers":["static"],"childDeclarations":{},"completeNodeValue":"static void testTypes(){\n  ComparatorImpl comparator\u003dnew ComparatorImpl();\n  ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/resources/TestJavaFiles/Testing.java.txt\");\n  List\u003cType\u003e types\u003dresult.getTypes();\n  for (  Type type : types) {\n    System.out.println(type);\n  }\n}\n"},{"isConstructor":false,"returnType":"void","parameters":"","thrownExceptions":[],"blockofStatements":[],"lineNum":97,"name":"testTypes","modifiers":["static"],"childDeclarations":{},"completeNodeValue":"static void testTypes(){\n  ComparatorImpl comparator\u003dnew ComparatorImpl();\n  ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/resources/TestJavaFiles/Testing.java.txt\");\n  List\u003cType\u003e types\u003dresult.getTypes();\n  for (  Type type : types) {\n    System.out.println(type);\n  }\n}\n"}],"commonChilds":[{"diff":0,"declarations":[{"type":"ComparatorImpl","value":"new ComparatorImpl()","lineNum":100,"name":"comparator","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparatorImpl comparator\u003dnew ComparatorImpl();\n"},{"type":"ComparatorImpl","value":"new ComparatorImpl()","lineNum":98,"name":"comparator","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparatorImpl comparator\u003dnew ComparatorImpl();\n"}],"commonChilds":[]},{"diff":0,"declarations":[{"type":"ComparisonResult","value":"comparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/resources/TestJavaFiles/Testing.java.txt\")","lineNum":101,"name":"result","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/resources/TestJavaFiles/Testing.java.txt\");\n"},{"type":"ComparisonResult","value":"comparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/resources/TestJavaFiles/Testing.java.txt\")","lineNum":99,"name":"result","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/resources/TestJavaFiles/Testing.java.txt\");\n"}],"commonChilds":[]},{"diff":0,"declarations":[{"type":"List\u003cType\u003e","value":"result.getTypes()","lineNum":103,"name":"types","modifiers":[],"childDeclarations":{},"completeNodeValue":"List\u003cType\u003e types\u003dresult.getTypes();\n"},{"type":"List\u003cType\u003e","value":"result.getTypes()","lineNum":101,"name":"types","modifiers":[],"childDeclarations":{},"completeNodeValue":"List\u003cType\u003e types\u003dresult.getTypes();\n"}],"commonChilds":[]},{"diff":0,"declarations":[{"value":"for (Type type : types) {\n  System.out.println(type);\n}\n","lineNum":104,"childDeclarations":{},"completeNodeValue":"for (Type type : types) {\n  System.out.println(type);\n}\n"},{"value":"for (Type type : types) {\n  System.out.println(type);\n}\n","lineNum":102,"childDeclarations":{},"completeNodeValue":"for (Type type : types) {\n  System.out.println(type);\n}\n"}],"commonChilds":[]}]},{"diff":0,"declarations":[{"type":"int","value":"0","lineNum":41,"name":"value","modifiers":[],"childDeclarations":{},"completeNodeValue":"int value\u003d0;\n"},{"type":"int","value":"0","lineNum":39,"name":"value","modifiers":[],"childDeclarations":{},"completeNodeValue":"int value\u003d0;\n"}],"commonChilds":[]},{"diff":0,"declarations":[{"isInterface":false,"superClass":"","superInterfacelist":[],"bodyDeclarations":[],"lineNum":155,"name":"mnop","modifiers":[],"childDeclarations":{},"completeNodeValue":"class mnop {\nclass bvd {\n    void temp(){\n    }\n  }\n}\n"},{"isInterface":false,"superClass":"","superInterfacelist":[],"bodyDeclarations":[],"lineNum":127,"name":"mnop","modifiers":[],"childDeclarations":{},"completeNodeValue":"class mnop {\nclass bvd {\n    void temp(){\n    }\n  }\n}\n"}],"commonChilds":[{"diff":0,"declarations":[{"isInterface":false,"superClass":"","superInterfacelist":[],"bodyDeclarations":[],"lineNum":156,"name":"bvd","modifiers":[],"childDeclarations":{},"completeNodeValue":"class bvd {\n  void temp(){\n  }\n}\n"},{"isInterface":false,"superClass":"","superInterfacelist":[],"bodyDeclarations":[],"lineNum":128,"name":"bvd","modifiers":[],"childDeclarations":{},"completeNodeValue":"class bvd {\n  void temp(){\n  }\n}\n"}],"commonChilds":[{"diff":0,"declarations":[{"isConstructor":false,"returnType":"void","parameters":"","thrownExceptions":[],"blockofStatements":[],"lineNum":157,"name":"temp","modifiers":[],"childDeclarations":{},"completeNodeValue":"void temp(){\n}\n"},{"isConstructor":false,"returnType":"void","parameters":"","thrownExceptions":[],"blockofStatements":[],"lineNum":129,"name":"temp","modifiers":[],"childDeclarations":{},"completeNodeValue":"void temp(){\n}\n"}],"commonChilds":[]}]}]},{"diff":0,"declarations":[{"isConstructor":false,"returnType":"void","parameters":"","thrownExceptions":[],"blockofStatements":[],"lineNum":44,"name":"assertPackageEqual","modifiers":["@Test","public","final"],"childDeclarations":{},"completeNodeValue":"@Test public final void assertPackageEqual(){\n  ComparatorImpl comparator\u003dnew ComparatorImpl();\n  ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\");\n  com.imaginea.structuralComaparator.domain.Package pkg\u003dresult.getPkg();\n  isPackageDifferent(pkg);\n}\n"},{"isConstructor":false,"returnType":"void","parameters":"","thrownExceptions":[],"blockofStatements":[],"lineNum":42,"name":"assertPackageEqual","modifiers":["@Test","public","final"],"childDeclarations":{},"completeNodeValue":"@Test public final void assertPackageEqual(){\n  ComparatorImpl comparator\u003dnew ComparatorImpl();\n  ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\");\n  com.imaginea.structuralComaparator.domain.Package pkg\u003dresult.getPkg();\n  isPackageDifferent(pkg);\n}\n"}],"commonChilds":[{"diff":0,"declarations":[{"type":"ComparatorImpl","value":"new ComparatorImpl()","lineNum":46,"name":"comparator","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparatorImpl comparator\u003dnew ComparatorImpl();\n"},{"type":"ComparatorImpl","value":"new ComparatorImpl()","lineNum":44,"name":"comparator","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparatorImpl comparator\u003dnew ComparatorImpl();\n"}],"commonChilds":[]},{"diff":0,"declarations":[{"type":"ComparisonResult","value":"comparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\")","lineNum":47,"name":"result","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\");\n"},{"type":"ComparisonResult","value":"comparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\")","lineNum":45,"name":"result","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\");\n"}],"commonChilds":[]},{"diff":0,"declarations":[{"type":"com.imaginea.structuralComaparator.domain.Package","value":"result.getPkg()","lineNum":49,"name":"pkg","modifiers":[],"childDeclarations":{},"completeNodeValue":"com.imaginea.structuralComaparator.domain.Package pkg\u003dresult.getPkg();\n"},{"type":"com.imaginea.structuralComaparator.domain.Package","value":"result.getPkg()","lineNum":47,"name":"pkg","modifiers":[],"childDeclarations":{},"completeNodeValue":"com.imaginea.structuralComaparator.domain.Package pkg\u003dresult.getPkg();\n"}],"commonChilds":[]},{"diff":0,"declarations":[{"value":"isPackageDifferent(pkg);\n","lineNum":50,"childDeclarations":{},"completeNodeValue":"isPackageDifferent(pkg);\n"},{"value":"isPackageDifferent(pkg);\n","lineNum":48,"childDeclarations":{},"completeNodeValue":"isPackageDifferent(pkg);\n"}],"commonChilds":[]}]}]}]}
