{"pkg":{"diff":0,"lines":[{"lineNum":1,"value":"package com.imaginea.structuralComaparator.test;\n"},{"lineNum":1,"value":"package com.imaginea.structuralComaparator.test;\n"}]},"imports":[{"diff":0,"lines":[{"isStatic":false,"lineNum":4,"value":"java.io.File"},{"isStatic":false,"lineNum":3,"value":"java.io.File"}]},{"diff":-1,"lines":[null,{"isStatic":false,"lineNum":4,"value":"java.io.FileNotFoundException"}]},{"diff":0,"lines":[{"isStatic":false,"lineNum":8,"value":"java.util.List"},{"isStatic":false,"lineNum":5,"value":"java.util.List"}]},{"diff":-1,"lines":[null,{"isStatic":false,"lineNum":6,"value":"java.util.Map"}]},{"diff":-1,"lines":[null,{"isStatic":false,"lineNum":7,"value":"java.util.Scanner"}]},{"diff":-1,"lines":[null,{"isStatic":false,"lineNum":8,"value":"java.util.Set"}]},{"diff":-1,"lines":[null,{"isStatic":false,"lineNum":10,"value":"org.eclipse.jdt.core.JavaCore"}]},{"diff":-1,"lines":[null,{"isStatic":false,"lineNum":11,"value":"org.eclipse.jdt.core.dom.AST"}]},{"diff":-1,"lines":[null,{"isStatic":false,"lineNum":12,"value":"org.eclipse.jdt.core.dom.ASTParser"}]},{"diff":-1,"lines":[null,{"isStatic":false,"lineNum":13,"value":"org.eclipse.jdt.core.dom.AbstractTypeDeclaration"}]},{"diff":-1,"lines":[null,{"isStatic":false,"lineNum":14,"value":"org.eclipse.jdt.core.dom.BlockComment"}]},{"diff":-1,"lines":[null,{"isStatic":false,"lineNum":15,"value":"org.eclipse.jdt.core.dom.BodyDeclaration"}]},{"diff":-1,"lines":[null,{"isStatic":false,"lineNum":16,"value":"org.eclipse.jdt.core.dom.ChildListPropertyDescriptor"}]},{"diff":-1,"lines":[null,{"isStatic":false,"lineNum":17,"value":"org.eclipse.jdt.core.dom.ChildPropertyDescriptor"}]},{"diff":-1,"lines":[null,{"isStatic":false,"lineNum":18,"value":"org.eclipse.jdt.core.dom.CompilationUnit"}]},{"diff":-1,"lines":[null,{"isStatic":false,"lineNum":19,"value":"org.eclipse.jdt.core.dom.EnumConstantDeclaration"}]},{"diff":-1,"lines":[null,{"isStatic":false,"lineNum":20,"value":"org.eclipse.jdt.core.dom.EnumDeclaration"}]},{"diff":-1,"lines":[null,{"isStatic":false,"lineNum":21,"value":"org.eclipse.jdt.core.dom.FieldDeclaration"}]},{"diff":-1,"lines":[null,{"isStatic":false,"lineNum":22,"value":"org.eclipse.jdt.core.dom.ImportDeclaration"}]},{"diff":-1,"lines":[null,{"isStatic":false,"lineNum":23,"value":"org.eclipse.jdt.core.dom.Message"}]},{"diff":-1,"lines":[null,{"isStatic":false,"lineNum":24,"value":"org.eclipse.jdt.core.dom.MethodDeclaration"}]},{"diff":-1,"lines":[null,{"isStatic":false,"lineNum":25,"value":"org.eclipse.jdt.core.dom.Modifier"}]},{"diff":-1,"lines":[null,{"isStatic":false,"lineNum":26,"value":"org.eclipse.jdt.core.dom.Name"}]},{"diff":-1,"lines":[null,{"isStatic":false,"lineNum":27,"value":"org.eclipse.jdt.core.dom.QualifiedName"}]},{"diff":-1,"lines":[null,{"isStatic":false,"lineNum":28,"value":"org.eclipse.jdt.core.dom.SimpleName"}]},{"diff":-1,"lines":[null,{"isStatic":false,"lineNum":29,"value":"org.eclipse.jdt.core.dom.SimpleType"}]},{"diff":-1,"lines":[null,{"isStatic":false,"lineNum":30,"value":"org.eclipse.jdt.core.dom.SingleVariableDeclaration"}]},{"diff":-1,"lines":[null,{"isStatic":false,"lineNum":31,"value":"org.eclipse.jdt.core.dom.Statement"}]},{"diff":-1,"lines":[null,{"isStatic":false,"lineNum":32,"value":"org.eclipse.jdt.core.dom.Type"}]},{"diff":-1,"lines":[null,{"isStatic":false,"lineNum":33,"value":"org.eclipse.jdt.core.dom.TypeDeclaration"}]},{"diff":-1,"lines":[null,{"isStatic":false,"lineNum":34,"value":"org.eclipse.jdt.core.dom.VariableDeclarationFragment"}]},{"diff":1,"lines":[{"isStatic":false,"lineNum":14,"value":"org.junit.Assert"},null]},{"diff":1,"lines":[{"isStatic":false,"lineNum":3,"value":"java.io.BufferedWriter"},null]},{"diff":1,"lines":[{"isStatic":false,"lineNum":19,"value":"com.imaginea.structuralComaparator.domain.ComparisonResult"},null]},{"diff":1,"lines":[{"isStatic":false,"lineNum":17,"value":"com.google.gson.Gson"},null]},{"diff":1,"lines":[{"isStatic":false,"lineNum":24,"value":"com.imaginea.structuralComaparator.domain.node.EnumTypeDeclarationNode"},null]},{"diff":1,"lines":[{"isStatic":false,"lineNum":6,"value":"java.io.IOException"},null]},{"diff":1,"lines":[{"isStatic":false,"lineNum":12,"value":"org.codehaus.jackson.map.JsonMappingException"},null]},{"diff":1,"lines":[{"isStatic":false,"lineNum":15,"value":"org.junit.Test"},null]},{"diff":1,"lines":[{"isStatic":false,"lineNum":20,"value":"com.imaginea.structuralComaparator.domain.Import"},null]},{"diff":1,"lines":[{"isStatic":false,"lineNum":10,"value":"org.apache.commons.lang3.builder.ToStringBuilder"},null]},{"diff":1,"lines":[{"isStatic":false,"lineNum":22,"value":"com.imaginea.structuralComaparator.domain.Type"},null]},{"diff":1,"lines":[{"isStatic":false,"lineNum":25,"value":"com.imaginea.structuralComaparator.repo.ComparatorImpl"},null]},{"diff":1,"lines":[{"isStatic":false,"lineNum":11,"value":"org.codehaus.jackson.JsonGenerationException"},null]},{"diff":1,"lines":[{"isStatic":false,"lineNum":13,"value":"org.codehaus.jackson.map.ObjectMapper"},null]},{"diff":1,"lines":[{"isStatic":false,"lineNum":23,"value":"com.imaginea.structuralComaparator.domain.node.DeclarationNode"},null]},{"diff":1,"lines":[{"isStatic":false,"lineNum":7,"value":"java.util.Arrays"},null]},{"diff":1,"lines":[{"isStatic":false,"lineNum":21,"value":"com.imaginea.structuralComaparator.domain.Package"},null]},{"diff":1,"lines":[{"isStatic":false,"lineNum":5,"value":"java.io.FileWriter"},null]},{"diff":1,"lines":[{"isStatic":false,"lineNum":18,"value":"com.google.gson.GsonBuilder"},null]}],"types":[{"diff":-1,"declarations":[null,{"isInterface":false,"superClass":"","superInterfacelist":["a","b"],"bodyDeclarations":[],"lineNum":36,"name":"JDTTester","modifiers":["public"],"childDeclarations":{"main_Method":{"isConstructor":false,"returnType":"void","parameters":"String[] args","thrownExceptions":["FileNotFoundException"],"blockofStatements":[{"type":"int","value":"0","lineNum":49,"name":"i","modifiers":[],"childDeclarations":{},"completeNodeValue":"int i\u003d0;\n"},{"value":";\n","lineNum":49,"childDeclarations":{},"completeNodeValue":";\n"},{"type":"String","value":"\"class Bob {/*asas*/}/**asd*/\\n\" + \"apple\" + \"dummy\" + i + \"uska mummy\"","lineNum":50,"name":"sourceed","modifiers":[],"childDeclarations":{},"completeNodeValue":"String sourceed\u003d\"class Bob {/*asas*/}/**asd*/\\n\" + \"apple\" + \"dummy\" + i + \"uska mummy\";\n"},{"type":"String","value":"\"class Bob {/*asas*/}/**asd*/\\n\"","lineNum":51,"name":"sourcee","modifiers":[],"childDeclarations":{},"completeNodeValue":"String sourcee\u003d\"class Bob {/*asas*/}/**asd*/\\n\";\n"},{"type":"String","value":"\"class Bob {/*asas*/}/**asd*/\"","lineNum":52,"name":"source","modifiers":[],"childDeclarations":{},"completeNodeValue":"String source\u003d\"class Bob {/*asas*/}/**asd*/\";\n"},{"type":"ASTParser","value":"ASTParser.newParser(AST.JLS3)","lineNum":54,"name":"parser","modifiers":[],"childDeclarations":{},"completeNodeValue":"ASTParser parser\u003dASTParser.newParser(AST.JLS3);\n"},{"isInterface":false,"superClass":"","superInterfacelist":[],"bodyDeclarations":[],"lineNum":55,"name":"z","modifiers":[],"childDeclarations":{},"completeNodeValue":"class z {\n}\n"},{"value":"parser.setSource(sourceed.toCharArray());\n","lineNum":57,"childDeclarations":{},"completeNodeValue":"parser.setSource(sourceed.toCharArray());\n"},{"type":"CompilationUnit","value":"(CompilationUnit)parser.createAST(null)","lineNum":58,"name":"result","modifiers":[],"childDeclarations":{},"completeNodeValue":"CompilationUnit result\u003d(CompilationUnit)parser.createAST(null);\n"},{"type":"String","value":"\"class Bob {public void MyMethod(){}}\"","lineNum":65,"name":"source2","modifiers":[],"childDeclarations":{},"completeNodeValue":"String source2\u003d\"class Bob {public void MyMethod(){}}\";\n"},{"type":"ASTParser","value":"ASTParser.newParser(AST.JLS3)","lineNum":66,"name":"parser2","modifiers":[],"childDeclarations":{},"completeNodeValue":"ASTParser parser2\u003dASTParser.newParser(AST.JLS3);\n"},{"value":"parser2.setSource(source2.toCharArray());\n","lineNum":67,"childDeclarations":{},"completeNodeValue":"parser2.setSource(source2.toCharArray());\n"},{"type":"CompilationUnit","value":"(CompilationUnit)parser2.createAST(null)","lineNum":68,"name":"result2","modifiers":[],"childDeclarations":{},"completeNodeValue":"CompilationUnit result2\u003d(CompilationUnit)parser2.createAST(null);\n"},{"value":"just();\n","lineNum":73,"childDeclarations":{},"completeNodeValue":"just();\n"}],"lineNum":47,"name":"main","modifiers":["@SuppressWarnings(\"unchecked\")","public","static"],"childDeclarations":{},"completeNodeValue":"@SuppressWarnings(\"unchecked\") public static void main(String[] args) throws FileNotFoundException {\n  int i\u003d0;\n  ;\n  String sourceed\u003d\"class Bob {/*asas*/}/**asd*/\\n\" + \"apple\" + \"dummy\" + i + \"uska mummy\";\n  String sourcee\u003d\"class Bob {/*asas*/}/**asd*/\\n\";\n  String source\u003d\"class Bob {/*asas*/}/**asd*/\";\n  ASTParser parser\u003dASTParser.newParser(AST.JLS3);\nclass z {\n  }\n  parser.setSource(sourceed.toCharArray());\n  CompilationUnit result\u003d(CompilationUnit)parser.createAST(null);\n  String source2\u003d\"class Bob {public void MyMethod(){}}\";\n  ASTParser parser2\u003dASTParser.newParser(AST.JLS3);\n  parser2.setSource(source2.toCharArray());\n  CompilationUnit result2\u003d(CompilationUnit)parser2.createAST(null);\n  just();\n}\n"},"anm_Enum":{"enumConstants":["apple"],"superInterfacelist":[],"bodyDeclarations":[],"lineNum":76,"name":"anm","modifiers":[],"childDeclarations":{},"completeNodeValue":"enum anm {apple}\n"},"anm2_Enum":{"enumConstants":["apple"],"superInterfacelist":[],"bodyDeclarations":[],"lineNum":80,"name":"anm2","modifiers":[],"childDeclarations":{},"completeNodeValue":"enum anm2 {apple}\n"},"aaaa":{"type":"int[]","value":"{10,10}","lineNum":39,"name":"aaaa","modifiers":[],"childDeclarations":{},"completeNodeValue":"int[] aaaa\u003d{10,10};\n"},"just_Method":{"isConstructor":false,"returnType":"void","parameters":"","thrownExceptions":["FileNotFoundException"],"blockofStatements":[{"type":"ASTParser","value":"ASTParser.newParser(AST.JLS3)","lineNum":93,"name":"parser","modifiers":[],"childDeclarations":{},"completeNodeValue":"ASTParser parser\u003dASTParser.newParser(AST.JLS3);\n"},{"isInterface":false,"superClass":"","superInterfacelist":[],"bodyDeclarations":[],"lineNum":95,"name":"met","modifiers":[],"childDeclarations":{"tert_Method":{"isConstructor":false,"returnType":"void","parameters":"","thrownExceptions":[],"blockofStatements":[{"value":"System.out.println();\n","lineNum":97,"childDeclarations":{},"completeNodeValue":"System.out.println();\n"}],"lineNum":96,"name":"tert","modifiers":[],"childDeclarations":{},"completeNodeValue":"void tert(){\n  System.out.println();\n}\n"}},"completeNodeValue":"class met {\n  void tert(){\n    System.out.println();\n  }\n}\n"},{"type":"String","value":"\"\"","lineNum":101,"name":"theString","modifiers":[],"childDeclarations":{},"completeNodeValue":"String theString\u003d\"\";\n"},{"type":"File","value":"new File(\"F:\\\\Workspace\\\\StructuralComparatorWeb\\\\src\\\\main\\\\java\\\\com\\\\imaginea\\\\assessor1\\\\JDTTester.java\")","lineNum":102,"name":"file","modifiers":[],"childDeclarations":{},"completeNodeValue":"File file\u003dnew File(\"F:\\\\Workspace\\\\StructuralComparatorWeb\\\\src\\\\main\\\\java\\\\com\\\\imaginea\\\\assessor1\\\\JDTTester.java\");\n"},{"type":"Scanner","value":"new Scanner(file)","lineNum":103,"name":"scanner","modifiers":[],"childDeclarations":{},"completeNodeValue":"Scanner scanner\u003dnew Scanner(file);\n"},{"value":"theString\u003dscanner.nextLine();\n","lineNum":104,"childDeclarations":{},"completeNodeValue":"theString\u003dscanner.nextLine();\n"},{"value":"while (scanner.hasNextLine()) theString\u003dtheString + \"\\n\" + scanner.nextLine();\n","lineNum":105,"childDeclarations":{},"completeNodeValue":"while (scanner.hasNextLine()) theString\u003dtheString + \"\\n\" + scanner.nextLine();\n"},{"type":"char[]","value":"theString.toCharArray()","lineNum":107,"name":"charArray","modifiers":[],"childDeclarations":{},"completeNodeValue":"char[] charArray\u003dtheString.toCharArray();\n"},{"value":"parser.setSource(charArray);\n","lineNum":109,"childDeclarations":{},"completeNodeValue":"parser.setSource(charArray);\n"},{"type":"Map","value":"JavaCore.getOptions()","lineNum":111,"name":"options","modifiers":[],"childDeclarations":{},"completeNodeValue":"Map options\u003dJavaCore.getOptions();\n"},{"value":"JavaCore.setComplianceOptions(JavaCore.VERSION_1_7,options);\n","lineNum":112,"childDeclarations":{},"completeNodeValue":"JavaCore.setComplianceOptions(JavaCore.VERSION_1_7,options);\n"},{"value":"parser.setCompilerOptions(options);\n","lineNum":113,"childDeclarations":{},"completeNodeValue":"parser.setCompilerOptions(options);\n"},{"type":"CompilationUnit","value":"(CompilationUnit)parser.createAST(null)","lineNum":115,"name":"result","modifiers":[],"childDeclarations":{},"completeNodeValue":"CompilationUnit result\u003d(CompilationUnit)parser.createAST(null);\n"},{"type":"Map","value":"result.properties()","lineNum":116,"name":"m","modifiers":[],"childDeclarations":{},"completeNodeValue":"Map m\u003dresult.properties();\n"},{"type":"Set","value":"m.keySet()","lineNum":117,"name":"s","modifiers":[],"childDeclarations":{},"completeNodeValue":"Set s\u003dm.keySet();\n"},{"value":"System.out.println(result + \"\\n\\n\\n\\n\\n\\n\\n----------------------\");\n","lineNum":119,"childDeclarations":{},"completeNodeValue":"System.out.println(result + \"\\n\\n\\n\\n\\n\\n\\n----------------------\");\n"},{"value":"for (Object ob : s) System.out.println(\"@@@\" + s.getClass());\n","lineNum":120,"childDeclarations":{},"completeNodeValue":"for (Object ob : s) System.out.println(\"@@@\" + s.getClass());\n"},{"value":"System.out.println(\"####### \" + result.getPackage().getName());\n","lineNum":122,"childDeclarations":{},"completeNodeValue":"System.out.println(\"####### \" + result.getPackage().getName());\n"},{"value":"System.out.println(result.imports().size());\n","lineNum":123,"childDeclarations":{},"completeNodeValue":"System.out.println(result.imports().size());\n"},{"value":"System.out.println(\"////####### \" + ((ImportDeclaration)result.imports().get(0)).getName());\n","lineNum":124,"childDeclarations":{},"completeNodeValue":"System.out.println(\"////####### \" + ((ImportDeclaration)result.imports().get(0)).getName());\n"},{"value":"System.out.println(\"////####### \" + ((ImportDeclaration)result.imports().get(1)).getName());\n","lineNum":125,"childDeclarations":{},"completeNodeValue":"System.out.println(\"////####### \" + ((ImportDeclaration)result.imports().get(1)).getName());\n"},{"value":"System.out.println(\"////####### \" + ((ImportDeclaration)result.imports().get(2)).getName());\n","lineNum":126,"childDeclarations":{},"completeNodeValue":"System.out.println(\"////####### \" + ((ImportDeclaration)result.imports().get(2)).getName());\n"},{"type":"ImportDeclaration","value":"(ImportDeclaration)result.imports().get(0)","lineNum":128,"name":"id","modifiers":[],"childDeclarations":{},"completeNodeValue":"ImportDeclaration id\u003d(ImportDeclaration)result.imports().get(0);\n"},{"value":"System.out.println(id.getStartPosition());\n","lineNum":129,"childDeclarations":{},"completeNodeValue":"System.out.println(id.getStartPosition());\n"},{"value":"System.out.println(result.getLineNumber(id.getStartPosition()));\n","lineNum":130,"childDeclarations":{},"completeNodeValue":"System.out.println(result.getLineNumber(id.getStartPosition()));\n"},{"value":"System.out.println(result.getPosition(result.getLineNumber(id.getStartPosition()),5));\n","lineNum":131,"childDeclarations":{},"completeNodeValue":"System.out.println(result.getPosition(result.getLineNumber(id.getStartPosition()),5));\n"},{"value":"System.out.println(result.properties().size());\n","lineNum":133,"childDeclarations":{},"completeNodeValue":"System.out.println(result.properties().size());\n"},{"value":"System.out.println(((ChildPropertyDescriptor)result.structuralPropertiesForType().get(0)).getId());\n","lineNum":134,"childDeclarations":{},"completeNodeValue":"System.out.println(((ChildPropertyDescriptor)result.structuralPropertiesForType().get(0)).getId());\n"},{"value":"System.out.println(((ChildListPropertyDescriptor)result.structuralPropertiesForType().get(2)).getId());\n","lineNum":135,"childDeclarations":{},"completeNodeValue":"System.out.println(((ChildListPropertyDescriptor)result.structuralPropertiesForType().get(2)).getId());\n"},{"value":"System.out.println(((ChildListPropertyDescriptor)result.structuralPropertiesForType().get(1)).getId());\n","lineNum":136,"childDeclarations":{},"completeNodeValue":"System.out.println(((ChildListPropertyDescriptor)result.structuralPropertiesForType().get(1)).getId());\n"},{"value":"System.out.println(result.structuralPropertiesForType().size());\n","lineNum":137,"childDeclarations":{},"completeNodeValue":"System.out.println(result.structuralPropertiesForType().size());\n"},{"value":"for (int i\u003d0; i \u003c result.getMessages().length; i++) System.out.println(((Message)result.getMessages()[i]).getMessage());\n","lineNum":138,"childDeclarations":{},"completeNodeValue":"for (int i\u003d0; i \u003c result.getMessages().length; i++) System.out.println(((Message)result.getMessages()[i]).getMessage());\n"},{"value":"System.out.println(result.types().size());\n","lineNum":140,"childDeclarations":{},"completeNodeValue":"System.out.println(result.types().size());\n"},{"value":"System.out.println(\"####### \" + result.types().get(0).getClass());\n","lineNum":141,"childDeclarations":{},"completeNodeValue":"System.out.println(\"####### \" + result.types().get(0).getClass());\n"},{"value":"System.out.println(\"------------------------------------\");\n","lineNum":147,"childDeclarations":{},"completeNodeValue":"System.out.println(\"------------------------------------\");\n"},{"value":"for (int i\u003d0; i \u003c result.types().size(); i++) {\n  if (result.types().get(i).getClass() \u003d\u003d org.eclipse.jdt.core.dom.TypeDeclaration.class) {\n    System.out.println(\"10\\t\" + ((TypeDeclaration)result.types().get(i)).getName());\n    List lst\u003d((TypeDeclaration)result.types().get(i)).bodyDeclarations();\n    for (    Object map : lst) {\n      if (map !\u003d null) {\n        System.out.println(\"***\" + map.getClass());\n        if (map.getClass() \u003d\u003d FieldDeclaration.class) {\n          System.out.println(((FieldDeclaration)map).toString());\n          System.out.println(((FieldDeclaration)map).getType());\n          System.out.println(((FieldDeclaration)map).fragments().size());\n          System.out.println(((VariableDeclarationFragment)((FieldDeclaration)map).fragments().get(0)).getName());\n          System.out.println(((VariableDeclarationFragment)((FieldDeclaration)map).fragments().get(0)).getInitializer());\n        }\n      }\n    }\n  }\n else   if (result.types().get(i).getClass() \u003d\u003d org.eclipse.jdt.core.dom.EnumDeclaration.class)   System.out.println(((org.eclipse.jdt.core.dom.EnumDeclaration)result.types().get(i)).getName());\n}\n","lineNum":148,"childDeclarations":{},"completeNodeValue":"for (int i\u003d0; i \u003c result.types().size(); i++) {\n  if (result.types().get(i).getClass() \u003d\u003d org.eclipse.jdt.core.dom.TypeDeclaration.class) {\n    System.out.println(\"10\\t\" + ((TypeDeclaration)result.types().get(i)).getName());\n    List lst\u003d((TypeDeclaration)result.types().get(i)).bodyDeclarations();\n    for (    Object map : lst) {\n      if (map !\u003d null) {\n        System.out.println(\"***\" + map.getClass());\n        if (map.getClass() \u003d\u003d FieldDeclaration.class) {\n          System.out.println(((FieldDeclaration)map).toString());\n          System.out.println(((FieldDeclaration)map).getType());\n          System.out.println(((FieldDeclaration)map).fragments().size());\n          System.out.println(((VariableDeclarationFragment)((FieldDeclaration)map).fragments().get(0)).getName());\n          System.out.println(((VariableDeclarationFragment)((FieldDeclaration)map).fragments().get(0)).getInitializer());\n        }\n      }\n    }\n  }\n else   if (result.types().get(i).getClass() \u003d\u003d org.eclipse.jdt.core.dom.EnumDeclaration.class)   System.out.println(((org.eclipse.jdt.core.dom.EnumDeclaration)result.types().get(i)).getName());\n}\n"},{"value":"System.out.println(((EnumConstantDeclaration)((EnumDeclaration)result.types().get(1)).enumConstants().get(0)).getName());\n","lineNum":170,"childDeclarations":{},"completeNodeValue":"System.out.println(((EnumConstantDeclaration)((EnumDeclaration)result.types().get(1)).enumConstants().get(0)).getName());\n"},{"value":"System.out.println(((EnumConstantDeclaration)((EnumDeclaration)result.types().get(1)).enumConstants().get(0)).toString());\n","lineNum":171,"childDeclarations":{},"completeNodeValue":"System.out.println(((EnumConstantDeclaration)((EnumDeclaration)result.types().get(1)).enumConstants().get(0)).toString());\n"},{"value":"System.out.println(\"^^^^^^\" + ((TypeDeclaration)result.types().get(0)).getMethods()[0].getName().toString());\n","lineNum":172,"childDeclarations":{},"completeNodeValue":"System.out.println(\"^^^^^^\" + ((TypeDeclaration)result.types().get(0)).getMethods()[0].getName().toString());\n"},{"value":"System.out.println(\"^^^^^^\" + ((SingleVariableDeclaration)((TypeDeclaration)result.types().get(0)).getMethods()[0].parameters().get(0)).toString());\n","lineNum":173,"childDeclarations":{},"completeNodeValue":"System.out.println(\"^^^^^^\" + ((SingleVariableDeclaration)((TypeDeclaration)result.types().get(0)).getMethods()[0].parameters().get(0)).toString());\n"},{"value":"System.out.println(\"^^^^^^\" + (((TypeDeclaration)result.types().get(0)).getMethods()[0].getReturnType2().toString()));\n","lineNum":174,"childDeclarations":{},"completeNodeValue":"System.out.println(\"^^^^^^\" + (((TypeDeclaration)result.types().get(0)).getMethods()[0].getReturnType2().toString()));\n"},{"value":"System.out.println(\"^^^^^^\" + ((Name)((TypeDeclaration)result.types().get(0)).getMethods()[0].thrownExceptions().get(0)));\n","lineNum":175,"childDeclarations":{},"completeNodeValue":"System.out.println(\"^^^^^^\" + ((Name)((TypeDeclaration)result.types().get(0)).getMethods()[0].thrownExceptions().get(0)));\n"},{"value":"System.out.println(\"^^^^^^\" + ((Name)((TypeDeclaration)result.types().get(0)).getMethods()[0].thrownExceptions().get(1)));\n","lineNum":176,"childDeclarations":{},"completeNodeValue":"System.out.println(\"^^^^^^\" + ((Name)((TypeDeclaration)result.types().get(0)).getMethods()[0].thrownExceptions().get(1)));\n"},{"value":"System.out.println(((TypeDeclaration)result.types().get(0)).modifiers().get(0));\n","lineNum":177,"childDeclarations":{},"completeNodeValue":"System.out.println(((TypeDeclaration)result.types().get(0)).modifiers().get(0));\n"},{"value":"for (Object obj : (((TypeDeclaration)result.types().get(0)).getMethods()[0]).getBody().statements()) System.out.println(\"XXXX___ \" + obj.toString());\n","lineNum":179,"childDeclarations":{},"completeNodeValue":"for (Object obj : (((TypeDeclaration)result.types().get(0)).getMethods()[0]).getBody().statements()) System.out.println(\"XXXX___ \" + obj.toString());\n"},{"value":"System.out.println(\"^^^^^^\" + ((SingleVariableDeclaration)((TypeDeclaration)result.types().get(0)).getMethods()[0].parameters().get(0)).toString());\n","lineNum":181,"childDeclarations":{},"completeNodeValue":"System.out.println(\"^^^^^^\" + ((SingleVariableDeclaration)((TypeDeclaration)result.types().get(0)).getMethods()[0].parameters().get(0)).toString());\n"},{"type":"String","value":"\"@SuppressWarnings(\\\"unchecked\\\") public static void main(String[] args) throws FileNotFoundException {\\n\" + \"  int i\u003d0;\\n\" + \"  String sourceed\u003d\\\"class Bob {/*asas*/}/**asd*/\\\\n\\\" + \\\"apple\\\" + \\\"dummy\\\" + i + \\\"uska mummy\\\";\\n\"+ \"  String sourcee\u003d\\\"class Bob {/*asas*/}/**asd*/\\\\n\\\";\\n\"+ \"  String source\u003d\\\"class Bob {/*asas*/}/**asd*/\\\";\\n\"+ \"  ASTParser parser\u003dASTParser.newParser(AST.JLS3);\\n\"+ \"class z {\\n  }\\n\"+ \"  parser.setSource(sourceed.toCharArray());\\n\"+ \"  CompilationUnit result\u003d(CompilationUnit)parser.createAST(null);\\n\"+ \"  System.out.println(((Class\u003cBlockComment\u003e)result.getCommentList().get(0).getClass()).getName());\\n\"+ \"  System.out.println(result.getLength());\\n\"+ \"  System.out.println(result.toString());\\n\"+ \"  String source2\u003d\\\"class Bob {public void MyMethod(){}}\\\";\\n\"+ \"  ASTParser parser2\u003dASTParser.newParser(AST.JLS3);\\n\"+ \"  parser2.setSource(source2.toCharArray());\\n\"+ \"  CompilationUnit result2\u003d(CompilationUnit)parser2.createAST(null);\\n\"+ \"  System.out.println(result2);\\n\"+ \"  System.out.println(result2.getLength());\\n\"+ \"  System.out.println(result2.toString());\\n\"+ \"  just();\\n\"+ \"}\\n\"","lineNum":184,"name":"test","modifiers":[],"childDeclarations":{},"completeNodeValue":"String test\u003d\"@SuppressWarnings(\\\"unchecked\\\") public static void main(String[] args) throws FileNotFoundException {\\n\" + \"  int i\u003d0;\\n\" + \"  String sourceed\u003d\\\"class Bob {/*asas*/}/**asd*/\\\\n\\\" + \\\"apple\\\" + \\\"dummy\\\" + i + \\\"uska mummy\\\";\\n\"+ \"  String sourcee\u003d\\\"class Bob {/*asas*/}/**asd*/\\\\n\\\";\\n\"+ \"  String source\u003d\\\"class Bob {/*asas*/}/**asd*/\\\";\\n\"+ \"  ASTParser parser\u003dASTParser.newParser(AST.JLS3);\\n\"+ \"class z {\\n  }\\n\"+ \"  parser.setSource(sourceed.toCharArray());\\n\"+ \"  CompilationUnit result\u003d(CompilationUnit)parser.createAST(null);\\n\"+ \"  System.out.println(((Class\u003cBlockComment\u003e)result.getCommentList().get(0).getClass()).getName());\\n\"+ \"  System.out.println(result.getLength());\\n\"+ \"  System.out.println(result.toString());\\n\"+ \"  String source2\u003d\\\"class Bob {public void MyMethod(){}}\\\";\\n\"+ \"  ASTParser parser2\u003dASTParser.newParser(AST.JLS3);\\n\"+ \"  parser2.setSource(source2.toCharArray());\\n\"+ \"  CompilationUnit result2\u003d(CompilationUnit)parser2.createAST(null);\\n\"+ \"  System.out.println(result2);\\n\"+ \"  System.out.println(result2.getLength());\\n\"+ \"  System.out.println(result2.toString());\\n\"+ \"  just();\\n\"+ \"}\\n\";\n"},{"value":"System.out.println(\"\\n\\n\\n\" + test);\n","lineNum":198,"childDeclarations":{},"completeNodeValue":"System.out.println(\"\\n\\n\\n\" + test);\n"}],"lineNum":92,"name":"just","modifiers":["static"],"childDeclarations":{},"completeNodeValue":"static void just() throws FileNotFoundException {\n  ASTParser parser\u003dASTParser.newParser(AST.JLS3);\nclass met {\n    void tert(){\n      System.out.println();\n    }\n  }\n  String theString\u003d\"\";\n  File file\u003dnew File(\"F:\\\\Workspace\\\\StructuralComparatorWeb\\\\src\\\\main\\\\java\\\\com\\\\imaginea\\\\assessor1\\\\JDTTester.java\");\n  Scanner scanner\u003dnew Scanner(file);\n  theString\u003dscanner.nextLine();\n  while (scanner.hasNextLine())   theString\u003dtheString + \"\\n\" + scanner.nextLine();\n  char[] charArray\u003dtheString.toCharArray();\n  parser.setSource(charArray);\n  Map options\u003dJavaCore.getOptions();\n  JavaCore.setComplianceOptions(JavaCore.VERSION_1_7,options);\n  parser.setCompilerOptions(options);\n  CompilationUnit result\u003d(CompilationUnit)parser.createAST(null);\n  Map m\u003dresult.properties();\n  Set s\u003dm.keySet();\n  System.out.println(result + \"\\n\\n\\n\\n\\n\\n\\n----------------------\");\n  for (  Object ob : s)   System.out.println(\"@@@\" + s.getClass());\n  System.out.println(\"####### \" + result.getPackage().getName());\n  System.out.println(result.imports().size());\n  System.out.println(\"////####### \" + ((ImportDeclaration)result.imports().get(0)).getName());\n  System.out.println(\"////####### \" + ((ImportDeclaration)result.imports().get(1)).getName());\n  System.out.println(\"////####### \" + ((ImportDeclaration)result.imports().get(2)).getName());\n  ImportDeclaration id\u003d(ImportDeclaration)result.imports().get(0);\n  System.out.println(id.getStartPosition());\n  System.out.println(result.getLineNumber(id.getStartPosition()));\n  System.out.println(result.getPosition(result.getLineNumber(id.getStartPosition()),5));\n  System.out.println(result.properties().size());\n  System.out.println(((ChildPropertyDescriptor)result.structuralPropertiesForType().get(0)).getId());\n  System.out.println(((ChildListPropertyDescriptor)result.structuralPropertiesForType().get(2)).getId());\n  System.out.println(((ChildListPropertyDescriptor)result.structuralPropertiesForType().get(1)).getId());\n  System.out.println(result.structuralPropertiesForType().size());\n  for (int i\u003d0; i \u003c result.getMessages().length; i++)   System.out.println(((Message)result.getMessages()[i]).getMessage());\n  System.out.println(result.types().size());\n  System.out.println(\"####### \" + result.types().get(0).getClass());\n  System.out.println(\"------------------------------------\");\n  for (int i\u003d0; i \u003c result.types().size(); i++) {\n    if (result.types().get(i).getClass() \u003d\u003d org.eclipse.jdt.core.dom.TypeDeclaration.class) {\n      System.out.println(\"10\\t\" + ((TypeDeclaration)result.types().get(i)).getName());\n      List lst\u003d((TypeDeclaration)result.types().get(i)).bodyDeclarations();\n      for (      Object map : lst) {\n        if (map !\u003d null) {\n          System.out.println(\"***\" + map.getClass());\n          if (map.getClass() \u003d\u003d FieldDeclaration.class) {\n            System.out.println(((FieldDeclaration)map).toString());\n            System.out.println(((FieldDeclaration)map).getType());\n            System.out.println(((FieldDeclaration)map).fragments().size());\n            System.out.println(((VariableDeclarationFragment)((FieldDeclaration)map).fragments().get(0)).getName());\n            System.out.println(((VariableDeclarationFragment)((FieldDeclaration)map).fragments().get(0)).getInitializer());\n          }\n        }\n      }\n    }\n else     if (result.types().get(i).getClass() \u003d\u003d org.eclipse.jdt.core.dom.EnumDeclaration.class)     System.out.println(((org.eclipse.jdt.core.dom.EnumDeclaration)result.types().get(i)).getName());\n  }\n  System.out.println(((EnumConstantDeclaration)((EnumDeclaration)result.types().get(1)).enumConstants().get(0)).getName());\n  System.out.println(((EnumConstantDeclaration)((EnumDeclaration)result.types().get(1)).enumConstants().get(0)).toString());\n  System.out.println(\"^^^^^^\" + ((TypeDeclaration)result.types().get(0)).getMethods()[0].getName().toString());\n  System.out.println(\"^^^^^^\" + ((SingleVariableDeclaration)((TypeDeclaration)result.types().get(0)).getMethods()[0].parameters().get(0)).toString());\n  System.out.println(\"^^^^^^\" + (((TypeDeclaration)result.types().get(0)).getMethods()[0].getReturnType2().toString()));\n  System.out.println(\"^^^^^^\" + ((Name)((TypeDeclaration)result.types().get(0)).getMethods()[0].thrownExceptions().get(0)));\n  System.out.println(\"^^^^^^\" + ((Name)((TypeDeclaration)result.types().get(0)).getMethods()[0].thrownExceptions().get(1)));\n  System.out.println(((TypeDeclaration)result.types().get(0)).modifiers().get(0));\n  for (  Object obj : (((TypeDeclaration)result.types().get(0)).getMethods()[0]).getBody().statements())   System.out.println(\"XXXX___ \" + obj.toString());\n  System.out.println(\"^^^^^^\" + ((SingleVariableDeclaration)((TypeDeclaration)result.types().get(0)).getMethods()[0].parameters().get(0)).toString());\n  String test\u003d\"@SuppressWarnings(\\\"unchecked\\\") public static void main(String[] args) throws FileNotFoundException {\\n\" + \"  int i\u003d0;\\n\" + \"  String sourceed\u003d\\\"class Bob {/*asas*/}/**asd*/\\\\n\\\" + \\\"apple\\\" + \\\"dummy\\\" + i + \\\"uska mummy\\\";\\n\"+ \"  String sourcee\u003d\\\"class Bob {/*asas*/}/**asd*/\\\\n\\\";\\n\"+ \"  String source\u003d\\\"class Bob {/*asas*/}/**asd*/\\\";\\n\"+ \"  ASTParser parser\u003dASTParser.newParser(AST.JLS3);\\n\"+ \"class z {\\n  }\\n\"+ \"  parser.setSource(sourceed.toCharArray());\\n\"+ \"  CompilationUnit result\u003d(CompilationUnit)parser.createAST(null);\\n\"+ \"  System.out.println(((Class\u003cBlockComment\u003e)result.getCommentList().get(0).getClass()).getName());\\n\"+ \"  System.out.println(result.getLength());\\n\"+ \"  System.out.println(result.toString());\\n\"+ \"  String source2\u003d\\\"class Bob {public void MyMethod(){}}\\\";\\n\"+ \"  ASTParser parser2\u003dASTParser.newParser(AST.JLS3);\\n\"+ \"  parser2.setSource(source2.toCharArray());\\n\"+ \"  CompilationUnit result2\u003d(CompilationUnit)parser2.createAST(null);\\n\"+ \"  System.out.println(result2);\\n\"+ \"  System.out.println(result2.getLength());\\n\"+ \"  System.out.println(result2.toString());\\n\"+ \"  just();\\n\"+ \"}\\n\";\n  System.out.println(\"\\n\\n\\n\" + test);\n}\n"},"z_Class":{"isInterface":false,"superClass":"","superInterfacelist":[],"bodyDeclarations":[],"lineNum":42,"name":"z","modifiers":["public"],"childDeclarations":{},"completeNodeValue":"public class z {\n}\n"},"just2_Method":{"isConstructor":false,"returnType":"void","parameters":"","thrownExceptions":["FileNotFoundException"],"blockofStatements":[{"type":"ASTParser","value":"ASTParser.newParser(AST.JLS3)","lineNum":207,"name":"parser","modifiers":[],"childDeclarations":{},"completeNodeValue":"ASTParser parser\u003dASTParser.newParser(AST.JLS3);\n"},{"type":"String","value":"\"\"","lineNum":209,"name":"theString","modifiers":[],"childDeclarations":{},"completeNodeValue":"String theString\u003d\"\";\n"},{"type":"File","value":"new File(\"F:\\\\Workspace\\\\StructuralComparatorWeb\\\\src\\\\main\\\\java\\\\com\\\\imaginea\\\\assessor1\\\\JDTTester.java\")","lineNum":210,"name":"file","modifiers":[],"childDeclarations":{},"completeNodeValue":"File file\u003dnew File(\"F:\\\\Workspace\\\\StructuralComparatorWeb\\\\src\\\\main\\\\java\\\\com\\\\imaginea\\\\assessor1\\\\JDTTester.java\");\n"},{"type":"Scanner","value":"new Scanner(file)","lineNum":211,"name":"scanner","modifiers":[],"childDeclarations":{},"completeNodeValue":"Scanner scanner\u003dnew Scanner(file);\n"},{"value":"theString\u003dscanner.nextLine();\n","lineNum":212,"childDeclarations":{},"completeNodeValue":"theString\u003dscanner.nextLine();\n"},{"value":"while (scanner.hasNextLine()) theString\u003dtheString + \"\\n\" + scanner.nextLine();\n","lineNum":213,"childDeclarations":{},"completeNodeValue":"while (scanner.hasNextLine()) theString\u003dtheString + \"\\n\" + scanner.nextLine();\n"},{"type":"char[]","value":"theString.toCharArray()","lineNum":215,"name":"charArray","modifiers":[],"childDeclarations":{},"completeNodeValue":"char[] charArray\u003dtheString.toCharArray();\n"},{"value":"parser.setSource(charArray);\n","lineNum":217,"childDeclarations":{},"completeNodeValue":"parser.setSource(charArray);\n"},{"type":"Map","value":"JavaCore.getOptions()","lineNum":219,"name":"options","modifiers":[],"childDeclarations":{},"completeNodeValue":"Map options\u003dJavaCore.getOptions();\n"},{"value":"JavaCore.setComplianceOptions(JavaCore.VERSION_1_7,options);\n","lineNum":220,"childDeclarations":{},"completeNodeValue":"JavaCore.setComplianceOptions(JavaCore.VERSION_1_7,options);\n"},{"value":"parser.setCompilerOptions(options);\n","lineNum":221,"childDeclarations":{},"completeNodeValue":"parser.setCompilerOptions(options);\n"},{"type":"CompilationUnit","value":"(CompilationUnit)parser.createAST(null)","lineNum":223,"name":"result","modifiers":[],"childDeclarations":{},"completeNodeValue":"CompilationUnit result\u003d(CompilationUnit)parser.createAST(null);\n"},{"value":"System.out.println(result.getLength());\n","lineNum":224,"childDeclarations":{},"completeNodeValue":"System.out.println(result.getLength());\n"},{"value":"System.out.println(\"####### \" + ((ImportDeclaration)result.imports().get(0)).getName());\n","lineNum":231,"childDeclarations":{},"completeNodeValue":"System.out.println(\"####### \" + ((ImportDeclaration)result.imports().get(0)).getName());\n"},{"value":"System.out.println(\"asdfg   \" + ((QualifiedName)((SimpleType)((TypeDeclaration)result.types().get(0)).getSuperclassType()).getName()).toString());\n","lineNum":232,"childDeclarations":{},"completeNodeValue":"System.out.println(\"asdfg   \" + ((QualifiedName)((SimpleType)((TypeDeclaration)result.types().get(0)).getSuperclassType()).getName()).toString());\n"},{"type":"AbstractTypeDeclaration","value":"(AbstractTypeDeclaration)result.types().get(0)","lineNum":233,"name":"atd","modifiers":[],"childDeclarations":{},"completeNodeValue":"AbstractTypeDeclaration atd\u003d(AbstractTypeDeclaration)result.types().get(0);\n"},{"value":"System.out.println(atd.getName());\n","lineNum":234,"childDeclarations":{},"completeNodeValue":"System.out.println(atd.getName());\n"},{"value":"System.out.println(atd.getClass());\n","lineNum":235,"childDeclarations":{},"completeNodeValue":"System.out.println(atd.getClass());\n"},{"type":"List","value":"atd.bodyDeclarations()","lineNum":236,"name":"list","modifiers":[],"childDeclarations":{},"completeNodeValue":"List list\u003datd.bodyDeclarations();\n"},{"value":"for (Object obj : list) {\n  if (obj instanceof AbstractTypeDeclaration) {\n    System.out.println(((AbstractTypeDeclaration)obj).getName());\n  }\n else   if (obj instanceof MethodDeclaration)   System.out.println(\"**\" + ((MethodDeclaration)obj).getName());\n else   System.out.println(\"--\" + ((FieldDeclaration)obj).fragments().get(0).getClass());\n  List list1\u003d((BodyDeclaration)obj).modifiers();\n  for (  Object o : list1) {\n    System.out.println(\"\\t\" + o.getClass());\n    if (o.getClass() \u003d\u003d org.eclipse.jdt.core.dom.Modifier.class)     System.out.println(((Modifier)o).toString() + \"   \" + ((Modifier)o).getStartPosition()+ \"   \"+ ((Modifier)o).getLength());\n  }\n}\n","lineNum":237,"childDeclarations":{},"completeNodeValue":"for (Object obj : list) {\n  if (obj instanceof AbstractTypeDeclaration) {\n    System.out.println(((AbstractTypeDeclaration)obj).getName());\n  }\n else   if (obj instanceof MethodDeclaration)   System.out.println(\"**\" + ((MethodDeclaration)obj).getName());\n else   System.out.println(\"--\" + ((FieldDeclaration)obj).fragments().get(0).getClass());\n  List list1\u003d((BodyDeclaration)obj).modifiers();\n  for (  Object o : list1) {\n    System.out.println(\"\\t\" + o.getClass());\n    if (o.getClass() \u003d\u003d org.eclipse.jdt.core.dom.Modifier.class)     System.out.println(((Modifier)o).toString() + \"   \" + ((Modifier)o).getStartPosition()+ \"   \"+ ((Modifier)o).getLength());\n  }\n}\n"},{"value":"System.out.println(result.getLineNumber(914));\n","lineNum":252,"childDeclarations":{},"completeNodeValue":"System.out.println(result.getLineNumber(914));\n"},{"value":"System.out.println(result.getLineNumber(921));\n","lineNum":253,"childDeclarations":{},"completeNodeValue":"System.out.println(result.getLineNumber(921));\n"},{"value":"System.out.println(((ChildPropertyDescriptor)result.structuralPropertiesForType().get(0)).getId());\n","lineNum":257,"childDeclarations":{},"completeNodeValue":"System.out.println(((ChildPropertyDescriptor)result.structuralPropertiesForType().get(0)).getId());\n"},{"value":"System.out.println(((ChildListPropertyDescriptor)result.structuralPropertiesForType().get(2)).getId());\n","lineNum":258,"childDeclarations":{},"completeNodeValue":"System.out.println(((ChildListPropertyDescriptor)result.structuralPropertiesForType().get(2)).getId());\n"},{"value":"System.out.println(((ChildListPropertyDescriptor)result.structuralPropertiesForType().get(1)));\n","lineNum":259,"childDeclarations":{},"completeNodeValue":"System.out.println(((ChildListPropertyDescriptor)result.structuralPropertiesForType().get(1)));\n"}],"lineNum":206,"name":"just2","modifiers":["private","static"],"childDeclarations":{},"completeNodeValue":"private static void just2() throws FileNotFoundException {\n  ASTParser parser\u003dASTParser.newParser(AST.JLS3);\n  String theString\u003d\"\";\n  File file\u003dnew File(\"F:\\\\Workspace\\\\StructuralComparatorWeb\\\\src\\\\main\\\\java\\\\com\\\\imaginea\\\\assessor1\\\\JDTTester.java\");\n  Scanner scanner\u003dnew Scanner(file);\n  theString\u003dscanner.nextLine();\n  while (scanner.hasNextLine())   theString\u003dtheString + \"\\n\" + scanner.nextLine();\n  char[] charArray\u003dtheString.toCharArray();\n  parser.setSource(charArray);\n  Map options\u003dJavaCore.getOptions();\n  JavaCore.setComplianceOptions(JavaCore.VERSION_1_7,options);\n  parser.setCompilerOptions(options);\n  CompilationUnit result\u003d(CompilationUnit)parser.createAST(null);\n  System.out.println(result.getLength());\n  System.out.println(\"####### \" + ((ImportDeclaration)result.imports().get(0)).getName());\n  System.out.println(\"asdfg   \" + ((QualifiedName)((SimpleType)((TypeDeclaration)result.types().get(0)).getSuperclassType()).getName()).toString());\n  AbstractTypeDeclaration atd\u003d(AbstractTypeDeclaration)result.types().get(0);\n  System.out.println(atd.getName());\n  System.out.println(atd.getClass());\n  List list\u003datd.bodyDeclarations();\n  for (  Object obj : list) {\n    if (obj instanceof AbstractTypeDeclaration) {\n      System.out.println(((AbstractTypeDeclaration)obj).getName());\n    }\n else     if (obj instanceof MethodDeclaration)     System.out.println(\"**\" + ((MethodDeclaration)obj).getName());\n else     System.out.println(\"--\" + ((FieldDeclaration)obj).fragments().get(0).getClass());\n    List list1\u003d((BodyDeclaration)obj).modifiers();\n    for (    Object o : list1) {\n      System.out.println(\"\\t\" + o.getClass());\n      if (o.getClass() \u003d\u003d org.eclipse.jdt.core.dom.Modifier.class)       System.out.println(((Modifier)o).toString() + \"   \" + ((Modifier)o).getStartPosition()+ \"   \"+ ((Modifier)o).getLength());\n    }\n  }\n  System.out.println(result.getLineNumber(914));\n  System.out.println(result.getLineNumber(921));\n  System.out.println(((ChildPropertyDescriptor)result.structuralPropertiesForType().get(0)).getId());\n  System.out.println(((ChildListPropertyDescriptor)result.structuralPropertiesForType().get(2)).getId());\n  System.out.println(((ChildListPropertyDescriptor)result.structuralPropertiesForType().get(1)));\n}\n"},"xz":{"type":"int","value":"0","lineNum":38,"name":"xz","modifiers":[],"childDeclarations":{},"completeNodeValue":"int xz\u003d0;\n"},"aaaaa":{"type":"int[]","value":"new int[]{10,10}","lineNum":40,"name":"aaaaa","modifiers":[],"childDeclarations":{},"completeNodeValue":"int[] aaaaa\u003dnew int[]{10,10};\n"},"anm2_Method":{"isConstructor":false,"returnType":"void","parameters":"","thrownExceptions":[],"blockofStatements":[],"lineNum":88,"name":"anm2","modifiers":[],"childDeclarations":{},"completeNodeValue":"void anm2(){\n}\n"},"anm_Method":{"isConstructor":false,"returnType":"void","parameters":"","thrownExceptions":[],"blockofStatements":[],"lineNum":84,"name":"anm","modifiers":[],"childDeclarations":{},"completeNodeValue":"void anm(){\n}\n"}},"completeNodeValue":"public class JDTTester\u003cT\u003e implements a, b {\n  int xz\u003d0;\n  int[] aaaa\u003d{10,10};\n  int[] aaaaa\u003dnew int[]{10,10};\npublic class z {\n  }\n  @SuppressWarnings(\"unchecked\") public static void main(  String[] args) throws FileNotFoundException {\n    int i\u003d0;\n    ;\n    String sourceed\u003d\"class Bob {/*asas*/}/**asd*/\\n\" + \"apple\" + \"dummy\" + i + \"uska mummy\";\n    String sourcee\u003d\"class Bob {/*asas*/}/**asd*/\\n\";\n    String source\u003d\"class Bob {/*asas*/}/**asd*/\";\n    ASTParser parser\u003dASTParser.newParser(AST.JLS3);\nclass z {\n    }\n    parser.setSource(sourceed.toCharArray());\n    CompilationUnit result\u003d(CompilationUnit)parser.createAST(null);\n    String source2\u003d\"class Bob {public void MyMethod(){}}\";\n    ASTParser parser2\u003dASTParser.newParser(AST.JLS3);\n    parser2.setSource(source2.toCharArray());\n    CompilationUnit result2\u003d(CompilationUnit)parser2.createAST(null);\n    just();\n  }\n  enum anm {  apple}\n  enum anm2 {  apple}\n  void anm(){\n  }\n  void anm2(){\n  }\n  static void just() throws FileNotFoundException {\n    ASTParser parser\u003dASTParser.newParser(AST.JLS3);\nclass met {\n      void tert(){\n        System.out.println();\n      }\n    }\n    String theString\u003d\"\";\n    File file\u003dnew File(\"F:\\\\Workspace\\\\StructuralComparatorWeb\\\\src\\\\main\\\\java\\\\com\\\\imaginea\\\\assessor1\\\\JDTTester.java\");\n    Scanner scanner\u003dnew Scanner(file);\n    theString\u003dscanner.nextLine();\n    while (scanner.hasNextLine())     theString\u003dtheString + \"\\n\" + scanner.nextLine();\n    char[] charArray\u003dtheString.toCharArray();\n    parser.setSource(charArray);\n    Map options\u003dJavaCore.getOptions();\n    JavaCore.setComplianceOptions(JavaCore.VERSION_1_7,options);\n    parser.setCompilerOptions(options);\n    CompilationUnit result\u003d(CompilationUnit)parser.createAST(null);\n    Map m\u003dresult.properties();\n    Set s\u003dm.keySet();\n    System.out.println(result + \"\\n\\n\\n\\n\\n\\n\\n----------------------\");\n    for (    Object ob : s)     System.out.println(\"@@@\" + s.getClass());\n    System.out.println(\"####### \" + result.getPackage().getName());\n    System.out.println(result.imports().size());\n    System.out.println(\"////####### \" + ((ImportDeclaration)result.imports().get(0)).getName());\n    System.out.println(\"////####### \" + ((ImportDeclaration)result.imports().get(1)).getName());\n    System.out.println(\"////####### \" + ((ImportDeclaration)result.imports().get(2)).getName());\n    ImportDeclaration id\u003d(ImportDeclaration)result.imports().get(0);\n    System.out.println(id.getStartPosition());\n    System.out.println(result.getLineNumber(id.getStartPosition()));\n    System.out.println(result.getPosition(result.getLineNumber(id.getStartPosition()),5));\n    System.out.println(result.properties().size());\n    System.out.println(((ChildPropertyDescriptor)result.structuralPropertiesForType().get(0)).getId());\n    System.out.println(((ChildListPropertyDescriptor)result.structuralPropertiesForType().get(2)).getId());\n    System.out.println(((ChildListPropertyDescriptor)result.structuralPropertiesForType().get(1)).getId());\n    System.out.println(result.structuralPropertiesForType().size());\n    for (int i\u003d0; i \u003c result.getMessages().length; i++)     System.out.println(((Message)result.getMessages()[i]).getMessage());\n    System.out.println(result.types().size());\n    System.out.println(\"####### \" + result.types().get(0).getClass());\n    System.out.println(\"------------------------------------\");\n    for (int i\u003d0; i \u003c result.types().size(); i++) {\n      if (result.types().get(i).getClass() \u003d\u003d org.eclipse.jdt.core.dom.TypeDeclaration.class) {\n        System.out.println(\"10\\t\" + ((TypeDeclaration)result.types().get(i)).getName());\n        List lst\u003d((TypeDeclaration)result.types().get(i)).bodyDeclarations();\n        for (        Object map : lst) {\n          if (map !\u003d null) {\n            System.out.println(\"***\" + map.getClass());\n            if (map.getClass() \u003d\u003d FieldDeclaration.class) {\n              System.out.println(((FieldDeclaration)map).toString());\n              System.out.println(((FieldDeclaration)map).getType());\n              System.out.println(((FieldDeclaration)map).fragments().size());\n              System.out.println(((VariableDeclarationFragment)((FieldDeclaration)map).fragments().get(0)).getName());\n              System.out.println(((VariableDeclarationFragment)((FieldDeclaration)map).fragments().get(0)).getInitializer());\n            }\n          }\n        }\n      }\n else       if (result.types().get(i).getClass() \u003d\u003d org.eclipse.jdt.core.dom.EnumDeclaration.class)       System.out.println(((org.eclipse.jdt.core.dom.EnumDeclaration)result.types().get(i)).getName());\n    }\n    System.out.println(((EnumConstantDeclaration)((EnumDeclaration)result.types().get(1)).enumConstants().get(0)).getName());\n    System.out.println(((EnumConstantDeclaration)((EnumDeclaration)result.types().get(1)).enumConstants().get(0)).toString());\n    System.out.println(\"^^^^^^\" + ((TypeDeclaration)result.types().get(0)).getMethods()[0].getName().toString());\n    System.out.println(\"^^^^^^\" + ((SingleVariableDeclaration)((TypeDeclaration)result.types().get(0)).getMethods()[0].parameters().get(0)).toString());\n    System.out.println(\"^^^^^^\" + (((TypeDeclaration)result.types().get(0)).getMethods()[0].getReturnType2().toString()));\n    System.out.println(\"^^^^^^\" + ((Name)((TypeDeclaration)result.types().get(0)).getMethods()[0].thrownExceptions().get(0)));\n    System.out.println(\"^^^^^^\" + ((Name)((TypeDeclaration)result.types().get(0)).getMethods()[0].thrownExceptions().get(1)));\n    System.out.println(((TypeDeclaration)result.types().get(0)).modifiers().get(0));\n    for (    Object obj : (((TypeDeclaration)result.types().get(0)).getMethods()[0]).getBody().statements())     System.out.println(\"XXXX___ \" + obj.toString());\n    System.out.println(\"^^^^^^\" + ((SingleVariableDeclaration)((TypeDeclaration)result.types().get(0)).getMethods()[0].parameters().get(0)).toString());\n    String test\u003d\"@SuppressWarnings(\\\"unchecked\\\") public static void main(String[] args) throws FileNotFoundException {\\n\" + \"  int i\u003d0;\\n\" + \"  String sourceed\u003d\\\"class Bob {/*asas*/}/**asd*/\\\\n\\\" + \\\"apple\\\" + \\\"dummy\\\" + i + \\\"uska mummy\\\";\\n\"+ \"  String sourcee\u003d\\\"class Bob {/*asas*/}/**asd*/\\\\n\\\";\\n\"+ \"  String source\u003d\\\"class Bob {/*asas*/}/**asd*/\\\";\\n\"+ \"  ASTParser parser\u003dASTParser.newParser(AST.JLS3);\\n\"+ \"class z {\\n  }\\n\"+ \"  parser.setSource(sourceed.toCharArray());\\n\"+ \"  CompilationUnit result\u003d(CompilationUnit)parser.createAST(null);\\n\"+ \"  System.out.println(((Class\u003cBlockComment\u003e)result.getCommentList().get(0).getClass()).getName());\\n\"+ \"  System.out.println(result.getLength());\\n\"+ \"  System.out.println(result.toString());\\n\"+ \"  String source2\u003d\\\"class Bob {public void MyMethod(){}}\\\";\\n\"+ \"  ASTParser parser2\u003dASTParser.newParser(AST.JLS3);\\n\"+ \"  parser2.setSource(source2.toCharArray());\\n\"+ \"  CompilationUnit result2\u003d(CompilationUnit)parser2.createAST(null);\\n\"+ \"  System.out.println(result2);\\n\"+ \"  System.out.println(result2.getLength());\\n\"+ \"  System.out.println(result2.toString());\\n\"+ \"  just();\\n\"+ \"}\\n\";\n    System.out.println(\"\\n\\n\\n\" + test);\n  }\n  private static void just2() throws FileNotFoundException {\n    ASTParser parser\u003dASTParser.newParser(AST.JLS3);\n    String theString\u003d\"\";\n    File file\u003dnew File(\"F:\\\\Workspace\\\\StructuralComparatorWeb\\\\src\\\\main\\\\java\\\\com\\\\imaginea\\\\assessor1\\\\JDTTester.java\");\n    Scanner scanner\u003dnew Scanner(file);\n    theString\u003dscanner.nextLine();\n    while (scanner.hasNextLine())     theString\u003dtheString + \"\\n\" + scanner.nextLine();\n    char[] charArray\u003dtheString.toCharArray();\n    parser.setSource(charArray);\n    Map options\u003dJavaCore.getOptions();\n    JavaCore.setComplianceOptions(JavaCore.VERSION_1_7,options);\n    parser.setCompilerOptions(options);\n    CompilationUnit result\u003d(CompilationUnit)parser.createAST(null);\n    System.out.println(result.getLength());\n    System.out.println(\"####### \" + ((ImportDeclaration)result.imports().get(0)).getName());\n    System.out.println(\"asdfg   \" + ((QualifiedName)((SimpleType)((TypeDeclaration)result.types().get(0)).getSuperclassType()).getName()).toString());\n    AbstractTypeDeclaration atd\u003d(AbstractTypeDeclaration)result.types().get(0);\n    System.out.println(atd.getName());\n    System.out.println(atd.getClass());\n    List list\u003datd.bodyDeclarations();\n    for (    Object obj : list) {\n      if (obj instanceof AbstractTypeDeclaration) {\n        System.out.println(((AbstractTypeDeclaration)obj).getName());\n      }\n else       if (obj instanceof MethodDeclaration)       System.out.println(\"**\" + ((MethodDeclaration)obj).getName());\n else       System.out.println(\"--\" + ((FieldDeclaration)obj).fragments().get(0).getClass());\n      List list1\u003d((BodyDeclaration)obj).modifiers();\n      for (      Object o : list1) {\n        System.out.println(\"\\t\" + o.getClass());\n        if (o.getClass() \u003d\u003d org.eclipse.jdt.core.dom.Modifier.class)         System.out.println(((Modifier)o).toString() + \"   \" + ((Modifier)o).getStartPosition()+ \"   \"+ ((Modifier)o).getLength());\n      }\n    }\n    System.out.println(result.getLineNumber(914));\n    System.out.println(result.getLineNumber(921));\n    System.out.println(((ChildPropertyDescriptor)result.structuralPropertiesForType().get(0)).getId());\n    System.out.println(((ChildListPropertyDescriptor)result.structuralPropertiesForType().get(2)).getId());\n    System.out.println(((ChildListPropertyDescriptor)result.structuralPropertiesForType().get(1)));\n  }\n}\n"}],"commonChilds":[{"diff":-1,"declarations":[null,{"isConstructor":false,"returnType":"void","parameters":"String[] args","thrownExceptions":["FileNotFoundException"],"blockofStatements":[{"type":"int","value":"0","lineNum":49,"name":"i","modifiers":[],"childDeclarations":{},"completeNodeValue":"int i\u003d0;\n"},{"value":";\n","lineNum":49,"childDeclarations":{},"completeNodeValue":";\n"},{"type":"String","value":"\"class Bob {/*asas*/}/**asd*/\\n\" + \"apple\" + \"dummy\" + i + \"uska mummy\"","lineNum":50,"name":"sourceed","modifiers":[],"childDeclarations":{},"completeNodeValue":"String sourceed\u003d\"class Bob {/*asas*/}/**asd*/\\n\" + \"apple\" + \"dummy\" + i + \"uska mummy\";\n"},{"type":"String","value":"\"class Bob {/*asas*/}/**asd*/\\n\"","lineNum":51,"name":"sourcee","modifiers":[],"childDeclarations":{},"completeNodeValue":"String sourcee\u003d\"class Bob {/*asas*/}/**asd*/\\n\";\n"},{"type":"String","value":"\"class Bob {/*asas*/}/**asd*/\"","lineNum":52,"name":"source","modifiers":[],"childDeclarations":{},"completeNodeValue":"String source\u003d\"class Bob {/*asas*/}/**asd*/\";\n"},{"type":"ASTParser","value":"ASTParser.newParser(AST.JLS3)","lineNum":54,"name":"parser","modifiers":[],"childDeclarations":{},"completeNodeValue":"ASTParser parser\u003dASTParser.newParser(AST.JLS3);\n"},{"isInterface":false,"superClass":"","superInterfacelist":[],"bodyDeclarations":[],"lineNum":55,"name":"z","modifiers":[],"childDeclarations":{},"completeNodeValue":"class z {\n}\n"},{"value":"parser.setSource(sourceed.toCharArray());\n","lineNum":57,"childDeclarations":{},"completeNodeValue":"parser.setSource(sourceed.toCharArray());\n"},{"type":"CompilationUnit","value":"(CompilationUnit)parser.createAST(null)","lineNum":58,"name":"result","modifiers":[],"childDeclarations":{},"completeNodeValue":"CompilationUnit result\u003d(CompilationUnit)parser.createAST(null);\n"},{"type":"String","value":"\"class Bob {public void MyMethod(){}}\"","lineNum":65,"name":"source2","modifiers":[],"childDeclarations":{},"completeNodeValue":"String source2\u003d\"class Bob {public void MyMethod(){}}\";\n"},{"type":"ASTParser","value":"ASTParser.newParser(AST.JLS3)","lineNum":66,"name":"parser2","modifiers":[],"childDeclarations":{},"completeNodeValue":"ASTParser parser2\u003dASTParser.newParser(AST.JLS3);\n"},{"value":"parser2.setSource(source2.toCharArray());\n","lineNum":67,"childDeclarations":{},"completeNodeValue":"parser2.setSource(source2.toCharArray());\n"},{"type":"CompilationUnit","value":"(CompilationUnit)parser2.createAST(null)","lineNum":68,"name":"result2","modifiers":[],"childDeclarations":{},"completeNodeValue":"CompilationUnit result2\u003d(CompilationUnit)parser2.createAST(null);\n"},{"value":"just();\n","lineNum":73,"childDeclarations":{},"completeNodeValue":"just();\n"}],"lineNum":47,"name":"main","modifiers":["@SuppressWarnings(\"unchecked\")","public","static"],"childDeclarations":{},"completeNodeValue":"@SuppressWarnings(\"unchecked\") public static void main(String[] args) throws FileNotFoundException {\n  int i\u003d0;\n  ;\n  String sourceed\u003d\"class Bob {/*asas*/}/**asd*/\\n\" + \"apple\" + \"dummy\" + i + \"uska mummy\";\n  String sourcee\u003d\"class Bob {/*asas*/}/**asd*/\\n\";\n  String source\u003d\"class Bob {/*asas*/}/**asd*/\";\n  ASTParser parser\u003dASTParser.newParser(AST.JLS3);\nclass z {\n  }\n  parser.setSource(sourceed.toCharArray());\n  CompilationUnit result\u003d(CompilationUnit)parser.createAST(null);\n  String source2\u003d\"class Bob {public void MyMethod(){}}\";\n  ASTParser parser2\u003dASTParser.newParser(AST.JLS3);\n  parser2.setSource(source2.toCharArray());\n  CompilationUnit result2\u003d(CompilationUnit)parser2.createAST(null);\n  just();\n}\n"}],"commonChilds":[{"diff":-1,"declarations":[null,{"type":"int","value":"0","lineNum":49,"name":"i","modifiers":[],"childDeclarations":{},"completeNodeValue":"int i\u003d0;\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"value":";\n","lineNum":49,"childDeclarations":{},"completeNodeValue":";\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"type":"String","value":"\"class Bob {/*asas*/}/**asd*/\\n\" + \"apple\" + \"dummy\" + i + \"uska mummy\"","lineNum":50,"name":"sourceed","modifiers":[],"childDeclarations":{},"completeNodeValue":"String sourceed\u003d\"class Bob {/*asas*/}/**asd*/\\n\" + \"apple\" + \"dummy\" + i + \"uska mummy\";\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"type":"String","value":"\"class Bob {/*asas*/}/**asd*/\\n\"","lineNum":51,"name":"sourcee","modifiers":[],"childDeclarations":{},"completeNodeValue":"String sourcee\u003d\"class Bob {/*asas*/}/**asd*/\\n\";\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"type":"String","value":"\"class Bob {/*asas*/}/**asd*/\"","lineNum":52,"name":"source","modifiers":[],"childDeclarations":{},"completeNodeValue":"String source\u003d\"class Bob {/*asas*/}/**asd*/\";\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"type":"ASTParser","value":"ASTParser.newParser(AST.JLS3)","lineNum":54,"name":"parser","modifiers":[],"childDeclarations":{},"completeNodeValue":"ASTParser parser\u003dASTParser.newParser(AST.JLS3);\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"isInterface":false,"superClass":"","superInterfacelist":[],"bodyDeclarations":[],"lineNum":55,"name":"z","modifiers":[],"childDeclarations":{},"completeNodeValue":"class z {\n}\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"value":"parser.setSource(sourceed.toCharArray());\n","lineNum":57,"childDeclarations":{},"completeNodeValue":"parser.setSource(sourceed.toCharArray());\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"type":"CompilationUnit","value":"(CompilationUnit)parser.createAST(null)","lineNum":58,"name":"result","modifiers":[],"childDeclarations":{},"completeNodeValue":"CompilationUnit result\u003d(CompilationUnit)parser.createAST(null);\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"type":"String","value":"\"class Bob {public void MyMethod(){}}\"","lineNum":65,"name":"source2","modifiers":[],"childDeclarations":{},"completeNodeValue":"String source2\u003d\"class Bob {public void MyMethod(){}}\";\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"type":"ASTParser","value":"ASTParser.newParser(AST.JLS3)","lineNum":66,"name":"parser2","modifiers":[],"childDeclarations":{},"completeNodeValue":"ASTParser parser2\u003dASTParser.newParser(AST.JLS3);\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"value":"parser2.setSource(source2.toCharArray());\n","lineNum":67,"childDeclarations":{},"completeNodeValue":"parser2.setSource(source2.toCharArray());\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"type":"CompilationUnit","value":"(CompilationUnit)parser2.createAST(null)","lineNum":68,"name":"result2","modifiers":[],"childDeclarations":{},"completeNodeValue":"CompilationUnit result2\u003d(CompilationUnit)parser2.createAST(null);\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"value":"just();\n","lineNum":73,"childDeclarations":{},"completeNodeValue":"just();\n"}],"commonChilds":[]}]},{"diff":-1,"declarations":[null,{"enumConstants":["apple"],"superInterfacelist":[],"bodyDeclarations":[],"lineNum":76,"name":"anm","modifiers":[],"childDeclarations":{},"completeNodeValue":"enum anm {apple}\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"enumConstants":["apple"],"superInterfacelist":[],"bodyDeclarations":[],"lineNum":80,"name":"anm2","modifiers":[],"childDeclarations":{},"completeNodeValue":"enum anm2 {apple}\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"type":"int[]","value":"{10,10}","lineNum":39,"name":"aaaa","modifiers":[],"childDeclarations":{},"completeNodeValue":"int[] aaaa\u003d{10,10};\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"isConstructor":false,"returnType":"void","parameters":"","thrownExceptions":["FileNotFoundException"],"blockofStatements":[{"type":"ASTParser","value":"ASTParser.newParser(AST.JLS3)","lineNum":93,"name":"parser","modifiers":[],"childDeclarations":{},"completeNodeValue":"ASTParser parser\u003dASTParser.newParser(AST.JLS3);\n"},{"isInterface":false,"superClass":"","superInterfacelist":[],"bodyDeclarations":[],"lineNum":95,"name":"met","modifiers":[],"childDeclarations":{"tert_Method":{"isConstructor":false,"returnType":"void","parameters":"","thrownExceptions":[],"blockofStatements":[{"value":"System.out.println();\n","lineNum":97,"childDeclarations":{},"completeNodeValue":"System.out.println();\n"}],"lineNum":96,"name":"tert","modifiers":[],"childDeclarations":{},"completeNodeValue":"void tert(){\n  System.out.println();\n}\n"}},"completeNodeValue":"class met {\n  void tert(){\n    System.out.println();\n  }\n}\n"},{"type":"String","value":"\"\"","lineNum":101,"name":"theString","modifiers":[],"childDeclarations":{},"completeNodeValue":"String theString\u003d\"\";\n"},{"type":"File","value":"new File(\"F:\\\\Workspace\\\\StructuralComparatorWeb\\\\src\\\\main\\\\java\\\\com\\\\imaginea\\\\assessor1\\\\JDTTester.java\")","lineNum":102,"name":"file","modifiers":[],"childDeclarations":{},"completeNodeValue":"File file\u003dnew File(\"F:\\\\Workspace\\\\StructuralComparatorWeb\\\\src\\\\main\\\\java\\\\com\\\\imaginea\\\\assessor1\\\\JDTTester.java\");\n"},{"type":"Scanner","value":"new Scanner(file)","lineNum":103,"name":"scanner","modifiers":[],"childDeclarations":{},"completeNodeValue":"Scanner scanner\u003dnew Scanner(file);\n"},{"value":"theString\u003dscanner.nextLine();\n","lineNum":104,"childDeclarations":{},"completeNodeValue":"theString\u003dscanner.nextLine();\n"},{"value":"while (scanner.hasNextLine()) theString\u003dtheString + \"\\n\" + scanner.nextLine();\n","lineNum":105,"childDeclarations":{},"completeNodeValue":"while (scanner.hasNextLine()) theString\u003dtheString + \"\\n\" + scanner.nextLine();\n"},{"type":"char[]","value":"theString.toCharArray()","lineNum":107,"name":"charArray","modifiers":[],"childDeclarations":{},"completeNodeValue":"char[] charArray\u003dtheString.toCharArray();\n"},{"value":"parser.setSource(charArray);\n","lineNum":109,"childDeclarations":{},"completeNodeValue":"parser.setSource(charArray);\n"},{"type":"Map","value":"JavaCore.getOptions()","lineNum":111,"name":"options","modifiers":[],"childDeclarations":{},"completeNodeValue":"Map options\u003dJavaCore.getOptions();\n"},{"value":"JavaCore.setComplianceOptions(JavaCore.VERSION_1_7,options);\n","lineNum":112,"childDeclarations":{},"completeNodeValue":"JavaCore.setComplianceOptions(JavaCore.VERSION_1_7,options);\n"},{"value":"parser.setCompilerOptions(options);\n","lineNum":113,"childDeclarations":{},"completeNodeValue":"parser.setCompilerOptions(options);\n"},{"type":"CompilationUnit","value":"(CompilationUnit)parser.createAST(null)","lineNum":115,"name":"result","modifiers":[],"childDeclarations":{},"completeNodeValue":"CompilationUnit result\u003d(CompilationUnit)parser.createAST(null);\n"},{"type":"Map","value":"result.properties()","lineNum":116,"name":"m","modifiers":[],"childDeclarations":{},"completeNodeValue":"Map m\u003dresult.properties();\n"},{"type":"Set","value":"m.keySet()","lineNum":117,"name":"s","modifiers":[],"childDeclarations":{},"completeNodeValue":"Set s\u003dm.keySet();\n"},{"value":"System.out.println(result + \"\\n\\n\\n\\n\\n\\n\\n----------------------\");\n","lineNum":119,"childDeclarations":{},"completeNodeValue":"System.out.println(result + \"\\n\\n\\n\\n\\n\\n\\n----------------------\");\n"},{"value":"for (Object ob : s) System.out.println(\"@@@\" + s.getClass());\n","lineNum":120,"childDeclarations":{},"completeNodeValue":"for (Object ob : s) System.out.println(\"@@@\" + s.getClass());\n"},{"value":"System.out.println(\"####### \" + result.getPackage().getName());\n","lineNum":122,"childDeclarations":{},"completeNodeValue":"System.out.println(\"####### \" + result.getPackage().getName());\n"},{"value":"System.out.println(result.imports().size());\n","lineNum":123,"childDeclarations":{},"completeNodeValue":"System.out.println(result.imports().size());\n"},{"value":"System.out.println(\"////####### \" + ((ImportDeclaration)result.imports().get(0)).getName());\n","lineNum":124,"childDeclarations":{},"completeNodeValue":"System.out.println(\"////####### \" + ((ImportDeclaration)result.imports().get(0)).getName());\n"},{"value":"System.out.println(\"////####### \" + ((ImportDeclaration)result.imports().get(1)).getName());\n","lineNum":125,"childDeclarations":{},"completeNodeValue":"System.out.println(\"////####### \" + ((ImportDeclaration)result.imports().get(1)).getName());\n"},{"value":"System.out.println(\"////####### \" + ((ImportDeclaration)result.imports().get(2)).getName());\n","lineNum":126,"childDeclarations":{},"completeNodeValue":"System.out.println(\"////####### \" + ((ImportDeclaration)result.imports().get(2)).getName());\n"},{"type":"ImportDeclaration","value":"(ImportDeclaration)result.imports().get(0)","lineNum":128,"name":"id","modifiers":[],"childDeclarations":{},"completeNodeValue":"ImportDeclaration id\u003d(ImportDeclaration)result.imports().get(0);\n"},{"value":"System.out.println(id.getStartPosition());\n","lineNum":129,"childDeclarations":{},"completeNodeValue":"System.out.println(id.getStartPosition());\n"},{"value":"System.out.println(result.getLineNumber(id.getStartPosition()));\n","lineNum":130,"childDeclarations":{},"completeNodeValue":"System.out.println(result.getLineNumber(id.getStartPosition()));\n"},{"value":"System.out.println(result.getPosition(result.getLineNumber(id.getStartPosition()),5));\n","lineNum":131,"childDeclarations":{},"completeNodeValue":"System.out.println(result.getPosition(result.getLineNumber(id.getStartPosition()),5));\n"},{"value":"System.out.println(result.properties().size());\n","lineNum":133,"childDeclarations":{},"completeNodeValue":"System.out.println(result.properties().size());\n"},{"value":"System.out.println(((ChildPropertyDescriptor)result.structuralPropertiesForType().get(0)).getId());\n","lineNum":134,"childDeclarations":{},"completeNodeValue":"System.out.println(((ChildPropertyDescriptor)result.structuralPropertiesForType().get(0)).getId());\n"},{"value":"System.out.println(((ChildListPropertyDescriptor)result.structuralPropertiesForType().get(2)).getId());\n","lineNum":135,"childDeclarations":{},"completeNodeValue":"System.out.println(((ChildListPropertyDescriptor)result.structuralPropertiesForType().get(2)).getId());\n"},{"value":"System.out.println(((ChildListPropertyDescriptor)result.structuralPropertiesForType().get(1)).getId());\n","lineNum":136,"childDeclarations":{},"completeNodeValue":"System.out.println(((ChildListPropertyDescriptor)result.structuralPropertiesForType().get(1)).getId());\n"},{"value":"System.out.println(result.structuralPropertiesForType().size());\n","lineNum":137,"childDeclarations":{},"completeNodeValue":"System.out.println(result.structuralPropertiesForType().size());\n"},{"value":"for (int i\u003d0; i \u003c result.getMessages().length; i++) System.out.println(((Message)result.getMessages()[i]).getMessage());\n","lineNum":138,"childDeclarations":{},"completeNodeValue":"for (int i\u003d0; i \u003c result.getMessages().length; i++) System.out.println(((Message)result.getMessages()[i]).getMessage());\n"},{"value":"System.out.println(result.types().size());\n","lineNum":140,"childDeclarations":{},"completeNodeValue":"System.out.println(result.types().size());\n"},{"value":"System.out.println(\"####### \" + result.types().get(0).getClass());\n","lineNum":141,"childDeclarations":{},"completeNodeValue":"System.out.println(\"####### \" + result.types().get(0).getClass());\n"},{"value":"System.out.println(\"------------------------------------\");\n","lineNum":147,"childDeclarations":{},"completeNodeValue":"System.out.println(\"------------------------------------\");\n"},{"value":"for (int i\u003d0; i \u003c result.types().size(); i++) {\n  if (result.types().get(i).getClass() \u003d\u003d org.eclipse.jdt.core.dom.TypeDeclaration.class) {\n    System.out.println(\"10\\t\" + ((TypeDeclaration)result.types().get(i)).getName());\n    List lst\u003d((TypeDeclaration)result.types().get(i)).bodyDeclarations();\n    for (    Object map : lst) {\n      if (map !\u003d null) {\n        System.out.println(\"***\" + map.getClass());\n        if (map.getClass() \u003d\u003d FieldDeclaration.class) {\n          System.out.println(((FieldDeclaration)map).toString());\n          System.out.println(((FieldDeclaration)map).getType());\n          System.out.println(((FieldDeclaration)map).fragments().size());\n          System.out.println(((VariableDeclarationFragment)((FieldDeclaration)map).fragments().get(0)).getName());\n          System.out.println(((VariableDeclarationFragment)((FieldDeclaration)map).fragments().get(0)).getInitializer());\n        }\n      }\n    }\n  }\n else   if (result.types().get(i).getClass() \u003d\u003d org.eclipse.jdt.core.dom.EnumDeclaration.class)   System.out.println(((org.eclipse.jdt.core.dom.EnumDeclaration)result.types().get(i)).getName());\n}\n","lineNum":148,"childDeclarations":{},"completeNodeValue":"for (int i\u003d0; i \u003c result.types().size(); i++) {\n  if (result.types().get(i).getClass() \u003d\u003d org.eclipse.jdt.core.dom.TypeDeclaration.class) {\n    System.out.println(\"10\\t\" + ((TypeDeclaration)result.types().get(i)).getName());\n    List lst\u003d((TypeDeclaration)result.types().get(i)).bodyDeclarations();\n    for (    Object map : lst) {\n      if (map !\u003d null) {\n        System.out.println(\"***\" + map.getClass());\n        if (map.getClass() \u003d\u003d FieldDeclaration.class) {\n          System.out.println(((FieldDeclaration)map).toString());\n          System.out.println(((FieldDeclaration)map).getType());\n          System.out.println(((FieldDeclaration)map).fragments().size());\n          System.out.println(((VariableDeclarationFragment)((FieldDeclaration)map).fragments().get(0)).getName());\n          System.out.println(((VariableDeclarationFragment)((FieldDeclaration)map).fragments().get(0)).getInitializer());\n        }\n      }\n    }\n  }\n else   if (result.types().get(i).getClass() \u003d\u003d org.eclipse.jdt.core.dom.EnumDeclaration.class)   System.out.println(((org.eclipse.jdt.core.dom.EnumDeclaration)result.types().get(i)).getName());\n}\n"},{"value":"System.out.println(((EnumConstantDeclaration)((EnumDeclaration)result.types().get(1)).enumConstants().get(0)).getName());\n","lineNum":170,"childDeclarations":{},"completeNodeValue":"System.out.println(((EnumConstantDeclaration)((EnumDeclaration)result.types().get(1)).enumConstants().get(0)).getName());\n"},{"value":"System.out.println(((EnumConstantDeclaration)((EnumDeclaration)result.types().get(1)).enumConstants().get(0)).toString());\n","lineNum":171,"childDeclarations":{},"completeNodeValue":"System.out.println(((EnumConstantDeclaration)((EnumDeclaration)result.types().get(1)).enumConstants().get(0)).toString());\n"},{"value":"System.out.println(\"^^^^^^\" + ((TypeDeclaration)result.types().get(0)).getMethods()[0].getName().toString());\n","lineNum":172,"childDeclarations":{},"completeNodeValue":"System.out.println(\"^^^^^^\" + ((TypeDeclaration)result.types().get(0)).getMethods()[0].getName().toString());\n"},{"value":"System.out.println(\"^^^^^^\" + ((SingleVariableDeclaration)((TypeDeclaration)result.types().get(0)).getMethods()[0].parameters().get(0)).toString());\n","lineNum":173,"childDeclarations":{},"completeNodeValue":"System.out.println(\"^^^^^^\" + ((SingleVariableDeclaration)((TypeDeclaration)result.types().get(0)).getMethods()[0].parameters().get(0)).toString());\n"},{"value":"System.out.println(\"^^^^^^\" + (((TypeDeclaration)result.types().get(0)).getMethods()[0].getReturnType2().toString()));\n","lineNum":174,"childDeclarations":{},"completeNodeValue":"System.out.println(\"^^^^^^\" + (((TypeDeclaration)result.types().get(0)).getMethods()[0].getReturnType2().toString()));\n"},{"value":"System.out.println(\"^^^^^^\" + ((Name)((TypeDeclaration)result.types().get(0)).getMethods()[0].thrownExceptions().get(0)));\n","lineNum":175,"childDeclarations":{},"completeNodeValue":"System.out.println(\"^^^^^^\" + ((Name)((TypeDeclaration)result.types().get(0)).getMethods()[0].thrownExceptions().get(0)));\n"},{"value":"System.out.println(\"^^^^^^\" + ((Name)((TypeDeclaration)result.types().get(0)).getMethods()[0].thrownExceptions().get(1)));\n","lineNum":176,"childDeclarations":{},"completeNodeValue":"System.out.println(\"^^^^^^\" + ((Name)((TypeDeclaration)result.types().get(0)).getMethods()[0].thrownExceptions().get(1)));\n"},{"value":"System.out.println(((TypeDeclaration)result.types().get(0)).modifiers().get(0));\n","lineNum":177,"childDeclarations":{},"completeNodeValue":"System.out.println(((TypeDeclaration)result.types().get(0)).modifiers().get(0));\n"},{"value":"for (Object obj : (((TypeDeclaration)result.types().get(0)).getMethods()[0]).getBody().statements()) System.out.println(\"XXXX___ \" + obj.toString());\n","lineNum":179,"childDeclarations":{},"completeNodeValue":"for (Object obj : (((TypeDeclaration)result.types().get(0)).getMethods()[0]).getBody().statements()) System.out.println(\"XXXX___ \" + obj.toString());\n"},{"value":"System.out.println(\"^^^^^^\" + ((SingleVariableDeclaration)((TypeDeclaration)result.types().get(0)).getMethods()[0].parameters().get(0)).toString());\n","lineNum":181,"childDeclarations":{},"completeNodeValue":"System.out.println(\"^^^^^^\" + ((SingleVariableDeclaration)((TypeDeclaration)result.types().get(0)).getMethods()[0].parameters().get(0)).toString());\n"},{"type":"String","value":"\"@SuppressWarnings(\\\"unchecked\\\") public static void main(String[] args) throws FileNotFoundException {\\n\" + \"  int i\u003d0;\\n\" + \"  String sourceed\u003d\\\"class Bob {/*asas*/}/**asd*/\\\\n\\\" + \\\"apple\\\" + \\\"dummy\\\" + i + \\\"uska mummy\\\";\\n\"+ \"  String sourcee\u003d\\\"class Bob {/*asas*/}/**asd*/\\\\n\\\";\\n\"+ \"  String source\u003d\\\"class Bob {/*asas*/}/**asd*/\\\";\\n\"+ \"  ASTParser parser\u003dASTParser.newParser(AST.JLS3);\\n\"+ \"class z {\\n  }\\n\"+ \"  parser.setSource(sourceed.toCharArray());\\n\"+ \"  CompilationUnit result\u003d(CompilationUnit)parser.createAST(null);\\n\"+ \"  System.out.println(((Class\u003cBlockComment\u003e)result.getCommentList().get(0).getClass()).getName());\\n\"+ \"  System.out.println(result.getLength());\\n\"+ \"  System.out.println(result.toString());\\n\"+ \"  String source2\u003d\\\"class Bob {public void MyMethod(){}}\\\";\\n\"+ \"  ASTParser parser2\u003dASTParser.newParser(AST.JLS3);\\n\"+ \"  parser2.setSource(source2.toCharArray());\\n\"+ \"  CompilationUnit result2\u003d(CompilationUnit)parser2.createAST(null);\\n\"+ \"  System.out.println(result2);\\n\"+ \"  System.out.println(result2.getLength());\\n\"+ \"  System.out.println(result2.toString());\\n\"+ \"  just();\\n\"+ \"}\\n\"","lineNum":184,"name":"test","modifiers":[],"childDeclarations":{},"completeNodeValue":"String test\u003d\"@SuppressWarnings(\\\"unchecked\\\") public static void main(String[] args) throws FileNotFoundException {\\n\" + \"  int i\u003d0;\\n\" + \"  String sourceed\u003d\\\"class Bob {/*asas*/}/**asd*/\\\\n\\\" + \\\"apple\\\" + \\\"dummy\\\" + i + \\\"uska mummy\\\";\\n\"+ \"  String sourcee\u003d\\\"class Bob {/*asas*/}/**asd*/\\\\n\\\";\\n\"+ \"  String source\u003d\\\"class Bob {/*asas*/}/**asd*/\\\";\\n\"+ \"  ASTParser parser\u003dASTParser.newParser(AST.JLS3);\\n\"+ \"class z {\\n  }\\n\"+ \"  parser.setSource(sourceed.toCharArray());\\n\"+ \"  CompilationUnit result\u003d(CompilationUnit)parser.createAST(null);\\n\"+ \"  System.out.println(((Class\u003cBlockComment\u003e)result.getCommentList().get(0).getClass()).getName());\\n\"+ \"  System.out.println(result.getLength());\\n\"+ \"  System.out.println(result.toString());\\n\"+ \"  String source2\u003d\\\"class Bob {public void MyMethod(){}}\\\";\\n\"+ \"  ASTParser parser2\u003dASTParser.newParser(AST.JLS3);\\n\"+ \"  parser2.setSource(source2.toCharArray());\\n\"+ \"  CompilationUnit result2\u003d(CompilationUnit)parser2.createAST(null);\\n\"+ \"  System.out.println(result2);\\n\"+ \"  System.out.println(result2.getLength());\\n\"+ \"  System.out.println(result2.toString());\\n\"+ \"  just();\\n\"+ \"}\\n\";\n"},{"value":"System.out.println(\"\\n\\n\\n\" + test);\n","lineNum":198,"childDeclarations":{},"completeNodeValue":"System.out.println(\"\\n\\n\\n\" + test);\n"}],"lineNum":92,"name":"just","modifiers":["static"],"childDeclarations":{},"completeNodeValue":"static void just() throws FileNotFoundException {\n  ASTParser parser\u003dASTParser.newParser(AST.JLS3);\nclass met {\n    void tert(){\n      System.out.println();\n    }\n  }\n  String theString\u003d\"\";\n  File file\u003dnew File(\"F:\\\\Workspace\\\\StructuralComparatorWeb\\\\src\\\\main\\\\java\\\\com\\\\imaginea\\\\assessor1\\\\JDTTester.java\");\n  Scanner scanner\u003dnew Scanner(file);\n  theString\u003dscanner.nextLine();\n  while (scanner.hasNextLine())   theString\u003dtheString + \"\\n\" + scanner.nextLine();\n  char[] charArray\u003dtheString.toCharArray();\n  parser.setSource(charArray);\n  Map options\u003dJavaCore.getOptions();\n  JavaCore.setComplianceOptions(JavaCore.VERSION_1_7,options);\n  parser.setCompilerOptions(options);\n  CompilationUnit result\u003d(CompilationUnit)parser.createAST(null);\n  Map m\u003dresult.properties();\n  Set s\u003dm.keySet();\n  System.out.println(result + \"\\n\\n\\n\\n\\n\\n\\n----------------------\");\n  for (  Object ob : s)   System.out.println(\"@@@\" + s.getClass());\n  System.out.println(\"####### \" + result.getPackage().getName());\n  System.out.println(result.imports().size());\n  System.out.println(\"////####### \" + ((ImportDeclaration)result.imports().get(0)).getName());\n  System.out.println(\"////####### \" + ((ImportDeclaration)result.imports().get(1)).getName());\n  System.out.println(\"////####### \" + ((ImportDeclaration)result.imports().get(2)).getName());\n  ImportDeclaration id\u003d(ImportDeclaration)result.imports().get(0);\n  System.out.println(id.getStartPosition());\n  System.out.println(result.getLineNumber(id.getStartPosition()));\n  System.out.println(result.getPosition(result.getLineNumber(id.getStartPosition()),5));\n  System.out.println(result.properties().size());\n  System.out.println(((ChildPropertyDescriptor)result.structuralPropertiesForType().get(0)).getId());\n  System.out.println(((ChildListPropertyDescriptor)result.structuralPropertiesForType().get(2)).getId());\n  System.out.println(((ChildListPropertyDescriptor)result.structuralPropertiesForType().get(1)).getId());\n  System.out.println(result.structuralPropertiesForType().size());\n  for (int i\u003d0; i \u003c result.getMessages().length; i++)   System.out.println(((Message)result.getMessages()[i]).getMessage());\n  System.out.println(result.types().size());\n  System.out.println(\"####### \" + result.types().get(0).getClass());\n  System.out.println(\"------------------------------------\");\n  for (int i\u003d0; i \u003c result.types().size(); i++) {\n    if (result.types().get(i).getClass() \u003d\u003d org.eclipse.jdt.core.dom.TypeDeclaration.class) {\n      System.out.println(\"10\\t\" + ((TypeDeclaration)result.types().get(i)).getName());\n      List lst\u003d((TypeDeclaration)result.types().get(i)).bodyDeclarations();\n      for (      Object map : lst) {\n        if (map !\u003d null) {\n          System.out.println(\"***\" + map.getClass());\n          if (map.getClass() \u003d\u003d FieldDeclaration.class) {\n            System.out.println(((FieldDeclaration)map).toString());\n            System.out.println(((FieldDeclaration)map).getType());\n            System.out.println(((FieldDeclaration)map).fragments().size());\n            System.out.println(((VariableDeclarationFragment)((FieldDeclaration)map).fragments().get(0)).getName());\n            System.out.println(((VariableDeclarationFragment)((FieldDeclaration)map).fragments().get(0)).getInitializer());\n          }\n        }\n      }\n    }\n else     if (result.types().get(i).getClass() \u003d\u003d org.eclipse.jdt.core.dom.EnumDeclaration.class)     System.out.println(((org.eclipse.jdt.core.dom.EnumDeclaration)result.types().get(i)).getName());\n  }\n  System.out.println(((EnumConstantDeclaration)((EnumDeclaration)result.types().get(1)).enumConstants().get(0)).getName());\n  System.out.println(((EnumConstantDeclaration)((EnumDeclaration)result.types().get(1)).enumConstants().get(0)).toString());\n  System.out.println(\"^^^^^^\" + ((TypeDeclaration)result.types().get(0)).getMethods()[0].getName().toString());\n  System.out.println(\"^^^^^^\" + ((SingleVariableDeclaration)((TypeDeclaration)result.types().get(0)).getMethods()[0].parameters().get(0)).toString());\n  System.out.println(\"^^^^^^\" + (((TypeDeclaration)result.types().get(0)).getMethods()[0].getReturnType2().toString()));\n  System.out.println(\"^^^^^^\" + ((Name)((TypeDeclaration)result.types().get(0)).getMethods()[0].thrownExceptions().get(0)));\n  System.out.println(\"^^^^^^\" + ((Name)((TypeDeclaration)result.types().get(0)).getMethods()[0].thrownExceptions().get(1)));\n  System.out.println(((TypeDeclaration)result.types().get(0)).modifiers().get(0));\n  for (  Object obj : (((TypeDeclaration)result.types().get(0)).getMethods()[0]).getBody().statements())   System.out.println(\"XXXX___ \" + obj.toString());\n  System.out.println(\"^^^^^^\" + ((SingleVariableDeclaration)((TypeDeclaration)result.types().get(0)).getMethods()[0].parameters().get(0)).toString());\n  String test\u003d\"@SuppressWarnings(\\\"unchecked\\\") public static void main(String[] args) throws FileNotFoundException {\\n\" + \"  int i\u003d0;\\n\" + \"  String sourceed\u003d\\\"class Bob {/*asas*/}/**asd*/\\\\n\\\" + \\\"apple\\\" + \\\"dummy\\\" + i + \\\"uska mummy\\\";\\n\"+ \"  String sourcee\u003d\\\"class Bob {/*asas*/}/**asd*/\\\\n\\\";\\n\"+ \"  String source\u003d\\\"class Bob {/*asas*/}/**asd*/\\\";\\n\"+ \"  ASTParser parser\u003dASTParser.newParser(AST.JLS3);\\n\"+ \"class z {\\n  }\\n\"+ \"  parser.setSource(sourceed.toCharArray());\\n\"+ \"  CompilationUnit result\u003d(CompilationUnit)parser.createAST(null);\\n\"+ \"  System.out.println(((Class\u003cBlockComment\u003e)result.getCommentList().get(0).getClass()).getName());\\n\"+ \"  System.out.println(result.getLength());\\n\"+ \"  System.out.println(result.toString());\\n\"+ \"  String source2\u003d\\\"class Bob {public void MyMethod(){}}\\\";\\n\"+ \"  ASTParser parser2\u003dASTParser.newParser(AST.JLS3);\\n\"+ \"  parser2.setSource(source2.toCharArray());\\n\"+ \"  CompilationUnit result2\u003d(CompilationUnit)parser2.createAST(null);\\n\"+ \"  System.out.println(result2);\\n\"+ \"  System.out.println(result2.getLength());\\n\"+ \"  System.out.println(result2.toString());\\n\"+ \"  just();\\n\"+ \"}\\n\";\n  System.out.println(\"\\n\\n\\n\" + test);\n}\n"}],"commonChilds":[{"diff":-1,"declarations":[null,{"type":"ASTParser","value":"ASTParser.newParser(AST.JLS3)","lineNum":93,"name":"parser","modifiers":[],"childDeclarations":{},"completeNodeValue":"ASTParser parser\u003dASTParser.newParser(AST.JLS3);\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"isInterface":false,"superClass":"","superInterfacelist":[],"bodyDeclarations":[],"lineNum":95,"name":"met","modifiers":[],"childDeclarations":{"tert_Method":{"isConstructor":false,"returnType":"void","parameters":"","thrownExceptions":[],"blockofStatements":[{"value":"System.out.println();\n","lineNum":97,"childDeclarations":{},"completeNodeValue":"System.out.println();\n"}],"lineNum":96,"name":"tert","modifiers":[],"childDeclarations":{},"completeNodeValue":"void tert(){\n  System.out.println();\n}\n"}},"completeNodeValue":"class met {\n  void tert(){\n    System.out.println();\n  }\n}\n"}],"commonChilds":[{"diff":-1,"declarations":[null,{"isConstructor":false,"returnType":"void","parameters":"","thrownExceptions":[],"blockofStatements":[{"value":"System.out.println();\n","lineNum":97,"childDeclarations":{},"completeNodeValue":"System.out.println();\n"}],"lineNum":96,"name":"tert","modifiers":[],"childDeclarations":{},"completeNodeValue":"void tert(){\n  System.out.println();\n}\n"}],"commonChilds":[{"diff":-1,"declarations":[null,{"value":"System.out.println();\n","lineNum":97,"childDeclarations":{},"completeNodeValue":"System.out.println();\n"}],"commonChilds":[]}]}]},{"diff":-1,"declarations":[null,{"type":"String","value":"\"\"","lineNum":101,"name":"theString","modifiers":[],"childDeclarations":{},"completeNodeValue":"String theString\u003d\"\";\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"type":"File","value":"new File(\"F:\\\\Workspace\\\\StructuralComparatorWeb\\\\src\\\\main\\\\java\\\\com\\\\imaginea\\\\assessor1\\\\JDTTester.java\")","lineNum":102,"name":"file","modifiers":[],"childDeclarations":{},"completeNodeValue":"File file\u003dnew File(\"F:\\\\Workspace\\\\StructuralComparatorWeb\\\\src\\\\main\\\\java\\\\com\\\\imaginea\\\\assessor1\\\\JDTTester.java\");\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"type":"Scanner","value":"new Scanner(file)","lineNum":103,"name":"scanner","modifiers":[],"childDeclarations":{},"completeNodeValue":"Scanner scanner\u003dnew Scanner(file);\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"value":"theString\u003dscanner.nextLine();\n","lineNum":104,"childDeclarations":{},"completeNodeValue":"theString\u003dscanner.nextLine();\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"value":"while (scanner.hasNextLine()) theString\u003dtheString + \"\\n\" + scanner.nextLine();\n","lineNum":105,"childDeclarations":{},"completeNodeValue":"while (scanner.hasNextLine()) theString\u003dtheString + \"\\n\" + scanner.nextLine();\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"type":"char[]","value":"theString.toCharArray()","lineNum":107,"name":"charArray","modifiers":[],"childDeclarations":{},"completeNodeValue":"char[] charArray\u003dtheString.toCharArray();\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"value":"parser.setSource(charArray);\n","lineNum":109,"childDeclarations":{},"completeNodeValue":"parser.setSource(charArray);\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"type":"Map","value":"JavaCore.getOptions()","lineNum":111,"name":"options","modifiers":[],"childDeclarations":{},"completeNodeValue":"Map options\u003dJavaCore.getOptions();\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"value":"JavaCore.setComplianceOptions(JavaCore.VERSION_1_7,options);\n","lineNum":112,"childDeclarations":{},"completeNodeValue":"JavaCore.setComplianceOptions(JavaCore.VERSION_1_7,options);\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"value":"parser.setCompilerOptions(options);\n","lineNum":113,"childDeclarations":{},"completeNodeValue":"parser.setCompilerOptions(options);\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"type":"CompilationUnit","value":"(CompilationUnit)parser.createAST(null)","lineNum":115,"name":"result","modifiers":[],"childDeclarations":{},"completeNodeValue":"CompilationUnit result\u003d(CompilationUnit)parser.createAST(null);\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"type":"Map","value":"result.properties()","lineNum":116,"name":"m","modifiers":[],"childDeclarations":{},"completeNodeValue":"Map m\u003dresult.properties();\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"type":"Set","value":"m.keySet()","lineNum":117,"name":"s","modifiers":[],"childDeclarations":{},"completeNodeValue":"Set s\u003dm.keySet();\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"value":"System.out.println(result + \"\\n\\n\\n\\n\\n\\n\\n----------------------\");\n","lineNum":119,"childDeclarations":{},"completeNodeValue":"System.out.println(result + \"\\n\\n\\n\\n\\n\\n\\n----------------------\");\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"value":"for (Object ob : s) System.out.println(\"@@@\" + s.getClass());\n","lineNum":120,"childDeclarations":{},"completeNodeValue":"for (Object ob : s) System.out.println(\"@@@\" + s.getClass());\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"value":"System.out.println(\"####### \" + result.getPackage().getName());\n","lineNum":122,"childDeclarations":{},"completeNodeValue":"System.out.println(\"####### \" + result.getPackage().getName());\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"value":"System.out.println(result.imports().size());\n","lineNum":123,"childDeclarations":{},"completeNodeValue":"System.out.println(result.imports().size());\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"value":"System.out.println(\"////####### \" + ((ImportDeclaration)result.imports().get(0)).getName());\n","lineNum":124,"childDeclarations":{},"completeNodeValue":"System.out.println(\"////####### \" + ((ImportDeclaration)result.imports().get(0)).getName());\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"value":"System.out.println(\"////####### \" + ((ImportDeclaration)result.imports().get(1)).getName());\n","lineNum":125,"childDeclarations":{},"completeNodeValue":"System.out.println(\"////####### \" + ((ImportDeclaration)result.imports().get(1)).getName());\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"value":"System.out.println(\"////####### \" + ((ImportDeclaration)result.imports().get(2)).getName());\n","lineNum":126,"childDeclarations":{},"completeNodeValue":"System.out.println(\"////####### \" + ((ImportDeclaration)result.imports().get(2)).getName());\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"type":"ImportDeclaration","value":"(ImportDeclaration)result.imports().get(0)","lineNum":128,"name":"id","modifiers":[],"childDeclarations":{},"completeNodeValue":"ImportDeclaration id\u003d(ImportDeclaration)result.imports().get(0);\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"value":"System.out.println(id.getStartPosition());\n","lineNum":129,"childDeclarations":{},"completeNodeValue":"System.out.println(id.getStartPosition());\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"value":"System.out.println(result.getLineNumber(id.getStartPosition()));\n","lineNum":130,"childDeclarations":{},"completeNodeValue":"System.out.println(result.getLineNumber(id.getStartPosition()));\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"value":"System.out.println(result.getPosition(result.getLineNumber(id.getStartPosition()),5));\n","lineNum":131,"childDeclarations":{},"completeNodeValue":"System.out.println(result.getPosition(result.getLineNumber(id.getStartPosition()),5));\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"value":"System.out.println(result.properties().size());\n","lineNum":133,"childDeclarations":{},"completeNodeValue":"System.out.println(result.properties().size());\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"value":"System.out.println(((ChildPropertyDescriptor)result.structuralPropertiesForType().get(0)).getId());\n","lineNum":134,"childDeclarations":{},"completeNodeValue":"System.out.println(((ChildPropertyDescriptor)result.structuralPropertiesForType().get(0)).getId());\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"value":"System.out.println(((ChildListPropertyDescriptor)result.structuralPropertiesForType().get(2)).getId());\n","lineNum":135,"childDeclarations":{},"completeNodeValue":"System.out.println(((ChildListPropertyDescriptor)result.structuralPropertiesForType().get(2)).getId());\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"value":"System.out.println(((ChildListPropertyDescriptor)result.structuralPropertiesForType().get(1)).getId());\n","lineNum":136,"childDeclarations":{},"completeNodeValue":"System.out.println(((ChildListPropertyDescriptor)result.structuralPropertiesForType().get(1)).getId());\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"value":"System.out.println(result.structuralPropertiesForType().size());\n","lineNum":137,"childDeclarations":{},"completeNodeValue":"System.out.println(result.structuralPropertiesForType().size());\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"value":"for (int i\u003d0; i \u003c result.getMessages().length; i++) System.out.println(((Message)result.getMessages()[i]).getMessage());\n","lineNum":138,"childDeclarations":{},"completeNodeValue":"for (int i\u003d0; i \u003c result.getMessages().length; i++) System.out.println(((Message)result.getMessages()[i]).getMessage());\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"value":"System.out.println(result.types().size());\n","lineNum":140,"childDeclarations":{},"completeNodeValue":"System.out.println(result.types().size());\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"value":"System.out.println(\"####### \" + result.types().get(0).getClass());\n","lineNum":141,"childDeclarations":{},"completeNodeValue":"System.out.println(\"####### \" + result.types().get(0).getClass());\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"value":"System.out.println(\"------------------------------------\");\n","lineNum":147,"childDeclarations":{},"completeNodeValue":"System.out.println(\"------------------------------------\");\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"value":"for (int i\u003d0; i \u003c result.types().size(); i++) {\n  if (result.types().get(i).getClass() \u003d\u003d org.eclipse.jdt.core.dom.TypeDeclaration.class) {\n    System.out.println(\"10\\t\" + ((TypeDeclaration)result.types().get(i)).getName());\n    List lst\u003d((TypeDeclaration)result.types().get(i)).bodyDeclarations();\n    for (    Object map : lst) {\n      if (map !\u003d null) {\n        System.out.println(\"***\" + map.getClass());\n        if (map.getClass() \u003d\u003d FieldDeclaration.class) {\n          System.out.println(((FieldDeclaration)map).toString());\n          System.out.println(((FieldDeclaration)map).getType());\n          System.out.println(((FieldDeclaration)map).fragments().size());\n          System.out.println(((VariableDeclarationFragment)((FieldDeclaration)map).fragments().get(0)).getName());\n          System.out.println(((VariableDeclarationFragment)((FieldDeclaration)map).fragments().get(0)).getInitializer());\n        }\n      }\n    }\n  }\n else   if (result.types().get(i).getClass() \u003d\u003d org.eclipse.jdt.core.dom.EnumDeclaration.class)   System.out.println(((org.eclipse.jdt.core.dom.EnumDeclaration)result.types().get(i)).getName());\n}\n","lineNum":148,"childDeclarations":{},"completeNodeValue":"for (int i\u003d0; i \u003c result.types().size(); i++) {\n  if (result.types().get(i).getClass() \u003d\u003d org.eclipse.jdt.core.dom.TypeDeclaration.class) {\n    System.out.println(\"10\\t\" + ((TypeDeclaration)result.types().get(i)).getName());\n    List lst\u003d((TypeDeclaration)result.types().get(i)).bodyDeclarations();\n    for (    Object map : lst) {\n      if (map !\u003d null) {\n        System.out.println(\"***\" + map.getClass());\n        if (map.getClass() \u003d\u003d FieldDeclaration.class) {\n          System.out.println(((FieldDeclaration)map).toString());\n          System.out.println(((FieldDeclaration)map).getType());\n          System.out.println(((FieldDeclaration)map).fragments().size());\n          System.out.println(((VariableDeclarationFragment)((FieldDeclaration)map).fragments().get(0)).getName());\n          System.out.println(((VariableDeclarationFragment)((FieldDeclaration)map).fragments().get(0)).getInitializer());\n        }\n      }\n    }\n  }\n else   if (result.types().get(i).getClass() \u003d\u003d org.eclipse.jdt.core.dom.EnumDeclaration.class)   System.out.println(((org.eclipse.jdt.core.dom.EnumDeclaration)result.types().get(i)).getName());\n}\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"value":"System.out.println(((EnumConstantDeclaration)((EnumDeclaration)result.types().get(1)).enumConstants().get(0)).getName());\n","lineNum":170,"childDeclarations":{},"completeNodeValue":"System.out.println(((EnumConstantDeclaration)((EnumDeclaration)result.types().get(1)).enumConstants().get(0)).getName());\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"value":"System.out.println(((EnumConstantDeclaration)((EnumDeclaration)result.types().get(1)).enumConstants().get(0)).toString());\n","lineNum":171,"childDeclarations":{},"completeNodeValue":"System.out.println(((EnumConstantDeclaration)((EnumDeclaration)result.types().get(1)).enumConstants().get(0)).toString());\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"value":"System.out.println(\"^^^^^^\" + ((TypeDeclaration)result.types().get(0)).getMethods()[0].getName().toString());\n","lineNum":172,"childDeclarations":{},"completeNodeValue":"System.out.println(\"^^^^^^\" + ((TypeDeclaration)result.types().get(0)).getMethods()[0].getName().toString());\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"value":"System.out.println(\"^^^^^^\" + ((SingleVariableDeclaration)((TypeDeclaration)result.types().get(0)).getMethods()[0].parameters().get(0)).toString());\n","lineNum":173,"childDeclarations":{},"completeNodeValue":"System.out.println(\"^^^^^^\" + ((SingleVariableDeclaration)((TypeDeclaration)result.types().get(0)).getMethods()[0].parameters().get(0)).toString());\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"value":"System.out.println(\"^^^^^^\" + (((TypeDeclaration)result.types().get(0)).getMethods()[0].getReturnType2().toString()));\n","lineNum":174,"childDeclarations":{},"completeNodeValue":"System.out.println(\"^^^^^^\" + (((TypeDeclaration)result.types().get(0)).getMethods()[0].getReturnType2().toString()));\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"value":"System.out.println(\"^^^^^^\" + ((Name)((TypeDeclaration)result.types().get(0)).getMethods()[0].thrownExceptions().get(0)));\n","lineNum":175,"childDeclarations":{},"completeNodeValue":"System.out.println(\"^^^^^^\" + ((Name)((TypeDeclaration)result.types().get(0)).getMethods()[0].thrownExceptions().get(0)));\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"value":"System.out.println(\"^^^^^^\" + ((Name)((TypeDeclaration)result.types().get(0)).getMethods()[0].thrownExceptions().get(1)));\n","lineNum":176,"childDeclarations":{},"completeNodeValue":"System.out.println(\"^^^^^^\" + ((Name)((TypeDeclaration)result.types().get(0)).getMethods()[0].thrownExceptions().get(1)));\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"value":"System.out.println(((TypeDeclaration)result.types().get(0)).modifiers().get(0));\n","lineNum":177,"childDeclarations":{},"completeNodeValue":"System.out.println(((TypeDeclaration)result.types().get(0)).modifiers().get(0));\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"value":"for (Object obj : (((TypeDeclaration)result.types().get(0)).getMethods()[0]).getBody().statements()) System.out.println(\"XXXX___ \" + obj.toString());\n","lineNum":179,"childDeclarations":{},"completeNodeValue":"for (Object obj : (((TypeDeclaration)result.types().get(0)).getMethods()[0]).getBody().statements()) System.out.println(\"XXXX___ \" + obj.toString());\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"value":"System.out.println(\"^^^^^^\" + ((SingleVariableDeclaration)((TypeDeclaration)result.types().get(0)).getMethods()[0].parameters().get(0)).toString());\n","lineNum":181,"childDeclarations":{},"completeNodeValue":"System.out.println(\"^^^^^^\" + ((SingleVariableDeclaration)((TypeDeclaration)result.types().get(0)).getMethods()[0].parameters().get(0)).toString());\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"type":"String","value":"\"@SuppressWarnings(\\\"unchecked\\\") public static void main(String[] args) throws FileNotFoundException {\\n\" + \"  int i\u003d0;\\n\" + \"  String sourceed\u003d\\\"class Bob {/*asas*/}/**asd*/\\\\n\\\" + \\\"apple\\\" + \\\"dummy\\\" + i + \\\"uska mummy\\\";\\n\"+ \"  String sourcee\u003d\\\"class Bob {/*asas*/}/**asd*/\\\\n\\\";\\n\"+ \"  String source\u003d\\\"class Bob {/*asas*/}/**asd*/\\\";\\n\"+ \"  ASTParser parser\u003dASTParser.newParser(AST.JLS3);\\n\"+ \"class z {\\n  }\\n\"+ \"  parser.setSource(sourceed.toCharArray());\\n\"+ \"  CompilationUnit result\u003d(CompilationUnit)parser.createAST(null);\\n\"+ \"  System.out.println(((Class\u003cBlockComment\u003e)result.getCommentList().get(0).getClass()).getName());\\n\"+ \"  System.out.println(result.getLength());\\n\"+ \"  System.out.println(result.toString());\\n\"+ \"  String source2\u003d\\\"class Bob {public void MyMethod(){}}\\\";\\n\"+ \"  ASTParser parser2\u003dASTParser.newParser(AST.JLS3);\\n\"+ \"  parser2.setSource(source2.toCharArray());\\n\"+ \"  CompilationUnit result2\u003d(CompilationUnit)parser2.createAST(null);\\n\"+ \"  System.out.println(result2);\\n\"+ \"  System.out.println(result2.getLength());\\n\"+ \"  System.out.println(result2.toString());\\n\"+ \"  just();\\n\"+ \"}\\n\"","lineNum":184,"name":"test","modifiers":[],"childDeclarations":{},"completeNodeValue":"String test\u003d\"@SuppressWarnings(\\\"unchecked\\\") public static void main(String[] args) throws FileNotFoundException {\\n\" + \"  int i\u003d0;\\n\" + \"  String sourceed\u003d\\\"class Bob {/*asas*/}/**asd*/\\\\n\\\" + \\\"apple\\\" + \\\"dummy\\\" + i + \\\"uska mummy\\\";\\n\"+ \"  String sourcee\u003d\\\"class Bob {/*asas*/}/**asd*/\\\\n\\\";\\n\"+ \"  String source\u003d\\\"class Bob {/*asas*/}/**asd*/\\\";\\n\"+ \"  ASTParser parser\u003dASTParser.newParser(AST.JLS3);\\n\"+ \"class z {\\n  }\\n\"+ \"  parser.setSource(sourceed.toCharArray());\\n\"+ \"  CompilationUnit result\u003d(CompilationUnit)parser.createAST(null);\\n\"+ \"  System.out.println(((Class\u003cBlockComment\u003e)result.getCommentList().get(0).getClass()).getName());\\n\"+ \"  System.out.println(result.getLength());\\n\"+ \"  System.out.println(result.toString());\\n\"+ \"  String source2\u003d\\\"class Bob {public void MyMethod(){}}\\\";\\n\"+ \"  ASTParser parser2\u003dASTParser.newParser(AST.JLS3);\\n\"+ \"  parser2.setSource(source2.toCharArray());\\n\"+ \"  CompilationUnit result2\u003d(CompilationUnit)parser2.createAST(null);\\n\"+ \"  System.out.println(result2);\\n\"+ \"  System.out.println(result2.getLength());\\n\"+ \"  System.out.println(result2.toString());\\n\"+ \"  just();\\n\"+ \"}\\n\";\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"value":"System.out.println(\"\\n\\n\\n\" + test);\n","lineNum":198,"childDeclarations":{},"completeNodeValue":"System.out.println(\"\\n\\n\\n\" + test);\n"}],"commonChilds":[]}]},{"diff":-1,"declarations":[null,{"isInterface":false,"superClass":"","superInterfacelist":[],"bodyDeclarations":[],"lineNum":42,"name":"z","modifiers":["public"],"childDeclarations":{},"completeNodeValue":"public class z {\n}\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"isConstructor":false,"returnType":"void","parameters":"","thrownExceptions":["FileNotFoundException"],"blockofStatements":[{"type":"ASTParser","value":"ASTParser.newParser(AST.JLS3)","lineNum":207,"name":"parser","modifiers":[],"childDeclarations":{},"completeNodeValue":"ASTParser parser\u003dASTParser.newParser(AST.JLS3);\n"},{"type":"String","value":"\"\"","lineNum":209,"name":"theString","modifiers":[],"childDeclarations":{},"completeNodeValue":"String theString\u003d\"\";\n"},{"type":"File","value":"new File(\"F:\\\\Workspace\\\\StructuralComparatorWeb\\\\src\\\\main\\\\java\\\\com\\\\imaginea\\\\assessor1\\\\JDTTester.java\")","lineNum":210,"name":"file","modifiers":[],"childDeclarations":{},"completeNodeValue":"File file\u003dnew File(\"F:\\\\Workspace\\\\StructuralComparatorWeb\\\\src\\\\main\\\\java\\\\com\\\\imaginea\\\\assessor1\\\\JDTTester.java\");\n"},{"type":"Scanner","value":"new Scanner(file)","lineNum":211,"name":"scanner","modifiers":[],"childDeclarations":{},"completeNodeValue":"Scanner scanner\u003dnew Scanner(file);\n"},{"value":"theString\u003dscanner.nextLine();\n","lineNum":212,"childDeclarations":{},"completeNodeValue":"theString\u003dscanner.nextLine();\n"},{"value":"while (scanner.hasNextLine()) theString\u003dtheString + \"\\n\" + scanner.nextLine();\n","lineNum":213,"childDeclarations":{},"completeNodeValue":"while (scanner.hasNextLine()) theString\u003dtheString + \"\\n\" + scanner.nextLine();\n"},{"type":"char[]","value":"theString.toCharArray()","lineNum":215,"name":"charArray","modifiers":[],"childDeclarations":{},"completeNodeValue":"char[] charArray\u003dtheString.toCharArray();\n"},{"value":"parser.setSource(charArray);\n","lineNum":217,"childDeclarations":{},"completeNodeValue":"parser.setSource(charArray);\n"},{"type":"Map","value":"JavaCore.getOptions()","lineNum":219,"name":"options","modifiers":[],"childDeclarations":{},"completeNodeValue":"Map options\u003dJavaCore.getOptions();\n"},{"value":"JavaCore.setComplianceOptions(JavaCore.VERSION_1_7,options);\n","lineNum":220,"childDeclarations":{},"completeNodeValue":"JavaCore.setComplianceOptions(JavaCore.VERSION_1_7,options);\n"},{"value":"parser.setCompilerOptions(options);\n","lineNum":221,"childDeclarations":{},"completeNodeValue":"parser.setCompilerOptions(options);\n"},{"type":"CompilationUnit","value":"(CompilationUnit)parser.createAST(null)","lineNum":223,"name":"result","modifiers":[],"childDeclarations":{},"completeNodeValue":"CompilationUnit result\u003d(CompilationUnit)parser.createAST(null);\n"},{"value":"System.out.println(result.getLength());\n","lineNum":224,"childDeclarations":{},"completeNodeValue":"System.out.println(result.getLength());\n"},{"value":"System.out.println(\"####### \" + ((ImportDeclaration)result.imports().get(0)).getName());\n","lineNum":231,"childDeclarations":{},"completeNodeValue":"System.out.println(\"####### \" + ((ImportDeclaration)result.imports().get(0)).getName());\n"},{"value":"System.out.println(\"asdfg   \" + ((QualifiedName)((SimpleType)((TypeDeclaration)result.types().get(0)).getSuperclassType()).getName()).toString());\n","lineNum":232,"childDeclarations":{},"completeNodeValue":"System.out.println(\"asdfg   \" + ((QualifiedName)((SimpleType)((TypeDeclaration)result.types().get(0)).getSuperclassType()).getName()).toString());\n"},{"type":"AbstractTypeDeclaration","value":"(AbstractTypeDeclaration)result.types().get(0)","lineNum":233,"name":"atd","modifiers":[],"childDeclarations":{},"completeNodeValue":"AbstractTypeDeclaration atd\u003d(AbstractTypeDeclaration)result.types().get(0);\n"},{"value":"System.out.println(atd.getName());\n","lineNum":234,"childDeclarations":{},"completeNodeValue":"System.out.println(atd.getName());\n"},{"value":"System.out.println(atd.getClass());\n","lineNum":235,"childDeclarations":{},"completeNodeValue":"System.out.println(atd.getClass());\n"},{"type":"List","value":"atd.bodyDeclarations()","lineNum":236,"name":"list","modifiers":[],"childDeclarations":{},"completeNodeValue":"List list\u003datd.bodyDeclarations();\n"},{"value":"for (Object obj : list) {\n  if (obj instanceof AbstractTypeDeclaration) {\n    System.out.println(((AbstractTypeDeclaration)obj).getName());\n  }\n else   if (obj instanceof MethodDeclaration)   System.out.println(\"**\" + ((MethodDeclaration)obj).getName());\n else   System.out.println(\"--\" + ((FieldDeclaration)obj).fragments().get(0).getClass());\n  List list1\u003d((BodyDeclaration)obj).modifiers();\n  for (  Object o : list1) {\n    System.out.println(\"\\t\" + o.getClass());\n    if (o.getClass() \u003d\u003d org.eclipse.jdt.core.dom.Modifier.class)     System.out.println(((Modifier)o).toString() + \"   \" + ((Modifier)o).getStartPosition()+ \"   \"+ ((Modifier)o).getLength());\n  }\n}\n","lineNum":237,"childDeclarations":{},"completeNodeValue":"for (Object obj : list) {\n  if (obj instanceof AbstractTypeDeclaration) {\n    System.out.println(((AbstractTypeDeclaration)obj).getName());\n  }\n else   if (obj instanceof MethodDeclaration)   System.out.println(\"**\" + ((MethodDeclaration)obj).getName());\n else   System.out.println(\"--\" + ((FieldDeclaration)obj).fragments().get(0).getClass());\n  List list1\u003d((BodyDeclaration)obj).modifiers();\n  for (  Object o : list1) {\n    System.out.println(\"\\t\" + o.getClass());\n    if (o.getClass() \u003d\u003d org.eclipse.jdt.core.dom.Modifier.class)     System.out.println(((Modifier)o).toString() + \"   \" + ((Modifier)o).getStartPosition()+ \"   \"+ ((Modifier)o).getLength());\n  }\n}\n"},{"value":"System.out.println(result.getLineNumber(914));\n","lineNum":252,"childDeclarations":{},"completeNodeValue":"System.out.println(result.getLineNumber(914));\n"},{"value":"System.out.println(result.getLineNumber(921));\n","lineNum":253,"childDeclarations":{},"completeNodeValue":"System.out.println(result.getLineNumber(921));\n"},{"value":"System.out.println(((ChildPropertyDescriptor)result.structuralPropertiesForType().get(0)).getId());\n","lineNum":257,"childDeclarations":{},"completeNodeValue":"System.out.println(((ChildPropertyDescriptor)result.structuralPropertiesForType().get(0)).getId());\n"},{"value":"System.out.println(((ChildListPropertyDescriptor)result.structuralPropertiesForType().get(2)).getId());\n","lineNum":258,"childDeclarations":{},"completeNodeValue":"System.out.println(((ChildListPropertyDescriptor)result.structuralPropertiesForType().get(2)).getId());\n"},{"value":"System.out.println(((ChildListPropertyDescriptor)result.structuralPropertiesForType().get(1)));\n","lineNum":259,"childDeclarations":{},"completeNodeValue":"System.out.println(((ChildListPropertyDescriptor)result.structuralPropertiesForType().get(1)));\n"}],"lineNum":206,"name":"just2","modifiers":["private","static"],"childDeclarations":{},"completeNodeValue":"private static void just2() throws FileNotFoundException {\n  ASTParser parser\u003dASTParser.newParser(AST.JLS3);\n  String theString\u003d\"\";\n  File file\u003dnew File(\"F:\\\\Workspace\\\\StructuralComparatorWeb\\\\src\\\\main\\\\java\\\\com\\\\imaginea\\\\assessor1\\\\JDTTester.java\");\n  Scanner scanner\u003dnew Scanner(file);\n  theString\u003dscanner.nextLine();\n  while (scanner.hasNextLine())   theString\u003dtheString + \"\\n\" + scanner.nextLine();\n  char[] charArray\u003dtheString.toCharArray();\n  parser.setSource(charArray);\n  Map options\u003dJavaCore.getOptions();\n  JavaCore.setComplianceOptions(JavaCore.VERSION_1_7,options);\n  parser.setCompilerOptions(options);\n  CompilationUnit result\u003d(CompilationUnit)parser.createAST(null);\n  System.out.println(result.getLength());\n  System.out.println(\"####### \" + ((ImportDeclaration)result.imports().get(0)).getName());\n  System.out.println(\"asdfg   \" + ((QualifiedName)((SimpleType)((TypeDeclaration)result.types().get(0)).getSuperclassType()).getName()).toString());\n  AbstractTypeDeclaration atd\u003d(AbstractTypeDeclaration)result.types().get(0);\n  System.out.println(atd.getName());\n  System.out.println(atd.getClass());\n  List list\u003datd.bodyDeclarations();\n  for (  Object obj : list) {\n    if (obj instanceof AbstractTypeDeclaration) {\n      System.out.println(((AbstractTypeDeclaration)obj).getName());\n    }\n else     if (obj instanceof MethodDeclaration)     System.out.println(\"**\" + ((MethodDeclaration)obj).getName());\n else     System.out.println(\"--\" + ((FieldDeclaration)obj).fragments().get(0).getClass());\n    List list1\u003d((BodyDeclaration)obj).modifiers();\n    for (    Object o : list1) {\n      System.out.println(\"\\t\" + o.getClass());\n      if (o.getClass() \u003d\u003d org.eclipse.jdt.core.dom.Modifier.class)       System.out.println(((Modifier)o).toString() + \"   \" + ((Modifier)o).getStartPosition()+ \"   \"+ ((Modifier)o).getLength());\n    }\n  }\n  System.out.println(result.getLineNumber(914));\n  System.out.println(result.getLineNumber(921));\n  System.out.println(((ChildPropertyDescriptor)result.structuralPropertiesForType().get(0)).getId());\n  System.out.println(((ChildListPropertyDescriptor)result.structuralPropertiesForType().get(2)).getId());\n  System.out.println(((ChildListPropertyDescriptor)result.structuralPropertiesForType().get(1)));\n}\n"}],"commonChilds":[{"diff":-1,"declarations":[null,{"type":"ASTParser","value":"ASTParser.newParser(AST.JLS3)","lineNum":207,"name":"parser","modifiers":[],"childDeclarations":{},"completeNodeValue":"ASTParser parser\u003dASTParser.newParser(AST.JLS3);\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"type":"String","value":"\"\"","lineNum":209,"name":"theString","modifiers":[],"childDeclarations":{},"completeNodeValue":"String theString\u003d\"\";\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"type":"File","value":"new File(\"F:\\\\Workspace\\\\StructuralComparatorWeb\\\\src\\\\main\\\\java\\\\com\\\\imaginea\\\\assessor1\\\\JDTTester.java\")","lineNum":210,"name":"file","modifiers":[],"childDeclarations":{},"completeNodeValue":"File file\u003dnew File(\"F:\\\\Workspace\\\\StructuralComparatorWeb\\\\src\\\\main\\\\java\\\\com\\\\imaginea\\\\assessor1\\\\JDTTester.java\");\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"type":"Scanner","value":"new Scanner(file)","lineNum":211,"name":"scanner","modifiers":[],"childDeclarations":{},"completeNodeValue":"Scanner scanner\u003dnew Scanner(file);\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"value":"theString\u003dscanner.nextLine();\n","lineNum":212,"childDeclarations":{},"completeNodeValue":"theString\u003dscanner.nextLine();\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"value":"while (scanner.hasNextLine()) theString\u003dtheString + \"\\n\" + scanner.nextLine();\n","lineNum":213,"childDeclarations":{},"completeNodeValue":"while (scanner.hasNextLine()) theString\u003dtheString + \"\\n\" + scanner.nextLine();\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"type":"char[]","value":"theString.toCharArray()","lineNum":215,"name":"charArray","modifiers":[],"childDeclarations":{},"completeNodeValue":"char[] charArray\u003dtheString.toCharArray();\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"value":"parser.setSource(charArray);\n","lineNum":217,"childDeclarations":{},"completeNodeValue":"parser.setSource(charArray);\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"type":"Map","value":"JavaCore.getOptions()","lineNum":219,"name":"options","modifiers":[],"childDeclarations":{},"completeNodeValue":"Map options\u003dJavaCore.getOptions();\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"value":"JavaCore.setComplianceOptions(JavaCore.VERSION_1_7,options);\n","lineNum":220,"childDeclarations":{},"completeNodeValue":"JavaCore.setComplianceOptions(JavaCore.VERSION_1_7,options);\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"value":"parser.setCompilerOptions(options);\n","lineNum":221,"childDeclarations":{},"completeNodeValue":"parser.setCompilerOptions(options);\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"type":"CompilationUnit","value":"(CompilationUnit)parser.createAST(null)","lineNum":223,"name":"result","modifiers":[],"childDeclarations":{},"completeNodeValue":"CompilationUnit result\u003d(CompilationUnit)parser.createAST(null);\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"value":"System.out.println(result.getLength());\n","lineNum":224,"childDeclarations":{},"completeNodeValue":"System.out.println(result.getLength());\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"value":"System.out.println(\"####### \" + ((ImportDeclaration)result.imports().get(0)).getName());\n","lineNum":231,"childDeclarations":{},"completeNodeValue":"System.out.println(\"####### \" + ((ImportDeclaration)result.imports().get(0)).getName());\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"value":"System.out.println(\"asdfg   \" + ((QualifiedName)((SimpleType)((TypeDeclaration)result.types().get(0)).getSuperclassType()).getName()).toString());\n","lineNum":232,"childDeclarations":{},"completeNodeValue":"System.out.println(\"asdfg   \" + ((QualifiedName)((SimpleType)((TypeDeclaration)result.types().get(0)).getSuperclassType()).getName()).toString());\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"type":"AbstractTypeDeclaration","value":"(AbstractTypeDeclaration)result.types().get(0)","lineNum":233,"name":"atd","modifiers":[],"childDeclarations":{},"completeNodeValue":"AbstractTypeDeclaration atd\u003d(AbstractTypeDeclaration)result.types().get(0);\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"value":"System.out.println(atd.getName());\n","lineNum":234,"childDeclarations":{},"completeNodeValue":"System.out.println(atd.getName());\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"value":"System.out.println(atd.getClass());\n","lineNum":235,"childDeclarations":{},"completeNodeValue":"System.out.println(atd.getClass());\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"type":"List","value":"atd.bodyDeclarations()","lineNum":236,"name":"list","modifiers":[],"childDeclarations":{},"completeNodeValue":"List list\u003datd.bodyDeclarations();\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"value":"for (Object obj : list) {\n  if (obj instanceof AbstractTypeDeclaration) {\n    System.out.println(((AbstractTypeDeclaration)obj).getName());\n  }\n else   if (obj instanceof MethodDeclaration)   System.out.println(\"**\" + ((MethodDeclaration)obj).getName());\n else   System.out.println(\"--\" + ((FieldDeclaration)obj).fragments().get(0).getClass());\n  List list1\u003d((BodyDeclaration)obj).modifiers();\n  for (  Object o : list1) {\n    System.out.println(\"\\t\" + o.getClass());\n    if (o.getClass() \u003d\u003d org.eclipse.jdt.core.dom.Modifier.class)     System.out.println(((Modifier)o).toString() + \"   \" + ((Modifier)o).getStartPosition()+ \"   \"+ ((Modifier)o).getLength());\n  }\n}\n","lineNum":237,"childDeclarations":{},"completeNodeValue":"for (Object obj : list) {\n  if (obj instanceof AbstractTypeDeclaration) {\n    System.out.println(((AbstractTypeDeclaration)obj).getName());\n  }\n else   if (obj instanceof MethodDeclaration)   System.out.println(\"**\" + ((MethodDeclaration)obj).getName());\n else   System.out.println(\"--\" + ((FieldDeclaration)obj).fragments().get(0).getClass());\n  List list1\u003d((BodyDeclaration)obj).modifiers();\n  for (  Object o : list1) {\n    System.out.println(\"\\t\" + o.getClass());\n    if (o.getClass() \u003d\u003d org.eclipse.jdt.core.dom.Modifier.class)     System.out.println(((Modifier)o).toString() + \"   \" + ((Modifier)o).getStartPosition()+ \"   \"+ ((Modifier)o).getLength());\n  }\n}\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"value":"System.out.println(result.getLineNumber(914));\n","lineNum":252,"childDeclarations":{},"completeNodeValue":"System.out.println(result.getLineNumber(914));\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"value":"System.out.println(result.getLineNumber(921));\n","lineNum":253,"childDeclarations":{},"completeNodeValue":"System.out.println(result.getLineNumber(921));\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"value":"System.out.println(((ChildPropertyDescriptor)result.structuralPropertiesForType().get(0)).getId());\n","lineNum":257,"childDeclarations":{},"completeNodeValue":"System.out.println(((ChildPropertyDescriptor)result.structuralPropertiesForType().get(0)).getId());\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"value":"System.out.println(((ChildListPropertyDescriptor)result.structuralPropertiesForType().get(2)).getId());\n","lineNum":258,"childDeclarations":{},"completeNodeValue":"System.out.println(((ChildListPropertyDescriptor)result.structuralPropertiesForType().get(2)).getId());\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"value":"System.out.println(((ChildListPropertyDescriptor)result.structuralPropertiesForType().get(1)));\n","lineNum":259,"childDeclarations":{},"completeNodeValue":"System.out.println(((ChildListPropertyDescriptor)result.structuralPropertiesForType().get(1)));\n"}],"commonChilds":[]}]},{"diff":-1,"declarations":[null,{"type":"int","value":"0","lineNum":38,"name":"xz","modifiers":[],"childDeclarations":{},"completeNodeValue":"int xz\u003d0;\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"type":"int[]","value":"new int[]{10,10}","lineNum":40,"name":"aaaaa","modifiers":[],"childDeclarations":{},"completeNodeValue":"int[] aaaaa\u003dnew int[]{10,10};\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"isConstructor":false,"returnType":"void","parameters":"","thrownExceptions":[],"blockofStatements":[],"lineNum":88,"name":"anm2","modifiers":[],"childDeclarations":{},"completeNodeValue":"void anm2(){\n}\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"isConstructor":false,"returnType":"void","parameters":"","thrownExceptions":[],"blockofStatements":[],"lineNum":84,"name":"anm","modifiers":[],"childDeclarations":{},"completeNodeValue":"void anm(){\n}\n"}],"commonChilds":[]}]},{"diff":-1,"declarations":[null,{"isInterface":true,"superClass":"","superInterfacelist":[],"bodyDeclarations":[],"lineNum":264,"name":"a","modifiers":[],"childDeclarations":{},"completeNodeValue":"interface a {\n}\n"}],"commonChilds":[]},{"diff":-1,"declarations":[null,{"isInterface":true,"superClass":"","superInterfacelist":[],"bodyDeclarations":[],"lineNum":267,"name":"b","modifiers":[],"childDeclarations":{},"completeNodeValue":"interface b {\n}\n"}],"commonChilds":[]},{"diff":1,"declarations":[{"isInterface":false,"superClass":"","superInterfacelist":[],"bodyDeclarations":[],"lineNum":31,"name":"bac","modifiers":["abstract"],"childDeclarations":{},"completeNodeValue":"abstract class bac {\n}\n"},null],"commonChilds":[]},{"diff":1,"declarations":[{"isInterface":true,"superClass":"","superInterfacelist":[],"bodyDeclarations":[],"lineNum":27,"name":"abc","modifiers":[],"childDeclarations":{},"completeNodeValue":"interface abc {\n}\n"},null],"commonChilds":[]},{"diff":1,"declarations":[{"isInterface":false,"superClass":"bac","superInterfacelist":["abc"],"bodyDeclarations":[],"lineNum":39,"name":"StructuralComapareTest","modifiers":["public"],"childDeclarations":{"main_Method":{"isConstructor":false,"returnType":"void","parameters":"String[] args","thrownExceptions":[],"blockofStatements":[{"type":"ComparatorImpl","value":"new ComparatorImpl()","lineNum":120,"name":"comparator","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparatorImpl comparator\u003dnew ComparatorImpl();\n"},{"type":"ComparisonResult","value":"comparator.compare(\"F:/Workspace/structuralComaparator/src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"F:/Workspace/structuralComaparator/src/test/java/com/imaginea/structuralComaparator/test/JDTTester.java\")","lineNum":121,"name":"result12","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparisonResult result12\u003dcomparator.compare(\"F:/Workspace/structuralComaparator/src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"F:/Workspace/structuralComaparator/src/test/java/com/imaginea/structuralComaparator/test/JDTTester.java\");\n"},{"type":"Gson","value":"new Gson()","lineNum":124,"name":"gson","modifiers":[],"childDeclarations":{},"completeNodeValue":"Gson gson\u003dnew Gson();\n"},{"type":"String","value":"gson.toJson(result12)","lineNum":125,"name":"json","modifiers":[],"childDeclarations":{},"completeNodeValue":"String json\u003dgson.toJson(result12);\n"},{"value":"try {\n  writeToFile(json);\n}\n catch (IOException e) {\n  e.printStackTrace();\n}\n","lineNum":126,"childDeclarations":{},"completeNodeValue":"try {\n  writeToFile(json);\n}\n catch (IOException e) {\n  e.printStackTrace();\n}\n"},{"value":"System.out.println(\"\\n\\n\\n\" + json + \"\\n\\n*********************\");\n","lineNum":131,"childDeclarations":{},"completeNodeValue":"System.out.println(\"\\n\\n\\n\" + json + \"\\n\\n*********************\");\n"},{"type":"ComparisonResult","value":"gson.fromJson(json,ComparisonResult.class)","lineNum":132,"name":"result1","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparisonResult result1\u003dgson.fromJson(json,ComparisonResult.class);\n"},{"value":"System.out.println(\"\" + result1.getImports().size());\n","lineNum":133,"childDeclarations":{},"completeNodeValue":"System.out.println(\"\" + result1.getImports().size());\n"},{"value":"System.out.println(\"\" + result1.getTypes().get(3).getClass());\n","lineNum":134,"childDeclarations":{},"completeNodeValue":"System.out.println(\"\" + result1.getTypes().get(3).getClass());\n"},{"value":"System.out.println(\"\" + result1.getTypes().get(3).getAbstractDeclarations(0).getClass());\n","lineNum":135,"childDeclarations":{},"completeNodeValue":"System.out.println(\"\" + result1.getTypes().get(3).getAbstractDeclarations(0).getClass());\n"},{"value":"System.out.println(\"\" + result1.getImports().size());\n","lineNum":136,"childDeclarations":{},"completeNodeValue":"System.out.println(\"\" + result1.getImports().size());\n"}],"lineNum":119,"name":"main","modifiers":["public","static"],"childDeclarations":{},"completeNodeValue":"public static void main(String[] args){\n  ComparatorImpl comparator\u003dnew ComparatorImpl();\n  ComparisonResult result12\u003dcomparator.compare(\"F:/Workspace/structuralComaparator/src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"F:/Workspace/structuralComaparator/src/test/java/com/imaginea/structuralComaparator/test/JDTTester.java\");\n  Gson gson\u003dnew Gson();\n  String json\u003dgson.toJson(result12);\n  try {\n    writeToFile(json);\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n  }\n  System.out.println(\"\\n\\n\\n\" + json + \"\\n\\n*********************\");\n  ComparisonResult result1\u003dgson.fromJson(json,ComparisonResult.class);\n  System.out.println(\"\" + result1.getImports().size());\n  System.out.println(\"\" + result1.getTypes().get(3).getClass());\n  System.out.println(\"\" + result1.getTypes().get(3).getAbstractDeclarations(0).getClass());\n  System.out.println(\"\" + result1.getImports().size());\n}\n"},"mp_Class":{"isInterface":false,"superClass":"","superInterfacelist":[],"bodyDeclarations":[],"lineNum":171,"name":"mp","modifiers":[],"childDeclarations":{"bvdes_Class":{"isInterface":false,"superClass":"","superInterfacelist":[],"bodyDeclarations":[],"lineNum":172,"name":"bvdes","modifiers":[],"childDeclarations":{"temp_Method":{"isConstructor":false,"returnType":"void","parameters":"","thrownExceptions":[],"blockofStatements":[],"lineNum":173,"name":"temp","modifiers":[],"childDeclarations":{},"completeNodeValue":"void temp(){\n}\n"}},"completeNodeValue":"class bvdes {\n  void temp(){\n  }\n}\n"}},"completeNodeValue":"class mp {\nclass bvdes {\n    void temp(){\n    }\n  }\n}\n"},"assertJavaFileStructuresEqual_Method":{"isConstructor":false,"returnType":"void","parameters":"","thrownExceptions":[],"blockofStatements":[{"type":"ComparatorImpl","value":"new ComparatorImpl()","lineNum":91,"name":"comparator","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparatorImpl comparator\u003dnew ComparatorImpl();\n"},{"type":"ComparisonResult","value":"comparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\")","lineNum":92,"name":"result","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\");\n"},{"value":"isPackageDifferent(result.getPkg());\n","lineNum":94,"childDeclarations":{},"completeNodeValue":"isPackageDifferent(result.getPkg());\n"},{"value":"isImportsDifferent(result.getImports());\n","lineNum":95,"childDeclarations":{},"completeNodeValue":"isImportsDifferent(result.getImports());\n"},{"value":"isTypesDifferent(result.getTypes());\n","lineNum":96,"childDeclarations":{},"completeNodeValue":"isTypesDifferent(result.getTypes());\n"}],"lineNum":89,"name":"assertJavaFileStructuresEqual","modifiers":["@Test","public","final"],"childDeclarations":{},"completeNodeValue":"@Test public final void assertJavaFileStructuresEqual(){\n  ComparatorImpl comparator\u003dnew ComparatorImpl();\n  ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\");\n  isPackageDifferent(result.getPkg());\n  isImportsDifferent(result.getImports());\n  isTypesDifferent(result.getTypes());\n}\n"},"arr":{"type":"int[]","value":"{1,2}","lineNum":42,"name":"arr","modifiers":[],"childDeclarations":{},"completeNodeValue":"int[] arr\u003d{1,2};\n"},"isPackageDifferent_Method":{"isConstructor":false,"returnType":"void","parameters":"Package pkg","thrownExceptions":[],"blockofStatements":[{"value":"if (pkg.getDiff() !\u003d 0) Assert.fail(\"Package is different: \" + pkg);\n","lineNum":64,"childDeclarations":{},"completeNodeValue":"if (pkg.getDiff() !\u003d 0) Assert.fail(\"Package is different: \" + pkg);\n"}],"lineNum":63,"name":"isPackageDifferent","modifiers":["private"],"childDeclarations":{},"completeNodeValue":"private void isPackageDifferent(Package pkg){\n  if (pkg.getDiff() !\u003d 0)   Assert.fail(\"Package is different: \" + pkg);\n}\n"},"isImportsDifferent_Method":{"isConstructor":false,"returnType":"void","parameters":"List\u003cImport\u003e imports","thrownExceptions":[],"blockofStatements":[{"value":"for (Import imp : imports) if (imp.getDiff() !\u003d 0) Assert.fail(\"Imports are different: \" + imp);\n","lineNum":69,"childDeclarations":{},"completeNodeValue":"for (Import imp : imports) if (imp.getDiff() !\u003d 0) Assert.fail(\"Imports are different: \" + imp);\n"}],"lineNum":68,"name":"isImportsDifferent","modifiers":[],"childDeclarations":{},"completeNodeValue":"void isImportsDifferent(List\u003cImport\u003e imports){\n  for (  Import imp : imports)   if (imp.getDiff() !\u003d 0)   Assert.fail(\"Imports are different: \" + imp);\n}\n"},"toString_Method":{"isConstructor":false,"returnType":"String","parameters":"","thrownExceptions":[],"blockofStatements":[{"type":"ToStringBuilder","value":"new ToStringBuilder(this)","lineNum":164,"name":"builder","modifiers":[],"childDeclarations":{},"completeNodeValue":"ToStringBuilder builder\u003dnew ToStringBuilder(this);\n"},{"value":"builder.append(\"value\",value);\n","lineNum":165,"childDeclarations":{},"completeNodeValue":"builder.append(\"value\",value);\n"},{"value":"if (arr !\u003d null) builder.append(\"arr\",Arrays.toString(arr));\n","lineNum":166,"childDeclarations":{},"completeNodeValue":"if (arr !\u003d null) builder.append(\"arr\",Arrays.toString(arr));\n"},{"value":"return builder.toString();\n","lineNum":168,"childDeclarations":{},"completeNodeValue":"return builder.toString();\n"}],"lineNum":162,"name":"toString","modifiers":["@Override","public"],"childDeclarations":{},"completeNodeValue":"@Override public String toString(){\n  ToStringBuilder builder\u003dnew ToStringBuilder(this);\n  builder.append(\"value\",value);\n  if (arr !\u003d null)   builder.append(\"arr\",Arrays.toString(arr));\n  return builder.toString();\n}\n"},"writeToFile_Method":{"isConstructor":false,"returnType":"void","parameters":"String json","thrownExceptions":["IOException"],"blockofStatements":[{"type":"File","value":"new File(\"C:/Users/vinod/Desktop/dummy.json\")","lineNum":140,"name":"file","modifiers":[],"childDeclarations":{},"completeNodeValue":"File file\u003dnew File(\"C:/Users/vinod/Desktop/dummy.json\");\n"},{"type":"BufferedWriter","value":"null","lineNum":141,"name":"writer","modifiers":[],"childDeclarations":{},"completeNodeValue":"BufferedWriter writer\u003dnull;\n"},{"value":"try {\n  writer\u003dnew BufferedWriter(new FileWriter(file));\n  writer.write(json);\n}\n catch (IOException e) {\n}\n finally {\n  try {\n    if (writer !\u003d null)     writer.close();\n  }\n catch (  IOException e) {\n  }\n}\n","lineNum":142,"childDeclarations":{},"completeNodeValue":"try {\n  writer\u003dnew BufferedWriter(new FileWriter(file));\n  writer.write(json);\n}\n catch (IOException e) {\n}\n finally {\n  try {\n    if (writer !\u003d null)     writer.close();\n  }\n catch (  IOException e) {\n  }\n}\n"}],"lineNum":139,"name":"writeToFile","modifiers":["private","static"],"childDeclarations":{},"completeNodeValue":"private static void writeToFile(String json) throws IOException {\n  File file\u003dnew File(\"C:/Users/vinod/Desktop/dummy.json\");\n  BufferedWriter writer\u003dnull;\n  try {\n    writer\u003dnew BufferedWriter(new FileWriter(file));\n    writer.write(json);\n  }\n catch (  IOException e) {\n  }\n finally {\n    try {\n      if (writer !\u003d null)       writer.close();\n    }\n catch (    IOException e) {\n    }\n  }\n}\n"},"isTypesDifferent_Method":{"isConstructor":false,"returnType":"void","parameters":"List\u003cType\u003e types","thrownExceptions":[],"blockofStatements":[{"value":"for (Type type : types) if (type.getDiff() !\u003d 0) Assert.fail(\"Imports are different: \" + type);\n","lineNum":84,"childDeclarations":{},"completeNodeValue":"for (Type type : types) if (type.getDiff() !\u003d 0) Assert.fail(\"Imports are different: \" + type);\n"}],"lineNum":83,"name":"isTypesDifferent","modifiers":["private"],"childDeclarations":{},"completeNodeValue":"private void isTypesDifferent(List\u003cType\u003e types){\n  for (  Type type : types)   if (type.getDiff() !\u003d 0)   Assert.fail(\"Imports are different: \" + type);\n}\n"},"testImports_Method":{"isConstructor":false,"returnType":"void","parameters":"","thrownExceptions":[],"blockofStatements":[{"type":"ComparatorImpl","value":"new ComparatorImpl()","lineNum":110,"name":"comparator","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparatorImpl comparator\u003dnew ComparatorImpl();\n"},{"type":"ComparisonResult","value":"comparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\")","lineNum":111,"name":"result","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\");\n"},{"type":"List\u003cImport\u003e","value":"result.getImports()","lineNum":113,"name":"imports","modifiers":[],"childDeclarations":{},"completeNodeValue":"List\u003cImport\u003e imports\u003dresult.getImports();\n"},{"value":"for (Import imp : imports) {\n  System.out.println(imp);\n}\n","lineNum":114,"childDeclarations":{},"completeNodeValue":"for (Import imp : imports) {\n  System.out.println(imp);\n}\n"}],"lineNum":109,"name":"testImports","modifiers":["static"],"childDeclarations":{},"completeNodeValue":"static void testImports(){\n  ComparatorImpl comparator\u003dnew ComparatorImpl();\n  ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\");\n  List\u003cImport\u003e imports\u003dresult.getImports();\n  for (  Import imp : imports) {\n    System.out.println(imp);\n  }\n}\n"},"assertImportsEqual_Method":{"isConstructor":false,"returnType":"void","parameters":"","thrownExceptions":[],"blockofStatements":[{"type":"ComparatorImpl","value":"new ComparatorImpl()","lineNum":56,"name":"comparator","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparatorImpl comparator\u003dnew ComparatorImpl();\n"},{"type":"ComparisonResult","value":"comparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\")","lineNum":57,"name":"result","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\");\n"},{"type":"List\u003cImport\u003e","value":"result.getImports()","lineNum":59,"name":"imports","modifiers":[],"childDeclarations":{},"completeNodeValue":"List\u003cImport\u003e imports\u003dresult.getImports();\n"},{"value":"isImportsDifferent(imports);\n","lineNum":60,"childDeclarations":{},"completeNodeValue":"isImportsDifferent(imports);\n"}],"lineNum":54,"name":"assertImportsEqual","modifiers":["@Test","public","final"],"childDeclarations":{},"completeNodeValue":"@Test public final void assertImportsEqual(){\n  ComparatorImpl comparator\u003dnew ComparatorImpl();\n  ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\");\n  List\u003cImport\u003e imports\u003dresult.getImports();\n  isImportsDifferent(imports);\n}\n"},"assertTypesEqual_Method":{"isConstructor":false,"returnType":"void","parameters":"","thrownExceptions":[],"blockofStatements":[{"type":"ComparatorImpl","value":"new ComparatorImpl()","lineNum":76,"name":"comparator","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparatorImpl comparator\u003dnew ComparatorImpl();\n"},{"type":"ComparisonResult","value":"comparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\")","lineNum":77,"name":"result","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\");\n"},{"type":"List\u003cType\u003e","value":"result.getTypes()","lineNum":79,"name":"types","modifiers":[],"childDeclarations":{},"completeNodeValue":"List\u003cType\u003e types\u003dresult.getTypes();\n"},{"value":"isTypesDifferent(types);\n","lineNum":80,"childDeclarations":{},"completeNodeValue":"isTypesDifferent(types);\n"}],"lineNum":74,"name":"assertTypesEqual","modifiers":["@Test","public","final"],"childDeclarations":{},"completeNodeValue":"@Test public final void assertTypesEqual(){\n  ComparatorImpl comparator\u003dnew ComparatorImpl();\n  ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\");\n  List\u003cType\u003e types\u003dresult.getTypes();\n  isTypesDifferent(types);\n}\n"},"testTypes_Method":{"isConstructor":false,"returnType":"void","parameters":"","thrownExceptions":[],"blockofStatements":[{"type":"ComparatorImpl","value":"new ComparatorImpl()","lineNum":100,"name":"comparator","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparatorImpl comparator\u003dnew ComparatorImpl();\n"},{"type":"ComparisonResult","value":"comparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/resources/TestJavaFiles/Testing.java.txt\")","lineNum":101,"name":"result","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/resources/TestJavaFiles/Testing.java.txt\");\n"},{"type":"List\u003cType\u003e","value":"result.getTypes()","lineNum":103,"name":"types","modifiers":[],"childDeclarations":{},"completeNodeValue":"List\u003cType\u003e types\u003dresult.getTypes();\n"},{"value":"for (Type type : types) {\n  System.out.println(type);\n}\n","lineNum":104,"childDeclarations":{},"completeNodeValue":"for (Type type : types) {\n  System.out.println(type);\n}\n"}],"lineNum":99,"name":"testTypes","modifiers":["static"],"childDeclarations":{},"completeNodeValue":"static void testTypes(){\n  ComparatorImpl comparator\u003dnew ComparatorImpl();\n  ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/resources/TestJavaFiles/Testing.java.txt\");\n  List\u003cType\u003e types\u003dresult.getTypes();\n  for (  Type type : types) {\n    System.out.println(type);\n  }\n}\n"},"value":{"type":"int","value":"0","lineNum":41,"name":"value","modifiers":[],"childDeclarations":{},"completeNodeValue":"int value\u003d0;\n"},"mnop_Class":{"isInterface":false,"superClass":"","superInterfacelist":[],"bodyDeclarations":[],"lineNum":155,"name":"mnop","modifiers":[],"childDeclarations":{"bvd_Class":{"isInterface":false,"superClass":"","superInterfacelist":[],"bodyDeclarations":[],"lineNum":156,"name":"bvd","modifiers":[],"childDeclarations":{"temp_Method":{"isConstructor":false,"returnType":"void","parameters":"","thrownExceptions":[],"blockofStatements":[],"lineNum":157,"name":"temp","modifiers":[],"childDeclarations":{},"completeNodeValue":"void temp(){\n}\n"}},"completeNodeValue":"class bvd {\n  void temp(){\n  }\n}\n"}},"completeNodeValue":"class mnop {\nclass bvd {\n    void temp(){\n    }\n  }\n}\n"},"assertPackageEqual_Method":{"isConstructor":false,"returnType":"void","parameters":"","thrownExceptions":[],"blockofStatements":[{"type":"ComparatorImpl","value":"new ComparatorImpl()","lineNum":46,"name":"comparator","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparatorImpl comparator\u003dnew ComparatorImpl();\n"},{"type":"ComparisonResult","value":"comparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\")","lineNum":47,"name":"result","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\");\n"},{"type":"com.imaginea.structuralComaparator.domain.Package","value":"result.getPkg()","lineNum":49,"name":"pkg","modifiers":[],"childDeclarations":{},"completeNodeValue":"com.imaginea.structuralComaparator.domain.Package pkg\u003dresult.getPkg();\n"},{"value":"isPackageDifferent(pkg);\n","lineNum":50,"childDeclarations":{},"completeNodeValue":"isPackageDifferent(pkg);\n"}],"lineNum":44,"name":"assertPackageEqual","modifiers":["@Test","public","final"],"childDeclarations":{},"completeNodeValue":"@Test public final void assertPackageEqual(){\n  ComparatorImpl comparator\u003dnew ComparatorImpl();\n  ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\");\n  com.imaginea.structuralComaparator.domain.Package pkg\u003dresult.getPkg();\n  isPackageDifferent(pkg);\n}\n"}},"completeNodeValue":"public class StructuralComapareTest extends bac implements abc {\n  int value\u003d0;\n  int[] arr\u003d{1,2};\n  @Test public final void assertPackageEqual(){\n    ComparatorImpl comparator\u003dnew ComparatorImpl();\n    ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\");\n    com.imaginea.structuralComaparator.domain.Package pkg\u003dresult.getPkg();\n    isPackageDifferent(pkg);\n  }\n  @Test public final void assertImportsEqual(){\n    ComparatorImpl comparator\u003dnew ComparatorImpl();\n    ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\");\n    List\u003cImport\u003e imports\u003dresult.getImports();\n    isImportsDifferent(imports);\n  }\n  private void isPackageDifferent(  Package pkg){\n    if (pkg.getDiff() !\u003d 0)     Assert.fail(\"Package is different: \" + pkg);\n  }\n  void isImportsDifferent(  List\u003cImport\u003e imports){\n    for (    Import imp : imports)     if (imp.getDiff() !\u003d 0)     Assert.fail(\"Imports are different: \" + imp);\n  }\n  @Test public final void assertTypesEqual(){\n    ComparatorImpl comparator\u003dnew ComparatorImpl();\n    ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\");\n    List\u003cType\u003e types\u003dresult.getTypes();\n    isTypesDifferent(types);\n  }\n  private void isTypesDifferent(  List\u003cType\u003e types){\n    for (    Type type : types)     if (type.getDiff() !\u003d 0)     Assert.fail(\"Imports are different: \" + type);\n  }\n  @Test public final void assertJavaFileStructuresEqual(){\n    ComparatorImpl comparator\u003dnew ComparatorImpl();\n    ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\");\n    isPackageDifferent(result.getPkg());\n    isImportsDifferent(result.getImports());\n    isTypesDifferent(result.getTypes());\n  }\n  static void testTypes(){\n    ComparatorImpl comparator\u003dnew ComparatorImpl();\n    ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/resources/TestJavaFiles/Testing.java.txt\");\n    List\u003cType\u003e types\u003dresult.getTypes();\n    for (    Type type : types) {\n      System.out.println(type);\n    }\n  }\n  static void testImports(){\n    ComparatorImpl comparator\u003dnew ComparatorImpl();\n    ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\");\n    List\u003cImport\u003e imports\u003dresult.getImports();\n    for (    Import imp : imports) {\n      System.out.println(imp);\n    }\n  }\n  public static void main(  String[] args){\n    ComparatorImpl comparator\u003dnew ComparatorImpl();\n    ComparisonResult result12\u003dcomparator.compare(\"F:/Workspace/structuralComaparator/src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"F:/Workspace/structuralComaparator/src/test/java/com/imaginea/structuralComaparator/test/JDTTester.java\");\n    Gson gson\u003dnew Gson();\n    String json\u003dgson.toJson(result12);\n    try {\n      writeToFile(json);\n    }\n catch (    IOException e) {\n      e.printStackTrace();\n    }\n    System.out.println(\"\\n\\n\\n\" + json + \"\\n\\n*********************\");\n    ComparisonResult result1\u003dgson.fromJson(json,ComparisonResult.class);\n    System.out.println(\"\" + result1.getImports().size());\n    System.out.println(\"\" + result1.getTypes().get(3).getClass());\n    System.out.println(\"\" + result1.getTypes().get(3).getAbstractDeclarations(0).getClass());\n    System.out.println(\"\" + result1.getImports().size());\n  }\n  private static void writeToFile(  String json) throws IOException {\n    File file\u003dnew File(\"C:/Users/vinod/Desktop/dummy.json\");\n    BufferedWriter writer\u003dnull;\n    try {\n      writer\u003dnew BufferedWriter(new FileWriter(file));\n      writer.write(json);\n    }\n catch (    IOException e) {\n    }\n finally {\n      try {\n        if (writer !\u003d null)         writer.close();\n      }\n catch (      IOException e) {\n      }\n    }\n  }\nclass mnop {\nclass bvd {\n      void temp(){\n      }\n    }\n  }\n  @Override public String toString(){\n    ToStringBuilder builder\u003dnew ToStringBuilder(this);\n    builder.append(\"value\",value);\n    if (arr !\u003d null)     builder.append(\"arr\",Arrays.toString(arr));\n    return builder.toString();\n  }\nclass mp {\nclass bvdes {\n      void temp(){\n      }\n    }\n  }\n}\n"},null],"commonChilds":[{"diff":1,"declarations":[{"isConstructor":false,"returnType":"void","parameters":"String[] args","thrownExceptions":[],"blockofStatements":[{"type":"ComparatorImpl","value":"new ComparatorImpl()","lineNum":120,"name":"comparator","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparatorImpl comparator\u003dnew ComparatorImpl();\n"},{"type":"ComparisonResult","value":"comparator.compare(\"F:/Workspace/structuralComaparator/src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"F:/Workspace/structuralComaparator/src/test/java/com/imaginea/structuralComaparator/test/JDTTester.java\")","lineNum":121,"name":"result12","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparisonResult result12\u003dcomparator.compare(\"F:/Workspace/structuralComaparator/src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"F:/Workspace/structuralComaparator/src/test/java/com/imaginea/structuralComaparator/test/JDTTester.java\");\n"},{"type":"Gson","value":"new Gson()","lineNum":124,"name":"gson","modifiers":[],"childDeclarations":{},"completeNodeValue":"Gson gson\u003dnew Gson();\n"},{"type":"String","value":"gson.toJson(result12)","lineNum":125,"name":"json","modifiers":[],"childDeclarations":{},"completeNodeValue":"String json\u003dgson.toJson(result12);\n"},{"value":"try {\n  writeToFile(json);\n}\n catch (IOException e) {\n  e.printStackTrace();\n}\n","lineNum":126,"childDeclarations":{},"completeNodeValue":"try {\n  writeToFile(json);\n}\n catch (IOException e) {\n  e.printStackTrace();\n}\n"},{"value":"System.out.println(\"\\n\\n\\n\" + json + \"\\n\\n*********************\");\n","lineNum":131,"childDeclarations":{},"completeNodeValue":"System.out.println(\"\\n\\n\\n\" + json + \"\\n\\n*********************\");\n"},{"type":"ComparisonResult","value":"gson.fromJson(json,ComparisonResult.class)","lineNum":132,"name":"result1","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparisonResult result1\u003dgson.fromJson(json,ComparisonResult.class);\n"},{"value":"System.out.println(\"\" + result1.getImports().size());\n","lineNum":133,"childDeclarations":{},"completeNodeValue":"System.out.println(\"\" + result1.getImports().size());\n"},{"value":"System.out.println(\"\" + result1.getTypes().get(3).getClass());\n","lineNum":134,"childDeclarations":{},"completeNodeValue":"System.out.println(\"\" + result1.getTypes().get(3).getClass());\n"},{"value":"System.out.println(\"\" + result1.getTypes().get(3).getAbstractDeclarations(0).getClass());\n","lineNum":135,"childDeclarations":{},"completeNodeValue":"System.out.println(\"\" + result1.getTypes().get(3).getAbstractDeclarations(0).getClass());\n"},{"value":"System.out.println(\"\" + result1.getImports().size());\n","lineNum":136,"childDeclarations":{},"completeNodeValue":"System.out.println(\"\" + result1.getImports().size());\n"}],"lineNum":119,"name":"main","modifiers":["public","static"],"childDeclarations":{},"completeNodeValue":"public static void main(String[] args){\n  ComparatorImpl comparator\u003dnew ComparatorImpl();\n  ComparisonResult result12\u003dcomparator.compare(\"F:/Workspace/structuralComaparator/src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"F:/Workspace/structuralComaparator/src/test/java/com/imaginea/structuralComaparator/test/JDTTester.java\");\n  Gson gson\u003dnew Gson();\n  String json\u003dgson.toJson(result12);\n  try {\n    writeToFile(json);\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n  }\n  System.out.println(\"\\n\\n\\n\" + json + \"\\n\\n*********************\");\n  ComparisonResult result1\u003dgson.fromJson(json,ComparisonResult.class);\n  System.out.println(\"\" + result1.getImports().size());\n  System.out.println(\"\" + result1.getTypes().get(3).getClass());\n  System.out.println(\"\" + result1.getTypes().get(3).getAbstractDeclarations(0).getClass());\n  System.out.println(\"\" + result1.getImports().size());\n}\n"},null],"commonChilds":[{"diff":1,"declarations":[{"type":"ComparatorImpl","value":"new ComparatorImpl()","lineNum":120,"name":"comparator","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparatorImpl comparator\u003dnew ComparatorImpl();\n"},null],"commonChilds":[]},{"diff":1,"declarations":[{"type":"ComparisonResult","value":"comparator.compare(\"F:/Workspace/structuralComaparator/src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"F:/Workspace/structuralComaparator/src/test/java/com/imaginea/structuralComaparator/test/JDTTester.java\")","lineNum":121,"name":"result12","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparisonResult result12\u003dcomparator.compare(\"F:/Workspace/structuralComaparator/src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"F:/Workspace/structuralComaparator/src/test/java/com/imaginea/structuralComaparator/test/JDTTester.java\");\n"},null],"commonChilds":[]},{"diff":1,"declarations":[{"type":"Gson","value":"new Gson()","lineNum":124,"name":"gson","modifiers":[],"childDeclarations":{},"completeNodeValue":"Gson gson\u003dnew Gson();\n"},null],"commonChilds":[]},{"diff":1,"declarations":[{"type":"String","value":"gson.toJson(result12)","lineNum":125,"name":"json","modifiers":[],"childDeclarations":{},"completeNodeValue":"String json\u003dgson.toJson(result12);\n"},null],"commonChilds":[]},{"diff":1,"declarations":[{"value":"try {\n  writeToFile(json);\n}\n catch (IOException e) {\n  e.printStackTrace();\n}\n","lineNum":126,"childDeclarations":{},"completeNodeValue":"try {\n  writeToFile(json);\n}\n catch (IOException e) {\n  e.printStackTrace();\n}\n"},null],"commonChilds":[]},{"diff":1,"declarations":[{"value":"System.out.println(\"\\n\\n\\n\" + json + \"\\n\\n*********************\");\n","lineNum":131,"childDeclarations":{},"completeNodeValue":"System.out.println(\"\\n\\n\\n\" + json + \"\\n\\n*********************\");\n"},null],"commonChilds":[]},{"diff":1,"declarations":[{"type":"ComparisonResult","value":"gson.fromJson(json,ComparisonResult.class)","lineNum":132,"name":"result1","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparisonResult result1\u003dgson.fromJson(json,ComparisonResult.class);\n"},null],"commonChilds":[]},{"diff":1,"declarations":[{"value":"System.out.println(\"\" + result1.getImports().size());\n","lineNum":133,"childDeclarations":{},"completeNodeValue":"System.out.println(\"\" + result1.getImports().size());\n"},null],"commonChilds":[]},{"diff":1,"declarations":[{"value":"System.out.println(\"\" + result1.getTypes().get(3).getClass());\n","lineNum":134,"childDeclarations":{},"completeNodeValue":"System.out.println(\"\" + result1.getTypes().get(3).getClass());\n"},null],"commonChilds":[]},{"diff":1,"declarations":[{"value":"System.out.println(\"\" + result1.getTypes().get(3).getAbstractDeclarations(0).getClass());\n","lineNum":135,"childDeclarations":{},"completeNodeValue":"System.out.println(\"\" + result1.getTypes().get(3).getAbstractDeclarations(0).getClass());\n"},null],"commonChilds":[]},{"diff":1,"declarations":[{"value":"System.out.println(\"\" + result1.getImports().size());\n","lineNum":136,"childDeclarations":{},"completeNodeValue":"System.out.println(\"\" + result1.getImports().size());\n"},null],"commonChilds":[]}]},{"diff":1,"declarations":[{"isInterface":false,"superClass":"","superInterfacelist":[],"bodyDeclarations":[],"lineNum":171,"name":"mp","modifiers":[],"childDeclarations":{"bvdes_Class":{"isInterface":false,"superClass":"","superInterfacelist":[],"bodyDeclarations":[],"lineNum":172,"name":"bvdes","modifiers":[],"childDeclarations":{"temp_Method":{"isConstructor":false,"returnType":"void","parameters":"","thrownExceptions":[],"blockofStatements":[],"lineNum":173,"name":"temp","modifiers":[],"childDeclarations":{},"completeNodeValue":"void temp(){\n}\n"}},"completeNodeValue":"class bvdes {\n  void temp(){\n  }\n}\n"}},"completeNodeValue":"class mp {\nclass bvdes {\n    void temp(){\n    }\n  }\n}\n"},null],"commonChilds":[{"diff":1,"declarations":[{"isInterface":false,"superClass":"","superInterfacelist":[],"bodyDeclarations":[],"lineNum":172,"name":"bvdes","modifiers":[],"childDeclarations":{"temp_Method":{"isConstructor":false,"returnType":"void","parameters":"","thrownExceptions":[],"blockofStatements":[],"lineNum":173,"name":"temp","modifiers":[],"childDeclarations":{},"completeNodeValue":"void temp(){\n}\n"}},"completeNodeValue":"class bvdes {\n  void temp(){\n  }\n}\n"},null],"commonChilds":[{"diff":1,"declarations":[{"isConstructor":false,"returnType":"void","parameters":"","thrownExceptions":[],"blockofStatements":[],"lineNum":173,"name":"temp","modifiers":[],"childDeclarations":{},"completeNodeValue":"void temp(){\n}\n"},null],"commonChilds":[]}]}]},{"diff":1,"declarations":[{"isConstructor":false,"returnType":"void","parameters":"","thrownExceptions":[],"blockofStatements":[{"type":"ComparatorImpl","value":"new ComparatorImpl()","lineNum":91,"name":"comparator","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparatorImpl comparator\u003dnew ComparatorImpl();\n"},{"type":"ComparisonResult","value":"comparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\")","lineNum":92,"name":"result","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\");\n"},{"value":"isPackageDifferent(result.getPkg());\n","lineNum":94,"childDeclarations":{},"completeNodeValue":"isPackageDifferent(result.getPkg());\n"},{"value":"isImportsDifferent(result.getImports());\n","lineNum":95,"childDeclarations":{},"completeNodeValue":"isImportsDifferent(result.getImports());\n"},{"value":"isTypesDifferent(result.getTypes());\n","lineNum":96,"childDeclarations":{},"completeNodeValue":"isTypesDifferent(result.getTypes());\n"}],"lineNum":89,"name":"assertJavaFileStructuresEqual","modifiers":["@Test","public","final"],"childDeclarations":{},"completeNodeValue":"@Test public final void assertJavaFileStructuresEqual(){\n  ComparatorImpl comparator\u003dnew ComparatorImpl();\n  ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\");\n  isPackageDifferent(result.getPkg());\n  isImportsDifferent(result.getImports());\n  isTypesDifferent(result.getTypes());\n}\n"},null],"commonChilds":[{"diff":1,"declarations":[{"type":"ComparatorImpl","value":"new ComparatorImpl()","lineNum":91,"name":"comparator","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparatorImpl comparator\u003dnew ComparatorImpl();\n"},null],"commonChilds":[]},{"diff":1,"declarations":[{"type":"ComparisonResult","value":"comparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\")","lineNum":92,"name":"result","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\");\n"},null],"commonChilds":[]},{"diff":1,"declarations":[{"value":"isPackageDifferent(result.getPkg());\n","lineNum":94,"childDeclarations":{},"completeNodeValue":"isPackageDifferent(result.getPkg());\n"},null],"commonChilds":[]},{"diff":1,"declarations":[{"value":"isImportsDifferent(result.getImports());\n","lineNum":95,"childDeclarations":{},"completeNodeValue":"isImportsDifferent(result.getImports());\n"},null],"commonChilds":[]},{"diff":1,"declarations":[{"value":"isTypesDifferent(result.getTypes());\n","lineNum":96,"childDeclarations":{},"completeNodeValue":"isTypesDifferent(result.getTypes());\n"},null],"commonChilds":[]}]},{"diff":1,"declarations":[{"type":"int[]","value":"{1,2}","lineNum":42,"name":"arr","modifiers":[],"childDeclarations":{},"completeNodeValue":"int[] arr\u003d{1,2};\n"},null],"commonChilds":[]},{"diff":1,"declarations":[{"isConstructor":false,"returnType":"void","parameters":"Package pkg","thrownExceptions":[],"blockofStatements":[{"value":"if (pkg.getDiff() !\u003d 0) Assert.fail(\"Package is different: \" + pkg);\n","lineNum":64,"childDeclarations":{},"completeNodeValue":"if (pkg.getDiff() !\u003d 0) Assert.fail(\"Package is different: \" + pkg);\n"}],"lineNum":63,"name":"isPackageDifferent","modifiers":["private"],"childDeclarations":{},"completeNodeValue":"private void isPackageDifferent(Package pkg){\n  if (pkg.getDiff() !\u003d 0)   Assert.fail(\"Package is different: \" + pkg);\n}\n"},null],"commonChilds":[{"diff":1,"declarations":[{"value":"if (pkg.getDiff() !\u003d 0) Assert.fail(\"Package is different: \" + pkg);\n","lineNum":64,"childDeclarations":{},"completeNodeValue":"if (pkg.getDiff() !\u003d 0) Assert.fail(\"Package is different: \" + pkg);\n"},null],"commonChilds":[]}]},{"diff":1,"declarations":[{"isConstructor":false,"returnType":"void","parameters":"List\u003cImport\u003e imports","thrownExceptions":[],"blockofStatements":[{"value":"for (Import imp : imports) if (imp.getDiff() !\u003d 0) Assert.fail(\"Imports are different: \" + imp);\n","lineNum":69,"childDeclarations":{},"completeNodeValue":"for (Import imp : imports) if (imp.getDiff() !\u003d 0) Assert.fail(\"Imports are different: \" + imp);\n"}],"lineNum":68,"name":"isImportsDifferent","modifiers":[],"childDeclarations":{},"completeNodeValue":"void isImportsDifferent(List\u003cImport\u003e imports){\n  for (  Import imp : imports)   if (imp.getDiff() !\u003d 0)   Assert.fail(\"Imports are different: \" + imp);\n}\n"},null],"commonChilds":[{"diff":1,"declarations":[{"value":"for (Import imp : imports) if (imp.getDiff() !\u003d 0) Assert.fail(\"Imports are different: \" + imp);\n","lineNum":69,"childDeclarations":{},"completeNodeValue":"for (Import imp : imports) if (imp.getDiff() !\u003d 0) Assert.fail(\"Imports are different: \" + imp);\n"},null],"commonChilds":[]}]},{"diff":1,"declarations":[{"isConstructor":false,"returnType":"String","parameters":"","thrownExceptions":[],"blockofStatements":[{"type":"ToStringBuilder","value":"new ToStringBuilder(this)","lineNum":164,"name":"builder","modifiers":[],"childDeclarations":{},"completeNodeValue":"ToStringBuilder builder\u003dnew ToStringBuilder(this);\n"},{"value":"builder.append(\"value\",value);\n","lineNum":165,"childDeclarations":{},"completeNodeValue":"builder.append(\"value\",value);\n"},{"value":"if (arr !\u003d null) builder.append(\"arr\",Arrays.toString(arr));\n","lineNum":166,"childDeclarations":{},"completeNodeValue":"if (arr !\u003d null) builder.append(\"arr\",Arrays.toString(arr));\n"},{"value":"return builder.toString();\n","lineNum":168,"childDeclarations":{},"completeNodeValue":"return builder.toString();\n"}],"lineNum":162,"name":"toString","modifiers":["@Override","public"],"childDeclarations":{},"completeNodeValue":"@Override public String toString(){\n  ToStringBuilder builder\u003dnew ToStringBuilder(this);\n  builder.append(\"value\",value);\n  if (arr !\u003d null)   builder.append(\"arr\",Arrays.toString(arr));\n  return builder.toString();\n}\n"},null],"commonChilds":[{"diff":1,"declarations":[{"type":"ToStringBuilder","value":"new ToStringBuilder(this)","lineNum":164,"name":"builder","modifiers":[],"childDeclarations":{},"completeNodeValue":"ToStringBuilder builder\u003dnew ToStringBuilder(this);\n"},null],"commonChilds":[]},{"diff":1,"declarations":[{"value":"builder.append(\"value\",value);\n","lineNum":165,"childDeclarations":{},"completeNodeValue":"builder.append(\"value\",value);\n"},null],"commonChilds":[]},{"diff":1,"declarations":[{"value":"if (arr !\u003d null) builder.append(\"arr\",Arrays.toString(arr));\n","lineNum":166,"childDeclarations":{},"completeNodeValue":"if (arr !\u003d null) builder.append(\"arr\",Arrays.toString(arr));\n"},null],"commonChilds":[]},{"diff":1,"declarations":[{"value":"return builder.toString();\n","lineNum":168,"childDeclarations":{},"completeNodeValue":"return builder.toString();\n"},null],"commonChilds":[]}]},{"diff":1,"declarations":[{"isConstructor":false,"returnType":"void","parameters":"String json","thrownExceptions":["IOException"],"blockofStatements":[{"type":"File","value":"new File(\"C:/Users/vinod/Desktop/dummy.json\")","lineNum":140,"name":"file","modifiers":[],"childDeclarations":{},"completeNodeValue":"File file\u003dnew File(\"C:/Users/vinod/Desktop/dummy.json\");\n"},{"type":"BufferedWriter","value":"null","lineNum":141,"name":"writer","modifiers":[],"childDeclarations":{},"completeNodeValue":"BufferedWriter writer\u003dnull;\n"},{"value":"try {\n  writer\u003dnew BufferedWriter(new FileWriter(file));\n  writer.write(json);\n}\n catch (IOException e) {\n}\n finally {\n  try {\n    if (writer !\u003d null)     writer.close();\n  }\n catch (  IOException e) {\n  }\n}\n","lineNum":142,"childDeclarations":{},"completeNodeValue":"try {\n  writer\u003dnew BufferedWriter(new FileWriter(file));\n  writer.write(json);\n}\n catch (IOException e) {\n}\n finally {\n  try {\n    if (writer !\u003d null)     writer.close();\n  }\n catch (  IOException e) {\n  }\n}\n"}],"lineNum":139,"name":"writeToFile","modifiers":["private","static"],"childDeclarations":{},"completeNodeValue":"private static void writeToFile(String json) throws IOException {\n  File file\u003dnew File(\"C:/Users/vinod/Desktop/dummy.json\");\n  BufferedWriter writer\u003dnull;\n  try {\n    writer\u003dnew BufferedWriter(new FileWriter(file));\n    writer.write(json);\n  }\n catch (  IOException e) {\n  }\n finally {\n    try {\n      if (writer !\u003d null)       writer.close();\n    }\n catch (    IOException e) {\n    }\n  }\n}\n"},null],"commonChilds":[{"diff":1,"declarations":[{"type":"File","value":"new File(\"C:/Users/vinod/Desktop/dummy.json\")","lineNum":140,"name":"file","modifiers":[],"childDeclarations":{},"completeNodeValue":"File file\u003dnew File(\"C:/Users/vinod/Desktop/dummy.json\");\n"},null],"commonChilds":[]},{"diff":1,"declarations":[{"type":"BufferedWriter","value":"null","lineNum":141,"name":"writer","modifiers":[],"childDeclarations":{},"completeNodeValue":"BufferedWriter writer\u003dnull;\n"},null],"commonChilds":[]},{"diff":1,"declarations":[{"value":"try {\n  writer\u003dnew BufferedWriter(new FileWriter(file));\n  writer.write(json);\n}\n catch (IOException e) {\n}\n finally {\n  try {\n    if (writer !\u003d null)     writer.close();\n  }\n catch (  IOException e) {\n  }\n}\n","lineNum":142,"childDeclarations":{},"completeNodeValue":"try {\n  writer\u003dnew BufferedWriter(new FileWriter(file));\n  writer.write(json);\n}\n catch (IOException e) {\n}\n finally {\n  try {\n    if (writer !\u003d null)     writer.close();\n  }\n catch (  IOException e) {\n  }\n}\n"},null],"commonChilds":[]}]},{"diff":1,"declarations":[{"isConstructor":false,"returnType":"void","parameters":"List\u003cType\u003e types","thrownExceptions":[],"blockofStatements":[{"value":"for (Type type : types) if (type.getDiff() !\u003d 0) Assert.fail(\"Imports are different: \" + type);\n","lineNum":84,"childDeclarations":{},"completeNodeValue":"for (Type type : types) if (type.getDiff() !\u003d 0) Assert.fail(\"Imports are different: \" + type);\n"}],"lineNum":83,"name":"isTypesDifferent","modifiers":["private"],"childDeclarations":{},"completeNodeValue":"private void isTypesDifferent(List\u003cType\u003e types){\n  for (  Type type : types)   if (type.getDiff() !\u003d 0)   Assert.fail(\"Imports are different: \" + type);\n}\n"},null],"commonChilds":[{"diff":1,"declarations":[{"value":"for (Type type : types) if (type.getDiff() !\u003d 0) Assert.fail(\"Imports are different: \" + type);\n","lineNum":84,"childDeclarations":{},"completeNodeValue":"for (Type type : types) if (type.getDiff() !\u003d 0) Assert.fail(\"Imports are different: \" + type);\n"},null],"commonChilds":[]}]},{"diff":1,"declarations":[{"isConstructor":false,"returnType":"void","parameters":"","thrownExceptions":[],"blockofStatements":[{"type":"ComparatorImpl","value":"new ComparatorImpl()","lineNum":110,"name":"comparator","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparatorImpl comparator\u003dnew ComparatorImpl();\n"},{"type":"ComparisonResult","value":"comparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\")","lineNum":111,"name":"result","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\");\n"},{"type":"List\u003cImport\u003e","value":"result.getImports()","lineNum":113,"name":"imports","modifiers":[],"childDeclarations":{},"completeNodeValue":"List\u003cImport\u003e imports\u003dresult.getImports();\n"},{"value":"for (Import imp : imports) {\n  System.out.println(imp);\n}\n","lineNum":114,"childDeclarations":{},"completeNodeValue":"for (Import imp : imports) {\n  System.out.println(imp);\n}\n"}],"lineNum":109,"name":"testImports","modifiers":["static"],"childDeclarations":{},"completeNodeValue":"static void testImports(){\n  ComparatorImpl comparator\u003dnew ComparatorImpl();\n  ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\");\n  List\u003cImport\u003e imports\u003dresult.getImports();\n  for (  Import imp : imports) {\n    System.out.println(imp);\n  }\n}\n"},null],"commonChilds":[{"diff":1,"declarations":[{"type":"ComparatorImpl","value":"new ComparatorImpl()","lineNum":110,"name":"comparator","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparatorImpl comparator\u003dnew ComparatorImpl();\n"},null],"commonChilds":[]},{"diff":1,"declarations":[{"type":"ComparisonResult","value":"comparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\")","lineNum":111,"name":"result","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\");\n"},null],"commonChilds":[]},{"diff":1,"declarations":[{"type":"List\u003cImport\u003e","value":"result.getImports()","lineNum":113,"name":"imports","modifiers":[],"childDeclarations":{},"completeNodeValue":"List\u003cImport\u003e imports\u003dresult.getImports();\n"},null],"commonChilds":[]},{"diff":1,"declarations":[{"value":"for (Import imp : imports) {\n  System.out.println(imp);\n}\n","lineNum":114,"childDeclarations":{},"completeNodeValue":"for (Import imp : imports) {\n  System.out.println(imp);\n}\n"},null],"commonChilds":[]}]},{"diff":1,"declarations":[{"isConstructor":false,"returnType":"void","parameters":"","thrownExceptions":[],"blockofStatements":[{"type":"ComparatorImpl","value":"new ComparatorImpl()","lineNum":56,"name":"comparator","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparatorImpl comparator\u003dnew ComparatorImpl();\n"},{"type":"ComparisonResult","value":"comparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\")","lineNum":57,"name":"result","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\");\n"},{"type":"List\u003cImport\u003e","value":"result.getImports()","lineNum":59,"name":"imports","modifiers":[],"childDeclarations":{},"completeNodeValue":"List\u003cImport\u003e imports\u003dresult.getImports();\n"},{"value":"isImportsDifferent(imports);\n","lineNum":60,"childDeclarations":{},"completeNodeValue":"isImportsDifferent(imports);\n"}],"lineNum":54,"name":"assertImportsEqual","modifiers":["@Test","public","final"],"childDeclarations":{},"completeNodeValue":"@Test public final void assertImportsEqual(){\n  ComparatorImpl comparator\u003dnew ComparatorImpl();\n  ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\");\n  List\u003cImport\u003e imports\u003dresult.getImports();\n  isImportsDifferent(imports);\n}\n"},null],"commonChilds":[{"diff":1,"declarations":[{"type":"ComparatorImpl","value":"new ComparatorImpl()","lineNum":56,"name":"comparator","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparatorImpl comparator\u003dnew ComparatorImpl();\n"},null],"commonChilds":[]},{"diff":1,"declarations":[{"type":"ComparisonResult","value":"comparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\")","lineNum":57,"name":"result","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\");\n"},null],"commonChilds":[]},{"diff":1,"declarations":[{"type":"List\u003cImport\u003e","value":"result.getImports()","lineNum":59,"name":"imports","modifiers":[],"childDeclarations":{},"completeNodeValue":"List\u003cImport\u003e imports\u003dresult.getImports();\n"},null],"commonChilds":[]},{"diff":1,"declarations":[{"value":"isImportsDifferent(imports);\n","lineNum":60,"childDeclarations":{},"completeNodeValue":"isImportsDifferent(imports);\n"},null],"commonChilds":[]}]},{"diff":1,"declarations":[{"isConstructor":false,"returnType":"void","parameters":"","thrownExceptions":[],"blockofStatements":[{"type":"ComparatorImpl","value":"new ComparatorImpl()","lineNum":76,"name":"comparator","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparatorImpl comparator\u003dnew ComparatorImpl();\n"},{"type":"ComparisonResult","value":"comparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\")","lineNum":77,"name":"result","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\");\n"},{"type":"List\u003cType\u003e","value":"result.getTypes()","lineNum":79,"name":"types","modifiers":[],"childDeclarations":{},"completeNodeValue":"List\u003cType\u003e types\u003dresult.getTypes();\n"},{"value":"isTypesDifferent(types);\n","lineNum":80,"childDeclarations":{},"completeNodeValue":"isTypesDifferent(types);\n"}],"lineNum":74,"name":"assertTypesEqual","modifiers":["@Test","public","final"],"childDeclarations":{},"completeNodeValue":"@Test public final void assertTypesEqual(){\n  ComparatorImpl comparator\u003dnew ComparatorImpl();\n  ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\");\n  List\u003cType\u003e types\u003dresult.getTypes();\n  isTypesDifferent(types);\n}\n"},null],"commonChilds":[{"diff":1,"declarations":[{"type":"ComparatorImpl","value":"new ComparatorImpl()","lineNum":76,"name":"comparator","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparatorImpl comparator\u003dnew ComparatorImpl();\n"},null],"commonChilds":[]},{"diff":1,"declarations":[{"type":"ComparisonResult","value":"comparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\")","lineNum":77,"name":"result","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\");\n"},null],"commonChilds":[]},{"diff":1,"declarations":[{"type":"List\u003cType\u003e","value":"result.getTypes()","lineNum":79,"name":"types","modifiers":[],"childDeclarations":{},"completeNodeValue":"List\u003cType\u003e types\u003dresult.getTypes();\n"},null],"commonChilds":[]},{"diff":1,"declarations":[{"value":"isTypesDifferent(types);\n","lineNum":80,"childDeclarations":{},"completeNodeValue":"isTypesDifferent(types);\n"},null],"commonChilds":[]}]},{"diff":1,"declarations":[{"isConstructor":false,"returnType":"void","parameters":"","thrownExceptions":[],"blockofStatements":[{"type":"ComparatorImpl","value":"new ComparatorImpl()","lineNum":100,"name":"comparator","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparatorImpl comparator\u003dnew ComparatorImpl();\n"},{"type":"ComparisonResult","value":"comparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/resources/TestJavaFiles/Testing.java.txt\")","lineNum":101,"name":"result","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/resources/TestJavaFiles/Testing.java.txt\");\n"},{"type":"List\u003cType\u003e","value":"result.getTypes()","lineNum":103,"name":"types","modifiers":[],"childDeclarations":{},"completeNodeValue":"List\u003cType\u003e types\u003dresult.getTypes();\n"},{"value":"for (Type type : types) {\n  System.out.println(type);\n}\n","lineNum":104,"childDeclarations":{},"completeNodeValue":"for (Type type : types) {\n  System.out.println(type);\n}\n"}],"lineNum":99,"name":"testTypes","modifiers":["static"],"childDeclarations":{},"completeNodeValue":"static void testTypes(){\n  ComparatorImpl comparator\u003dnew ComparatorImpl();\n  ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/resources/TestJavaFiles/Testing.java.txt\");\n  List\u003cType\u003e types\u003dresult.getTypes();\n  for (  Type type : types) {\n    System.out.println(type);\n  }\n}\n"},null],"commonChilds":[{"diff":1,"declarations":[{"type":"ComparatorImpl","value":"new ComparatorImpl()","lineNum":100,"name":"comparator","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparatorImpl comparator\u003dnew ComparatorImpl();\n"},null],"commonChilds":[]},{"diff":1,"declarations":[{"type":"ComparisonResult","value":"comparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/resources/TestJavaFiles/Testing.java.txt\")","lineNum":101,"name":"result","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/resources/TestJavaFiles/Testing.java.txt\");\n"},null],"commonChilds":[]},{"diff":1,"declarations":[{"type":"List\u003cType\u003e","value":"result.getTypes()","lineNum":103,"name":"types","modifiers":[],"childDeclarations":{},"completeNodeValue":"List\u003cType\u003e types\u003dresult.getTypes();\n"},null],"commonChilds":[]},{"diff":1,"declarations":[{"value":"for (Type type : types) {\n  System.out.println(type);\n}\n","lineNum":104,"childDeclarations":{},"completeNodeValue":"for (Type type : types) {\n  System.out.println(type);\n}\n"},null],"commonChilds":[]}]},{"diff":1,"declarations":[{"type":"int","value":"0","lineNum":41,"name":"value","modifiers":[],"childDeclarations":{},"completeNodeValue":"int value\u003d0;\n"},null],"commonChilds":[]},{"diff":1,"declarations":[{"isInterface":false,"superClass":"","superInterfacelist":[],"bodyDeclarations":[],"lineNum":155,"name":"mnop","modifiers":[],"childDeclarations":{"bvd_Class":{"isInterface":false,"superClass":"","superInterfacelist":[],"bodyDeclarations":[],"lineNum":156,"name":"bvd","modifiers":[],"childDeclarations":{"temp_Method":{"isConstructor":false,"returnType":"void","parameters":"","thrownExceptions":[],"blockofStatements":[],"lineNum":157,"name":"temp","modifiers":[],"childDeclarations":{},"completeNodeValue":"void temp(){\n}\n"}},"completeNodeValue":"class bvd {\n  void temp(){\n  }\n}\n"}},"completeNodeValue":"class mnop {\nclass bvd {\n    void temp(){\n    }\n  }\n}\n"},null],"commonChilds":[{"diff":1,"declarations":[{"isInterface":false,"superClass":"","superInterfacelist":[],"bodyDeclarations":[],"lineNum":156,"name":"bvd","modifiers":[],"childDeclarations":{"temp_Method":{"isConstructor":false,"returnType":"void","parameters":"","thrownExceptions":[],"blockofStatements":[],"lineNum":157,"name":"temp","modifiers":[],"childDeclarations":{},"completeNodeValue":"void temp(){\n}\n"}},"completeNodeValue":"class bvd {\n  void temp(){\n  }\n}\n"},null],"commonChilds":[{"diff":1,"declarations":[{"isConstructor":false,"returnType":"void","parameters":"","thrownExceptions":[],"blockofStatements":[],"lineNum":157,"name":"temp","modifiers":[],"childDeclarations":{},"completeNodeValue":"void temp(){\n}\n"},null],"commonChilds":[]}]}]},{"diff":1,"declarations":[{"isConstructor":false,"returnType":"void","parameters":"","thrownExceptions":[],"blockofStatements":[{"type":"ComparatorImpl","value":"new ComparatorImpl()","lineNum":46,"name":"comparator","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparatorImpl comparator\u003dnew ComparatorImpl();\n"},{"type":"ComparisonResult","value":"comparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\")","lineNum":47,"name":"result","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\");\n"},{"type":"com.imaginea.structuralComaparator.domain.Package","value":"result.getPkg()","lineNum":49,"name":"pkg","modifiers":[],"childDeclarations":{},"completeNodeValue":"com.imaginea.structuralComaparator.domain.Package pkg\u003dresult.getPkg();\n"},{"value":"isPackageDifferent(pkg);\n","lineNum":50,"childDeclarations":{},"completeNodeValue":"isPackageDifferent(pkg);\n"}],"lineNum":44,"name":"assertPackageEqual","modifiers":["@Test","public","final"],"childDeclarations":{},"completeNodeValue":"@Test public final void assertPackageEqual(){\n  ComparatorImpl comparator\u003dnew ComparatorImpl();\n  ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\");\n  com.imaginea.structuralComaparator.domain.Package pkg\u003dresult.getPkg();\n  isPackageDifferent(pkg);\n}\n"},null],"commonChilds":[{"diff":1,"declarations":[{"type":"ComparatorImpl","value":"new ComparatorImpl()","lineNum":46,"name":"comparator","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparatorImpl comparator\u003dnew ComparatorImpl();\n"},null],"commonChilds":[]},{"diff":1,"declarations":[{"type":"ComparisonResult","value":"comparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\")","lineNum":47,"name":"result","modifiers":[],"childDeclarations":{},"completeNodeValue":"ComparisonResult result\u003dcomparator.compare(\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\",\"src/test/java/com/imaginea/structuralComaparator/test/StructuralComapareTest.java\");\n"},null],"commonChilds":[]},{"diff":1,"declarations":[{"type":"com.imaginea.structuralComaparator.domain.Package","value":"result.getPkg()","lineNum":49,"name":"pkg","modifiers":[],"childDeclarations":{},"completeNodeValue":"com.imaginea.structuralComaparator.domain.Package pkg\u003dresult.getPkg();\n"},null],"commonChilds":[]},{"diff":1,"declarations":[{"value":"isPackageDifferent(pkg);\n","lineNum":50,"childDeclarations":{},"completeNodeValue":"isPackageDifferent(pkg);\n"},null],"commonChilds":[]}]}]},{"diff":1,"declarations":[{"enumConstants":["apple","appl"],"superInterfacelist":[],"bodyDeclarations":[],"lineNum":35,"name":"en","modifiers":[],"childDeclarations":{},"completeNodeValue":"enum en {apple, appl}\n"},null],"commonChilds":[]}]}
